
Ultrasonic_scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008540  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  080086e0  080086e0  000186e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bc4  08008bc4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008bc4  08008bc4  00018bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bcc  08008bcc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bcc  08008bcc  00018bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bd0  08008bd0  00018bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200001e0  08008db4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08008db4  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d152  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0a  00000000  00000000  0002d362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  0002f070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  0002fcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170ff  00000000  00000000  00030848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3f7  00000000  00000000  00047947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e4d6  00000000  00000000  00053d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2214  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004900  00000000  00000000  000e2268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080086c8 	.word	0x080086c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080086c8 	.word	0x080086c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	0000      	movs	r0, r0
	...

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b09c      	sub	sp, #112	; 0x70
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	unsigned numOfTics = 0; //number of tics
 8001006:	2300      	movs	r3, #0
 8001008:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100a:	f000 fce1 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100e:	f000 f8b1 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001012:	f000 fa09 	bl	8001428 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001016:	f000 f9dd 	bl	80013d4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800101a:	f000 f98f 	bl	800133c <MX_TIM4_Init>
  MX_TIM3_Init();
 800101e:	f000 f915 	bl	800124c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001022:	2100      	movs	r1, #0
 8001024:	484e      	ldr	r0, [pc, #312]	; (8001160 <main+0x160>)
 8001026:	f001 fd4d 	bl	8002ac4 <HAL_TIM_PWM_Start>

  htim3.Instance -> CCR1 = 35;
 800102a:	4b4d      	ldr	r3, [pc, #308]	; (8001160 <main+0x160>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2223      	movs	r2, #35	; 0x23
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(500);
 8001032:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001036:	f000 fd3d 	bl	8001ab4 <HAL_Delay>

  htim3.Instance -> CCR1 = 75;
 800103a:	4b49      	ldr	r3, [pc, #292]	; (8001160 <main+0x160>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	224b      	movs	r2, #75	; 0x4b
 8001040:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(500);
 8001042:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001046:	f000 fd35 	bl	8001ab4 <HAL_Delay>

  htim3.Instance -> CCR1 = 112;
 800104a:	4b45      	ldr	r3, [pc, #276]	; (8001160 <main+0x160>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2270      	movs	r2, #112	; 0x70
 8001050:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(500);
 8001052:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001056:	f000 fd2d 	bl	8001ab4 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Setting the trigger pin low for a couple of microseconds to make sure that everything is stable

	  HAL_GPIO_WritePin(Ultrasonic1_trig_GPIO_Port, Ultrasonic1_trig_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001060:	4840      	ldr	r0, [pc, #256]	; (8001164 <main+0x164>)
 8001062:	f000 fff9 	bl	8002058 <HAL_GPIO_WritePin>
	  mDelay(3);
 8001066:	2003      	movs	r0, #3
 8001068:	f000 fa5c 	bl	8001524 <mDelay>

	  //***************Starting the Ultrasonic Measuring routine****************//
	  //1. Sending a ultrasonic impulse for 10 us
	  HAL_GPIO_WritePin(Ultrasonic1_trig_GPIO_Port, Ultrasonic1_trig_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001072:	483c      	ldr	r0, [pc, #240]	; (8001164 <main+0x164>)
 8001074:	f000 fff0 	bl	8002058 <HAL_GPIO_WritePin>
	  mDelay(10);
 8001078:	200a      	movs	r0, #10
 800107a:	f000 fa53 	bl	8001524 <mDelay>
	  HAL_GPIO_WritePin(Ultrasonic1_trig_GPIO_Port, Ultrasonic1_trig_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001084:	4837      	ldr	r0, [pc, #220]	; (8001164 <main+0x164>)
 8001086:	f000 ffe7 	bl	8002058 <HAL_GPIO_WritePin>

	  //2. Wait for ECHO pin rising edge (wait for the echo pin to start)
	  while(HAL_GPIO_ReadPin(Ultrasonic1_echo_GPIO_Port,Ultrasonic1_echo_Pin) == GPIO_PIN_RESET);
 800108a:	bf00      	nop
 800108c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001090:	4834      	ldr	r0, [pc, #208]	; (8001164 <main+0x164>)
 8001092:	f000 ffc9 	bl	8002028 <HAL_GPIO_ReadPin>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f7      	beq.n	800108c <main+0x8c>

	  //3.Start measuring the ultrasonic impulses
	  numOfTics = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	66fb      	str	r3, [r7, #108]	; 0x6c
	  while(HAL_GPIO_ReadPin(Ultrasonic1_echo_GPIO_Port,Ultrasonic1_echo_Pin) == GPIO_PIN_SET){
 80010a0:	e005      	b.n	80010ae <main+0xae>
		  numOfTics++;
 80010a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010a4:	3301      	adds	r3, #1
 80010a6:	66fb      	str	r3, [r7, #108]	; 0x6c
		  mDelay(2);
 80010a8:	2002      	movs	r0, #2
 80010aa:	f000 fa3b 	bl	8001524 <mDelay>
	  while(HAL_GPIO_ReadPin(Ultrasonic1_echo_GPIO_Port,Ultrasonic1_echo_Pin) == GPIO_PIN_SET){
 80010ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b2:	482c      	ldr	r0, [pc, #176]	; (8001164 <main+0x164>)
 80010b4:	f000 ffb8 	bl	8002028 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d0f1      	beq.n	80010a2 <main+0xa2>
	  }

	  //4. Estimate distance in cm
	  distance=(numOfTics + 0.0f)*2.8*speedOfSound;
 80010be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010c0:	ee07 3a90 	vmov	s15, r3
 80010c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010c8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001168 <main+0x168>
 80010cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010d0:	ee17 0a90 	vmov	r0, s15
 80010d4:	f7ff fa40 	bl	8000558 <__aeabi_f2d>
 80010d8:	a31d      	add	r3, pc, #116	; (adr r3, 8001150 <main+0x150>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff fa93 	bl	8000608 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	a31b      	add	r3, pc, #108	; (adr r3, 8001158 <main+0x158>)
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	f7ff fa8a 	bl	8000608 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001104:	f7ff fbaa 	bl	800085c <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fd72 	bl	8000bf8 <__aeabi_d2f>
 8001114:	4603      	mov	r3, r0
 8001116:	66bb      	str	r3, [r7, #104]	; 0x68

	  //5. Printing to UART terminal
	  sprintf(uartBuffer, "Distance in cm = %.1f\r\n",distance);
 8001118:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800111a:	f7ff fa1d 	bl	8000558 <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	1d38      	adds	r0, r7, #4
 8001124:	4911      	ldr	r1, [pc, #68]	; (800116c <main+0x16c>)
 8001126:	f003 fd2b 	bl	8004b80 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuffer, strlen(uartBuffer), 100);
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f857 	bl	80001e0 <strlen>
 8001132:	4603      	mov	r3, r0
 8001134:	b29a      	uxth	r2, r3
 8001136:	1d39      	adds	r1, r7, #4
 8001138:	2364      	movs	r3, #100	; 0x64
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <main+0x170>)
 800113c:	f002 fbc9 	bl	80038d2 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 8001140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001144:	f000 fcb6 	bl	8001ab4 <HAL_Delay>
	  HAL_GPIO_WritePin(Ultrasonic1_trig_GPIO_Port, Ultrasonic1_trig_Pin, GPIO_PIN_RESET);
 8001148:	e787      	b.n	800105a <main+0x5a>
 800114a:	bf00      	nop
 800114c:	f3af 8000 	nop.w
 8001150:	66666666 	.word	0x66666666
 8001154:	40066666 	.word	0x40066666
 8001158:	04816f00 	.word	0x04816f00
 800115c:	3fa18fc5 	.word	0x3fa18fc5
 8001160:	20000250 	.word	0x20000250
 8001164:	40020000 	.word	0x40020000
 8001168:	00000000 	.word	0x00000000
 800116c:	080086e0 	.word	0x080086e0
 8001170:	20000298 	.word	0x20000298

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	; 0x50
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	2230      	movs	r2, #48	; 0x30
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fe74 	bl	8003e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <SystemClock_Config+0xd0>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	4a28      	ldr	r2, [pc, #160]	; (8001244 <SystemClock_Config+0xd0>)
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a6:	6413      	str	r3, [r2, #64]	; 0x40
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <SystemClock_Config+0xd0>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	4b23      	ldr	r3, [pc, #140]	; (8001248 <SystemClock_Config+0xd4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011c0:	4a21      	ldr	r2, [pc, #132]	; (8001248 <SystemClock_Config+0xd4>)
 80011c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <SystemClock_Config+0xd4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d4:	2301      	movs	r3, #1
 80011d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011de:	2302      	movs	r3, #2
 80011e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011e8:	2304      	movs	r3, #4
 80011ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011ec:	2348      	movs	r3, #72	; 0x48
 80011ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011f4:	2307      	movs	r3, #7
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 ff45 	bl	800208c <HAL_RCC_OscConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001208:	f000 f9be 	bl	8001588 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120c:	230f      	movs	r3, #15
 800120e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001210:	2302      	movs	r3, #2
 8001212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001218:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800121c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800121e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001222:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2102      	movs	r1, #2
 800122a:	4618      	mov	r0, r3
 800122c:	f001 f9a6 	bl	800257c <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001236:	f000 f9a7 	bl	8001588 <Error_Handler>
  }
}
 800123a:	bf00      	nop
 800123c:	3750      	adds	r7, #80	; 0x50
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40007000 	.word	0x40007000

0800124c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	; 0x38
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <MX_TIM3_Init+0xe8>)
 800127e:	4a2e      	ldr	r2, [pc, #184]	; (8001338 <MX_TIM3_Init+0xec>)
 8001280:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 8001282:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <MX_TIM3_Init+0xe8>)
 8001284:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001288:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <MX_TIM3_Init+0xe8>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001290:	4b28      	ldr	r3, [pc, #160]	; (8001334 <MX_TIM3_Init+0xe8>)
 8001292:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001296:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b26      	ldr	r3, [pc, #152]	; (8001334 <MX_TIM3_Init+0xe8>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b25      	ldr	r3, [pc, #148]	; (8001334 <MX_TIM3_Init+0xe8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a4:	4823      	ldr	r0, [pc, #140]	; (8001334 <MX_TIM3_Init+0xe8>)
 80012a6:	f001 fb65 	bl	8002974 <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012b0:	f000 f96a 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012be:	4619      	mov	r1, r3
 80012c0:	481c      	ldr	r0, [pc, #112]	; (8001334 <MX_TIM3_Init+0xe8>)
 80012c2:	f001 fe75 	bl	8002fb0 <HAL_TIM_ConfigClockSource>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012cc:	f000 f95c 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012d0:	4818      	ldr	r0, [pc, #96]	; (8001334 <MX_TIM3_Init+0xe8>)
 80012d2:	f001 fb9e 	bl	8002a12 <HAL_TIM_PWM_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80012dc:	f000 f954 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4619      	mov	r1, r3
 80012ee:	4811      	ldr	r0, [pc, #68]	; (8001334 <MX_TIM3_Init+0xe8>)
 80012f0:	f002 fa20 	bl	8003734 <HAL_TIMEx_MasterConfigSynchronization>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012fa:	f000 f945 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fe:	2360      	movs	r3, #96	; 0x60
 8001300:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2200      	movs	r2, #0
 8001312:	4619      	mov	r1, r3
 8001314:	4807      	ldr	r0, [pc, #28]	; (8001334 <MX_TIM3_Init+0xe8>)
 8001316:	f001 fd8d 	bl	8002e34 <HAL_TIM_PWM_ConfigChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001320:	f000 f932 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <MX_TIM3_Init+0xe8>)
 8001326:	f000 f99b 	bl	8001660 <HAL_TIM_MspPostInit>

}
 800132a:	bf00      	nop
 800132c:	3738      	adds	r7, #56	; 0x38
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000250 	.word	0x20000250
 8001338:	40000400 	.word	0x40000400

0800133c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_TIM4_Init+0x90>)
 800135a:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <MX_TIM4_Init+0x94>)
 800135c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_TIM4_Init+0x90>)
 8001360:	2253      	movs	r2, #83	; 0x53
 8001362:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_TIM4_Init+0x90>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_TIM4_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_TIM4_Init+0x90>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_TIM4_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800137c:	4813      	ldr	r0, [pc, #76]	; (80013cc <MX_TIM4_Init+0x90>)
 800137e:	f001 faf9 	bl	8002974 <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001388:	f000 f8fe 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4619      	mov	r1, r3
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <MX_TIM4_Init+0x90>)
 800139a:	f001 fe09 	bl	8002fb0 <HAL_TIM_ConfigClockSource>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80013a4:	f000 f8f0 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_TIM4_Init+0x90>)
 80013b6:	f002 f9bd 	bl	8003734 <HAL_TIMEx_MasterConfigSynchronization>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80013c0:	f000 f8e2 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000208 	.word	0x20000208
 80013d0:	40000800 	.word	0x40000800

080013d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <MX_USART2_UART_Init+0x50>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 80013e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 800140c:	f002 fa14 	bl	8003838 <HAL_UART_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001416:	f000 f8b7 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000298 	.word	0x20000298
 8001424:	40004400 	.word	0x40004400

08001428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b34      	ldr	r3, [pc, #208]	; (8001514 <MX_GPIO_Init+0xec>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a33      	ldr	r2, [pc, #204]	; (8001514 <MX_GPIO_Init+0xec>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b31      	ldr	r3, [pc, #196]	; (8001514 <MX_GPIO_Init+0xec>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <MX_GPIO_Init+0xec>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a2c      	ldr	r2, [pc, #176]	; (8001514 <MX_GPIO_Init+0xec>)
 8001464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <MX_GPIO_Init+0xec>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <MX_GPIO_Init+0xec>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a25      	ldr	r2, [pc, #148]	; (8001514 <MX_GPIO_Init+0xec>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <MX_GPIO_Init+0xec>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <MX_GPIO_Init+0xec>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a1e      	ldr	r2, [pc, #120]	; (8001514 <MX_GPIO_Init+0xec>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <MX_GPIO_Init+0xec>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Ultrasonic1_trig_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 7190 	mov.w	r1, #288	; 0x120
 80014b4:	4818      	ldr	r0, [pc, #96]	; (8001518 <MX_GPIO_Init+0xf0>)
 80014b6:	f000 fdcf 	bl	8002058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_GPIO_Init+0xf4>)
 80014c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4814      	ldr	r0, [pc, #80]	; (8001520 <MX_GPIO_Init+0xf8>)
 80014d0:	f000 fc26 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Ultrasonic1_trig_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Ultrasonic1_trig_Pin;
 80014d4:	f44f 7390 	mov.w	r3, #288	; 0x120
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	480a      	ldr	r0, [pc, #40]	; (8001518 <MX_GPIO_Init+0xf0>)
 80014ee:	f000 fc17 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ultrasonic1_echo_Pin */
  GPIO_InitStruct.Pin = Ultrasonic1_echo_Pin;
 80014f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Ultrasonic1_echo_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_GPIO_Init+0xf0>)
 8001508:	f000 fc0a 	bl	8001d20 <HAL_GPIO_Init>

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000
 800151c:	10210000 	.word	0x10210000
 8001520:	40020800 	.word	0x40020800

08001524 <mDelay>:

/* USER CODE BEGIN 4 */
void mDelay(unsigned uSec){
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	if(uSec < 2){
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d801      	bhi.n	8001536 <mDelay+0x12>
		uSec = 2;
 8001532:	2302      	movs	r3, #2
 8001534:	607b      	str	r3, [r7, #4]
	}
	usTIMER->ARR = uSec-1;	//sets the value in the auto-reload register
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <mDelay+0x60>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIMER->EGR = 1;	//Re-initialises the timer
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <mDelay+0x60>)
 8001540:	2201      	movs	r2, #1
 8001542:	615a      	str	r2, [r3, #20]
	usTIMER->SR &= ~1;	//Resets the flag
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <mDelay+0x60>)
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <mDelay+0x60>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	6113      	str	r3, [r2, #16]
	usTIMER->CR1 |=1;	//Enables the counter
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <mDelay+0x60>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <mDelay+0x60>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6013      	str	r3, [r2, #0]
	while((usTIMER->SR&0x0001)!=1);
 800155c:	bf00      	nop
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <mDelay+0x60>)
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b01      	cmp	r3, #1
 8001568:	d1f9      	bne.n	800155e <mDelay+0x3a>
	usTIMER->SR &= ~(0x0001);
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <mDelay+0x60>)
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <mDelay+0x60>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6113      	str	r3, [r2, #16]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40000800 	.word	0x40000800

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	e7fe      	b.n	8001590 <Error_Handler+0x8>
	...

08001594 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <HAL_MspInit+0x4c>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	; 0x44
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <HAL_MspInit+0x4c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <HAL_MspInit+0x4c>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_MspInit+0x4c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015d2:	2007      	movs	r0, #7
 80015d4:	f000 fb62 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a18      	ldr	r2, [pc, #96]	; (8001654 <HAL_TIM_Base_MspInit+0x70>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d116      	bne.n	8001624 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_TIM_Base_MspInit+0x74>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a16      	ldr	r2, [pc, #88]	; (8001658 <HAL_TIM_Base_MspInit+0x74>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HAL_TIM_Base_MspInit+0x74>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	201d      	movs	r0, #29
 8001618:	f000 fb4b 	bl	8001cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800161c:	201d      	movs	r0, #29
 800161e:	f000 fb64 	bl	8001cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001622:	e012      	b.n	800164a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0c      	ldr	r2, [pc, #48]	; (800165c <HAL_TIM_Base_MspInit+0x78>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d10d      	bne.n	800164a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_TIM_Base_MspInit+0x74>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_TIM_Base_MspInit+0x74>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_TIM_Base_MspInit+0x74>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40000400 	.word	0x40000400
 8001658:	40023800 	.word	0x40023800
 800165c:	40000800 	.word	0x40000800

08001660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <HAL_TIM_MspPostInit+0x68>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d11d      	bne.n	80016be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_TIM_MspPostInit+0x6c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a10      	ldr	r2, [pc, #64]	; (80016cc <HAL_TIM_MspPostInit+0x6c>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_TIM_MspPostInit+0x6c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800169e:	2340      	movs	r3, #64	; 0x40
 80016a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <HAL_TIM_MspPostInit+0x70>)
 80016ba:	f000 fb31 	bl	8001d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40000400 	.word	0x40000400
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000

080016d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a19      	ldr	r2, [pc, #100]	; (8001758 <HAL_UART_MspInit+0x84>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d12b      	bne.n	800174e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_UART_MspInit+0x88>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a17      	ldr	r2, [pc, #92]	; (800175c <HAL_UART_MspInit+0x88>)
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_UART_MspInit+0x88>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_UART_MspInit+0x88>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a10      	ldr	r2, [pc, #64]	; (800175c <HAL_UART_MspInit+0x88>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <HAL_UART_MspInit+0x88>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800172e:	230c      	movs	r3, #12
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800173e:	2307      	movs	r3, #7
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <HAL_UART_MspInit+0x8c>)
 800174a:	f000 fae9 	bl	8001d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40004400 	.word	0x40004400
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <NMI_Handler+0x4>

0800176a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <MemManage_Handler+0x4>

08001776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <UsageFault_Handler+0x4>

08001782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b0:	f000 f960 	bl	8001a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIM3_IRQHandler+0x10>)
 80017be:	f001 fa31 	bl	8002c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000250 	.word	0x20000250

080017cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	return 1;
 80017d0:	2301      	movs	r3, #1
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_kill>:

int _kill(int pid, int sig)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017e6:	f002 fb19 	bl	8003e1c <__errno>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2216      	movs	r2, #22
 80017ee:	601a      	str	r2, [r3, #0]
	return -1;
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_exit>:

void _exit (int status)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ffe7 	bl	80017dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800180e:	e7fe      	b.n	800180e <_exit+0x12>

08001810 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e00a      	b.n	8001838 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001822:	f3af 8000 	nop.w
 8001826:	4601      	mov	r1, r0
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	60ba      	str	r2, [r7, #8]
 800182e:	b2ca      	uxtb	r2, r1
 8001830:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbf0      	blt.n	8001822 <_read+0x12>
	}

return len;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e009      	b.n	8001870 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	60ba      	str	r2, [r7, #8]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	dbf1      	blt.n	800185c <_write+0x12>
	}
	return len;
 8001878:	687b      	ldr	r3, [r7, #4]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_close>:

int _close(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	return -1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018aa:	605a      	str	r2, [r3, #4]
	return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <_isatty>:

int _isatty(int file)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
	return 1;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
	return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f002 fa7e 	bl	8003e1c <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20018000 	.word	0x20018000
 800194c:	00000400 	.word	0x00000400
 8001950:	200001fc 	.word	0x200001fc
 8001954:	200002f0 	.word	0x200002f0

08001958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001980:	480d      	ldr	r0, [pc, #52]	; (80019b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001982:	490e      	ldr	r1, [pc, #56]	; (80019bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001984:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001998:	4c0b      	ldr	r4, [pc, #44]	; (80019c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019a6:	f7ff ffd7 	bl	8001958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019aa:	f002 fa3d 	bl	8003e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ae:	f7ff fb27 	bl	8001000 <main>
  bx  lr    
 80019b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019c0:	08008bd4 	.word	0x08008bd4
  ldr r2, =_sbss
 80019c4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80019c8:	200002f0 	.word	0x200002f0

080019cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_Init+0x40>)
 80019da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_Init+0x40>)
 80019e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_Init+0x40>)
 80019f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 f94f 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fe:	2000      	movs	r0, #0
 8001a00:	f000 f808 	bl	8001a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a04:	f7ff fdc6 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_InitTick+0x54>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x58>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f967 	bl	8001d06 <HAL_SYSTICK_Config>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00e      	b.n	8001a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	d80a      	bhi.n	8001a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	f000 f92f 	bl	8001cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a54:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <HAL_InitTick+0x5c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x20>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x24>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_IncTick+0x24>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008
 8001a98:	200002dc 	.word	0x200002dc

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	200002dc 	.word	0x200002dc

08001ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff ffee 	bl	8001a9c <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d005      	beq.n	8001ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_Delay+0x44>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ada:	bf00      	nop
 8001adc:	f7ff ffde 	bl	8001a9c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d8f7      	bhi.n	8001adc <HAL_Delay+0x28>
  {
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000008 	.word	0x20000008

08001afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4907      	ldr	r1, [pc, #28]	; (8001b98 <__NVIC_EnableIRQ+0x38>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	; (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c68:	d301      	bcc.n	8001c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00f      	b.n	8001c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <SysTick_Config+0x40>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c76:	210f      	movs	r1, #15
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f7ff ff8e 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <SysTick_Config+0x40>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <SysTick_Config+0x40>)
 8001c88:	2207      	movs	r2, #7
 8001c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	e000e010 	.word	0xe000e010

08001c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ff29 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc4:	f7ff ff3e 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	6978      	ldr	r0, [r7, #20]
 8001cd0:	f7ff ff8e 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff5d 	bl	8001b9c <__NVIC_SetPriority>
}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff31 	bl	8001b60 <__NVIC_EnableIRQ>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff ffa2 	bl	8001c58 <SysTick_Config>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e159      	b.n	8001ff0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	f040 8148 	bne.w	8001fea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d005      	beq.n	8001d72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d130      	bne.n	8001dd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da8:	2201      	movs	r2, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 0201 	and.w	r2, r3, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d017      	beq.n	8001e10 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d123      	bne.n	8001e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	08da      	lsrs	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3208      	adds	r2, #8
 8001e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	08da      	lsrs	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	69b9      	ldr	r1, [r7, #24]
 8001e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0203 	and.w	r2, r3, #3
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80a2 	beq.w	8001fea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b57      	ldr	r3, [pc, #348]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a56      	ldr	r2, [pc, #344]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b54      	ldr	r3, [pc, #336]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec2:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_GPIO_Init+0x2ec>)
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	220f      	movs	r2, #15
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a49      	ldr	r2, [pc, #292]	; (8002010 <HAL_GPIO_Init+0x2f0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d019      	beq.n	8001f22 <HAL_GPIO_Init+0x202>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a48      	ldr	r2, [pc, #288]	; (8002014 <HAL_GPIO_Init+0x2f4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_GPIO_Init+0x1fe>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a47      	ldr	r2, [pc, #284]	; (8002018 <HAL_GPIO_Init+0x2f8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00d      	beq.n	8001f1a <HAL_GPIO_Init+0x1fa>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a46      	ldr	r2, [pc, #280]	; (800201c <HAL_GPIO_Init+0x2fc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d007      	beq.n	8001f16 <HAL_GPIO_Init+0x1f6>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a45      	ldr	r2, [pc, #276]	; (8002020 <HAL_GPIO_Init+0x300>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_GPIO_Init+0x1f2>
 8001f0e:	2304      	movs	r3, #4
 8001f10:	e008      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f12:	2307      	movs	r3, #7
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e004      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f22:	2300      	movs	r3, #0
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	f002 0203 	and.w	r2, r2, #3
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f34:	4935      	ldr	r1, [pc, #212]	; (800200c <HAL_GPIO_Init+0x2ec>)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f42:	4b38      	ldr	r3, [pc, #224]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f66:	4a2f      	ldr	r2, [pc, #188]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f90:	4a24      	ldr	r2, [pc, #144]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fba:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	f67f aea2 	bls.w	8001d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40013800 	.word	0x40013800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40013c00 	.word	0x40013c00

08002028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e001      	b.n	800204a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]
 8002064:	4613      	mov	r3, r2
 8002066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002068:	787b      	ldrb	r3, [r7, #1]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206e:	887a      	ldrh	r2, [r7, #2]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002074:	e003      	b.n	800207e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	041a      	lsls	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	619a      	str	r2, [r3, #24]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e264      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d075      	beq.n	8002196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020aa:	4ba3      	ldr	r3, [pc, #652]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d00c      	beq.n	80020d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b6:	4ba0      	ldr	r3, [pc, #640]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d112      	bne.n	80020e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c2:	4b9d      	ldr	r3, [pc, #628]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ce:	d10b      	bne.n	80020e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d0:	4b99      	ldr	r3, [pc, #612]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d05b      	beq.n	8002194 <HAL_RCC_OscConfig+0x108>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d157      	bne.n	8002194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e23f      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f0:	d106      	bne.n	8002100 <HAL_RCC_OscConfig+0x74>
 80020f2:	4b91      	ldr	r3, [pc, #580]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a90      	ldr	r2, [pc, #576]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e01d      	b.n	800213c <HAL_RCC_OscConfig+0xb0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0x98>
 800210a:	4b8b      	ldr	r3, [pc, #556]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a8a      	ldr	r2, [pc, #552]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b88      	ldr	r3, [pc, #544]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a87      	ldr	r2, [pc, #540]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e00b      	b.n	800213c <HAL_RCC_OscConfig+0xb0>
 8002124:	4b84      	ldr	r3, [pc, #528]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a83      	ldr	r2, [pc, #524]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 800212a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b81      	ldr	r3, [pc, #516]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a80      	ldr	r2, [pc, #512]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff fcaa 	bl	8001a9c <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800214c:	f7ff fca6 	bl	8001a9c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e204      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b76      	ldr	r3, [pc, #472]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0xc0>
 800216a:	e014      	b.n	8002196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff fc96 	bl	8001a9c <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff fc92 	bl	8001a9c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1f0      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	4b6c      	ldr	r3, [pc, #432]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0xe8>
 8002192:	e000      	b.n	8002196 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d063      	beq.n	800226a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021a2:	4b65      	ldr	r3, [pc, #404]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ae:	4b62      	ldr	r3, [pc, #392]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d11c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ba:	4b5f      	ldr	r3, [pc, #380]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d116      	bne.n	80021f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	4b5c      	ldr	r3, [pc, #368]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_RCC_OscConfig+0x152>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e1c4      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021de:	4b56      	ldr	r3, [pc, #344]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4952      	ldr	r1, [pc, #328]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	e03a      	b.n	800226a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fc:	4b4f      	ldr	r3, [pc, #316]	; (800233c <HAL_RCC_OscConfig+0x2b0>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7ff fc4b 	bl	8001a9c <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220a:	f7ff fc47 	bl	8001a9c <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e1a5      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	4b46      	ldr	r3, [pc, #280]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	4b43      	ldr	r3, [pc, #268]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4940      	ldr	r1, [pc, #256]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
 800223c:	e015      	b.n	800226a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223e:	4b3f      	ldr	r3, [pc, #252]	; (800233c <HAL_RCC_OscConfig+0x2b0>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7ff fc2a 	bl	8001a9c <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800224c:	f7ff fc26 	bl	8001a9c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e184      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d030      	beq.n	80022d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d016      	beq.n	80022ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227e:	4b30      	ldr	r3, [pc, #192]	; (8002340 <HAL_RCC_OscConfig+0x2b4>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7ff fc0a 	bl	8001a9c <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228c:	f7ff fc06 	bl	8001a9c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e164      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	4b26      	ldr	r3, [pc, #152]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x200>
 80022aa:	e015      	b.n	80022d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ac:	4b24      	ldr	r3, [pc, #144]	; (8002340 <HAL_RCC_OscConfig+0x2b4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b2:	f7ff fbf3 	bl	8001a9c <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ba:	f7ff fbef 	bl	8001a9c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e14d      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80022ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f0      	bne.n	80022ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80a0 	beq.w	8002426 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10f      	bne.n	8002316 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a0e      	ldr	r2, [pc, #56]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002312:	2301      	movs	r3, #1
 8002314:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_OscConfig+0x2b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d121      	bne.n	8002366 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_RCC_OscConfig+0x2b8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_RCC_OscConfig+0x2b8>)
 8002328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232e:	f7ff fbb5 	bl	8001a9c <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	e011      	b.n	800235a <HAL_RCC_OscConfig+0x2ce>
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	42470000 	.word	0x42470000
 8002340:	42470e80 	.word	0x42470e80
 8002344:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002348:	f7ff fba8 	bl	8001a9c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e106      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235a:	4b85      	ldr	r3, [pc, #532]	; (8002570 <HAL_RCC_OscConfig+0x4e4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d106      	bne.n	800237c <HAL_RCC_OscConfig+0x2f0>
 800236e:	4b81      	ldr	r3, [pc, #516]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002372:	4a80      	ldr	r2, [pc, #512]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6713      	str	r3, [r2, #112]	; 0x70
 800237a:	e01c      	b.n	80023b6 <HAL_RCC_OscConfig+0x32a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b05      	cmp	r3, #5
 8002382:	d10c      	bne.n	800239e <HAL_RCC_OscConfig+0x312>
 8002384:	4b7b      	ldr	r3, [pc, #492]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	4a7a      	ldr	r2, [pc, #488]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 800238a:	f043 0304 	orr.w	r3, r3, #4
 800238e:	6713      	str	r3, [r2, #112]	; 0x70
 8002390:	4b78      	ldr	r3, [pc, #480]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	4a77      	ldr	r2, [pc, #476]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6713      	str	r3, [r2, #112]	; 0x70
 800239c:	e00b      	b.n	80023b6 <HAL_RCC_OscConfig+0x32a>
 800239e:	4b75      	ldr	r3, [pc, #468]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	4a74      	ldr	r2, [pc, #464]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	6713      	str	r3, [r2, #112]	; 0x70
 80023aa:	4b72      	ldr	r3, [pc, #456]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	4a71      	ldr	r2, [pc, #452]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 80023b0:	f023 0304 	bic.w	r3, r3, #4
 80023b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d015      	beq.n	80023ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023be:	f7ff fb6d 	bl	8001a9c <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c4:	e00a      	b.n	80023dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c6:	f7ff fb69 	bl	8001a9c <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e0c5      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023dc:	4b65      	ldr	r3, [pc, #404]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ee      	beq.n	80023c6 <HAL_RCC_OscConfig+0x33a>
 80023e8:	e014      	b.n	8002414 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ea:	f7ff fb57 	bl	8001a9c <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7ff fb53 	bl	8001a9c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e0af      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002408:	4b5a      	ldr	r3, [pc, #360]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1ee      	bne.n	80023f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002414:	7dfb      	ldrb	r3, [r7, #23]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d105      	bne.n	8002426 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241a:	4b56      	ldr	r3, [pc, #344]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a55      	ldr	r2, [pc, #340]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 8002420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 809b 	beq.w	8002566 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002430:	4b50      	ldr	r3, [pc, #320]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b08      	cmp	r3, #8
 800243a:	d05c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d141      	bne.n	80024c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002444:	4b4c      	ldr	r3, [pc, #304]	; (8002578 <HAL_RCC_OscConfig+0x4ec>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7ff fb27 	bl	8001a9c <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002452:	f7ff fb23 	bl	8001a9c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e081      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002464:	4b43      	ldr	r3, [pc, #268]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	019b      	lsls	r3, r3, #6
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	085b      	lsrs	r3, r3, #1
 8002488:	3b01      	subs	r3, #1
 800248a:	041b      	lsls	r3, r3, #16
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	061b      	lsls	r3, r3, #24
 8002494:	4937      	ldr	r1, [pc, #220]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800249a:	4b37      	ldr	r3, [pc, #220]	; (8002578 <HAL_RCC_OscConfig+0x4ec>)
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7ff fafc 	bl	8001a9c <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a8:	f7ff faf8 	bl	8001a9c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e056      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ba:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x41c>
 80024c6:	e04e      	b.n	8002566 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c8:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <HAL_RCC_OscConfig+0x4ec>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7ff fae5 	bl	8001a9c <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d6:	f7ff fae1 	bl	8001a9c <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e03f      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e8:	4b22      	ldr	r3, [pc, #136]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f0      	bne.n	80024d6 <HAL_RCC_OscConfig+0x44a>
 80024f4:	e037      	b.n	8002566 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e032      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002502:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <HAL_RCC_OscConfig+0x4e8>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d028      	beq.n	8002562 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800251a:	429a      	cmp	r2, r3
 800251c:	d121      	bne.n	8002562 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002528:	429a      	cmp	r2, r3
 800252a:	d11a      	bne.n	8002562 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002532:	4013      	ands	r3, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002538:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800253a:	4293      	cmp	r3, r2
 800253c:	d111      	bne.n	8002562 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	085b      	lsrs	r3, r3, #1
 800254a:	3b01      	subs	r3, #1
 800254c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d107      	bne.n	8002562 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40007000 	.word	0x40007000
 8002574:	40023800 	.word	0x40023800
 8002578:	42470060 	.word	0x42470060

0800257c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0cc      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002590:	4b68      	ldr	r3, [pc, #416]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d90c      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0b8      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d0:	4b59      	ldr	r3, [pc, #356]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a58      	ldr	r2, [pc, #352]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f4:	4b50      	ldr	r3, [pc, #320]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	494d      	ldr	r1, [pc, #308]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d044      	beq.n	800269c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d119      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e07f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d003      	beq.n	800263a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002636:	2b03      	cmp	r3, #3
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	4b3f      	ldr	r3, [pc, #252]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264a:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e067      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265a:	4b37      	ldr	r3, [pc, #220]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f023 0203 	bic.w	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4934      	ldr	r1, [pc, #208]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800266c:	f7ff fa16 	bl	8001a9c <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	e00a      	b.n	800268a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002674:	f7ff fa12 	bl	8001a9c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e04f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 020c 	and.w	r2, r3, #12
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	429a      	cmp	r2, r3
 800269a:	d1eb      	bne.n	8002674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d20c      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b22      	ldr	r3, [pc, #136]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e032      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4916      	ldr	r1, [pc, #88]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	490e      	ldr	r1, [pc, #56]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002702:	f000 f821 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8002706:	4602      	mov	r2, r0
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	490a      	ldr	r1, [pc, #40]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	5ccb      	ldrb	r3, [r1, r3]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff f976 	bl	8001a14 <HAL_InitTick>

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023c00 	.word	0x40023c00
 8002738:	40023800 	.word	0x40023800
 800273c:	080086f8 	.word	0x080086f8
 8002740:	20000000 	.word	0x20000000
 8002744:	20000004 	.word	0x20000004

08002748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	2300      	movs	r3, #0
 800275a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002760:	4b67      	ldr	r3, [pc, #412]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b08      	cmp	r3, #8
 800276a:	d00d      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x40>
 800276c:	2b08      	cmp	r3, #8
 800276e:	f200 80bd 	bhi.w	80028ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x34>
 8002776:	2b04      	cmp	r3, #4
 8002778:	d003      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x3a>
 800277a:	e0b7      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800277c:	4b61      	ldr	r3, [pc, #388]	; (8002904 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800277e:	60bb      	str	r3, [r7, #8]
       break;
 8002780:	e0b7      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002782:	4b61      	ldr	r3, [pc, #388]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002784:	60bb      	str	r3, [r7, #8]
      break;
 8002786:	e0b4      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002788:	4b5d      	ldr	r3, [pc, #372]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002790:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002792:	4b5b      	ldr	r3, [pc, #364]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d04d      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279e:	4b58      	ldr	r3, [pc, #352]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	099b      	lsrs	r3, r3, #6
 80027a4:	461a      	mov	r2, r3
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027ae:	f04f 0100 	mov.w	r1, #0
 80027b2:	ea02 0800 	and.w	r8, r2, r0
 80027b6:	ea03 0901 	and.w	r9, r3, r1
 80027ba:	4640      	mov	r0, r8
 80027bc:	4649      	mov	r1, r9
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	014b      	lsls	r3, r1, #5
 80027c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027cc:	0142      	lsls	r2, r0, #5
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	ebb0 0008 	subs.w	r0, r0, r8
 80027d6:	eb61 0109 	sbc.w	r1, r1, r9
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	018b      	lsls	r3, r1, #6
 80027e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027e8:	0182      	lsls	r2, r0, #6
 80027ea:	1a12      	subs	r2, r2, r0
 80027ec:	eb63 0301 	sbc.w	r3, r3, r1
 80027f0:	f04f 0000 	mov.w	r0, #0
 80027f4:	f04f 0100 	mov.w	r1, #0
 80027f8:	00d9      	lsls	r1, r3, #3
 80027fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027fe:	00d0      	lsls	r0, r2, #3
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	eb12 0208 	adds.w	r2, r2, r8
 8002808:	eb43 0309 	adc.w	r3, r3, r9
 800280c:	f04f 0000 	mov.w	r0, #0
 8002810:	f04f 0100 	mov.w	r1, #0
 8002814:	0259      	lsls	r1, r3, #9
 8002816:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800281a:	0250      	lsls	r0, r2, #9
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	461a      	mov	r2, r3
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	f7fe fa34 	bl	8000c98 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4613      	mov	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e04a      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283a:	4b31      	ldr	r3, [pc, #196]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	099b      	lsrs	r3, r3, #6
 8002840:	461a      	mov	r2, r3
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	f240 10ff 	movw	r0, #511	; 0x1ff
 800284a:	f04f 0100 	mov.w	r1, #0
 800284e:	ea02 0400 	and.w	r4, r2, r0
 8002852:	ea03 0501 	and.w	r5, r3, r1
 8002856:	4620      	mov	r0, r4
 8002858:	4629      	mov	r1, r5
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	014b      	lsls	r3, r1, #5
 8002864:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002868:	0142      	lsls	r2, r0, #5
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	1b00      	subs	r0, r0, r4
 8002870:	eb61 0105 	sbc.w	r1, r1, r5
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	018b      	lsls	r3, r1, #6
 800287e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002882:	0182      	lsls	r2, r0, #6
 8002884:	1a12      	subs	r2, r2, r0
 8002886:	eb63 0301 	sbc.w	r3, r3, r1
 800288a:	f04f 0000 	mov.w	r0, #0
 800288e:	f04f 0100 	mov.w	r1, #0
 8002892:	00d9      	lsls	r1, r3, #3
 8002894:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002898:	00d0      	lsls	r0, r2, #3
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	1912      	adds	r2, r2, r4
 80028a0:	eb45 0303 	adc.w	r3, r5, r3
 80028a4:	f04f 0000 	mov.w	r0, #0
 80028a8:	f04f 0100 	mov.w	r1, #0
 80028ac:	0299      	lsls	r1, r3, #10
 80028ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028b2:	0290      	lsls	r0, r2, #10
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	461a      	mov	r2, r3
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	f7fe f9e8 	bl	8000c98 <__aeabi_uldivmod>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4613      	mov	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	3301      	adds	r3, #1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	60bb      	str	r3, [r7, #8]
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028ee:	60bb      	str	r3, [r7, #8]
      break;
 80028f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f2:	68bb      	ldr	r3, [r7, #8]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	00f42400 	.word	0x00f42400
 8002908:	007a1200 	.word	0x007a1200

0800290c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <HAL_RCC_GetHCLKFreq+0x14>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20000000 	.word	0x20000000

08002924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002928:	f7ff fff0 	bl	800290c <HAL_RCC_GetHCLKFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	0a9b      	lsrs	r3, r3, #10
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4903      	ldr	r1, [pc, #12]	; (8002948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800
 8002948:	08008708 	.word	0x08008708

0800294c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002950:	f7ff ffdc 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	0b5b      	lsrs	r3, r3, #13
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4903      	ldr	r1, [pc, #12]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002962:	5ccb      	ldrb	r3, [r1, r3]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	08008708 	.word	0x08008708

08002974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e041      	b.n	8002a0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe fe22 	bl	80015e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3304      	adds	r3, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f000 fbf2 	bl	800319c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e041      	b.n	8002aa8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d106      	bne.n	8002a3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f839 	bl	8002ab0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	f000 fba3 	bl	800319c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d109      	bne.n	8002ae8 <HAL_TIM_PWM_Start+0x24>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	bf14      	ite	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	2300      	moveq	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	e022      	b.n	8002b2e <HAL_TIM_PWM_Start+0x6a>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d109      	bne.n	8002b02 <HAL_TIM_PWM_Start+0x3e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	bf14      	ite	ne
 8002afa:	2301      	movne	r3, #1
 8002afc:	2300      	moveq	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	e015      	b.n	8002b2e <HAL_TIM_PWM_Start+0x6a>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d109      	bne.n	8002b1c <HAL_TIM_PWM_Start+0x58>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	bf14      	ite	ne
 8002b14:	2301      	movne	r3, #1
 8002b16:	2300      	moveq	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	e008      	b.n	8002b2e <HAL_TIM_PWM_Start+0x6a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e068      	b.n	8002c08 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d104      	bne.n	8002b46 <HAL_TIM_PWM_Start+0x82>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b44:	e013      	b.n	8002b6e <HAL_TIM_PWM_Start+0xaa>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d104      	bne.n	8002b56 <HAL_TIM_PWM_Start+0x92>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b54:	e00b      	b.n	8002b6e <HAL_TIM_PWM_Start+0xaa>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d104      	bne.n	8002b66 <HAL_TIM_PWM_Start+0xa2>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b64:	e003      	b.n	8002b6e <HAL_TIM_PWM_Start+0xaa>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2201      	movs	r2, #1
 8002b74:	6839      	ldr	r1, [r7, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fdb6 	bl	80036e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a23      	ldr	r2, [pc, #140]	; (8002c10 <HAL_TIM_PWM_Start+0x14c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d107      	bne.n	8002b96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_TIM_PWM_Start+0x14c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d018      	beq.n	8002bd2 <HAL_TIM_PWM_Start+0x10e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba8:	d013      	beq.n	8002bd2 <HAL_TIM_PWM_Start+0x10e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a19      	ldr	r2, [pc, #100]	; (8002c14 <HAL_TIM_PWM_Start+0x150>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00e      	beq.n	8002bd2 <HAL_TIM_PWM_Start+0x10e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <HAL_TIM_PWM_Start+0x154>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d009      	beq.n	8002bd2 <HAL_TIM_PWM_Start+0x10e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <HAL_TIM_PWM_Start+0x158>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d004      	beq.n	8002bd2 <HAL_TIM_PWM_Start+0x10e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <HAL_TIM_PWM_Start+0x15c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d111      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b06      	cmp	r3, #6
 8002be2:	d010      	beq.n	8002c06 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf4:	e007      	b.n	8002c06 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40010000 	.word	0x40010000
 8002c14:	40000400 	.word	0x40000400
 8002c18:	40000800 	.word	0x40000800
 8002c1c:	40000c00 	.word	0x40000c00
 8002c20:	40014000 	.word	0x40014000

08002c24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d122      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d11b      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0202 	mvn.w	r2, #2
 8002c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fa7a 	bl	8003160 <HAL_TIM_IC_CaptureCallback>
 8002c6c:	e005      	b.n	8002c7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fa6c 	bl	800314c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fa7d 	bl	8003174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d122      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d11b      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0204 	mvn.w	r2, #4
 8002ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fa50 	bl	8003160 <HAL_TIM_IC_CaptureCallback>
 8002cc0:	e005      	b.n	8002cce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fa42 	bl	800314c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 fa53 	bl	8003174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d122      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d11b      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0208 	mvn.w	r2, #8
 8002cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fa26 	bl	8003160 <HAL_TIM_IC_CaptureCallback>
 8002d14:	e005      	b.n	8002d22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fa18 	bl	800314c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fa29 	bl	8003174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b10      	cmp	r3, #16
 8002d34:	d122      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	d11b      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0210 	mvn.w	r2, #16
 8002d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2208      	movs	r2, #8
 8002d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f9fc 	bl	8003160 <HAL_TIM_IC_CaptureCallback>
 8002d68:	e005      	b.n	8002d76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f9ee 	bl	800314c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f9ff 	bl	8003174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d10e      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d107      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0201 	mvn.w	r2, #1
 8002da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f9c8 	bl	8003138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b80      	cmp	r3, #128	; 0x80
 8002db4:	d10e      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc0:	2b80      	cmp	r3, #128	; 0x80
 8002dc2:	d107      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fd28 	bl	8003824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b40      	cmp	r3, #64	; 0x40
 8002de0:	d10e      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d107      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f9c4 	bl	8003188 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d10e      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d107      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0220 	mvn.w	r2, #32
 8002e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fcf2 	bl	8003810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e0ac      	b.n	8002fa8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b0c      	cmp	r3, #12
 8002e5a:	f200 809f 	bhi.w	8002f9c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e5e:	a201      	add	r2, pc, #4	; (adr r2, 8002e64 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e64:	08002e99 	.word	0x08002e99
 8002e68:	08002f9d 	.word	0x08002f9d
 8002e6c:	08002f9d 	.word	0x08002f9d
 8002e70:	08002f9d 	.word	0x08002f9d
 8002e74:	08002ed9 	.word	0x08002ed9
 8002e78:	08002f9d 	.word	0x08002f9d
 8002e7c:	08002f9d 	.word	0x08002f9d
 8002e80:	08002f9d 	.word	0x08002f9d
 8002e84:	08002f1b 	.word	0x08002f1b
 8002e88:	08002f9d 	.word	0x08002f9d
 8002e8c:	08002f9d 	.word	0x08002f9d
 8002e90:	08002f9d 	.word	0x08002f9d
 8002e94:	08002f5b 	.word	0x08002f5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f9fc 	bl	800329c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0208 	orr.w	r2, r2, #8
 8002eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0204 	bic.w	r2, r2, #4
 8002ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6999      	ldr	r1, [r3, #24]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	619a      	str	r2, [r3, #24]
      break;
 8002ed6:	e062      	b.n	8002f9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fa42 	bl	8003368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6999      	ldr	r1, [r3, #24]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	021a      	lsls	r2, r3, #8
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	619a      	str	r2, [r3, #24]
      break;
 8002f18:	e041      	b.n	8002f9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fa8d 	bl	8003440 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0208 	orr.w	r2, r2, #8
 8002f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0204 	bic.w	r2, r2, #4
 8002f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69d9      	ldr	r1, [r3, #28]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	61da      	str	r2, [r3, #28]
      break;
 8002f58:	e021      	b.n	8002f9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fad7 	bl	8003514 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69d9      	ldr	r1, [r3, #28]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	021a      	lsls	r2, r3, #8
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	61da      	str	r2, [r3, #28]
      break;
 8002f9a:	e000      	b.n	8002f9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_TIM_ConfigClockSource+0x18>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e0b3      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x180>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fe6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003000:	d03e      	beq.n	8003080 <HAL_TIM_ConfigClockSource+0xd0>
 8003002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003006:	f200 8087 	bhi.w	8003118 <HAL_TIM_ConfigClockSource+0x168>
 800300a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300e:	f000 8085 	beq.w	800311c <HAL_TIM_ConfigClockSource+0x16c>
 8003012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003016:	d87f      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x168>
 8003018:	2b70      	cmp	r3, #112	; 0x70
 800301a:	d01a      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0xa2>
 800301c:	2b70      	cmp	r3, #112	; 0x70
 800301e:	d87b      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x168>
 8003020:	2b60      	cmp	r3, #96	; 0x60
 8003022:	d050      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x116>
 8003024:	2b60      	cmp	r3, #96	; 0x60
 8003026:	d877      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x168>
 8003028:	2b50      	cmp	r3, #80	; 0x50
 800302a:	d03c      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0xf6>
 800302c:	2b50      	cmp	r3, #80	; 0x50
 800302e:	d873      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x168>
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d058      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x136>
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d86f      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x168>
 8003038:	2b30      	cmp	r3, #48	; 0x30
 800303a:	d064      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x156>
 800303c:	2b30      	cmp	r3, #48	; 0x30
 800303e:	d86b      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x168>
 8003040:	2b20      	cmp	r3, #32
 8003042:	d060      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x156>
 8003044:	2b20      	cmp	r3, #32
 8003046:	d867      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x168>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d05c      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x156>
 800304c:	2b10      	cmp	r3, #16
 800304e:	d05a      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003050:	e062      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f000 fb21 	bl	80036a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003074:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	609a      	str	r2, [r3, #8]
      break;
 800307e:	e04e      	b.n	800311e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f000 fb0a 	bl	80036a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a2:	609a      	str	r2, [r3, #8]
      break;
 80030a4:	e03b      	b.n	800311e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	461a      	mov	r2, r3
 80030b4:	f000 fa7e 	bl	80035b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2150      	movs	r1, #80	; 0x50
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fad7 	bl	8003672 <TIM_ITRx_SetConfig>
      break;
 80030c4:	e02b      	b.n	800311e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6859      	ldr	r1, [r3, #4]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	461a      	mov	r2, r3
 80030d4:	f000 fa9d 	bl	8003612 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2160      	movs	r1, #96	; 0x60
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fac7 	bl	8003672 <TIM_ITRx_SetConfig>
      break;
 80030e4:	e01b      	b.n	800311e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6859      	ldr	r1, [r3, #4]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	461a      	mov	r2, r3
 80030f4:	f000 fa5e 	bl	80035b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2140      	movs	r1, #64	; 0x40
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fab7 	bl	8003672 <TIM_ITRx_SetConfig>
      break;
 8003104:	e00b      	b.n	800311e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f000 faae 	bl	8003672 <TIM_ITRx_SetConfig>
        break;
 8003116:	e002      	b.n	800311e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003118:	bf00      	nop
 800311a:	e000      	b.n	800311e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800311c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a34      	ldr	r2, [pc, #208]	; (8003280 <TIM_Base_SetConfig+0xe4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00f      	beq.n	80031d4 <TIM_Base_SetConfig+0x38>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ba:	d00b      	beq.n	80031d4 <TIM_Base_SetConfig+0x38>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a31      	ldr	r2, [pc, #196]	; (8003284 <TIM_Base_SetConfig+0xe8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d007      	beq.n	80031d4 <TIM_Base_SetConfig+0x38>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a30      	ldr	r2, [pc, #192]	; (8003288 <TIM_Base_SetConfig+0xec>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_Base_SetConfig+0x38>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a2f      	ldr	r2, [pc, #188]	; (800328c <TIM_Base_SetConfig+0xf0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d108      	bne.n	80031e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a25      	ldr	r2, [pc, #148]	; (8003280 <TIM_Base_SetConfig+0xe4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01b      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f4:	d017      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a22      	ldr	r2, [pc, #136]	; (8003284 <TIM_Base_SetConfig+0xe8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a21      	ldr	r2, [pc, #132]	; (8003288 <TIM_Base_SetConfig+0xec>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00f      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a20      	ldr	r2, [pc, #128]	; (800328c <TIM_Base_SetConfig+0xf0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00b      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1f      	ldr	r2, [pc, #124]	; (8003290 <TIM_Base_SetConfig+0xf4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1e      	ldr	r2, [pc, #120]	; (8003294 <TIM_Base_SetConfig+0xf8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <TIM_Base_SetConfig+0xfc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d108      	bne.n	8003238 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a08      	ldr	r2, [pc, #32]	; (8003280 <TIM_Base_SetConfig+0xe4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d103      	bne.n	800326c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	615a      	str	r2, [r3, #20]
}
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40010000 	.word	0x40010000
 8003284:	40000400 	.word	0x40000400
 8003288:	40000800 	.word	0x40000800
 800328c:	40000c00 	.word	0x40000c00
 8003290:	40014000 	.word	0x40014000
 8003294:	40014400 	.word	0x40014400
 8003298:	40014800 	.word	0x40014800

0800329c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	f023 0201 	bic.w	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0303 	bic.w	r3, r3, #3
 80032d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f023 0302 	bic.w	r3, r3, #2
 80032e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <TIM_OC1_SetConfig+0xc8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10c      	bne.n	8003312 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f023 0308 	bic.w	r3, r3, #8
 80032fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f023 0304 	bic.w	r3, r3, #4
 8003310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a13      	ldr	r2, [pc, #76]	; (8003364 <TIM_OC1_SetConfig+0xc8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d111      	bne.n	800333e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	621a      	str	r2, [r3, #32]
}
 8003358:	bf00      	nop
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	40010000 	.word	0x40010000

08003368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f023 0210 	bic.w	r2, r3, #16
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f023 0320 	bic.w	r3, r3, #32
 80033b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a1e      	ldr	r2, [pc, #120]	; (800343c <TIM_OC2_SetConfig+0xd4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d10d      	bne.n	80033e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a15      	ldr	r2, [pc, #84]	; (800343c <TIM_OC2_SetConfig+0xd4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d113      	bne.n	8003414 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	621a      	str	r2, [r3, #32]
}
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40010000 	.word	0x40010000

08003440 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 0303 	bic.w	r3, r3, #3
 8003476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <TIM_OC3_SetConfig+0xd0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d10d      	bne.n	80034ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a14      	ldr	r2, [pc, #80]	; (8003510 <TIM_OC3_SetConfig+0xd0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d113      	bne.n	80034ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	621a      	str	r2, [r3, #32]
}
 8003504:	bf00      	nop
 8003506:	371c      	adds	r7, #28
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	40010000 	.word	0x40010000

08003514 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800355e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	031b      	lsls	r3, r3, #12
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a10      	ldr	r2, [pc, #64]	; (80035b0 <TIM_OC4_SetConfig+0x9c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d109      	bne.n	8003588 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800357a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	019b      	lsls	r3, r3, #6
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40010000 	.word	0x40010000

080035b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f023 0201 	bic.w	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f023 030a 	bic.w	r3, r3, #10
 80035f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003612:	b480      	push	{r7}
 8003614:	b087      	sub	sp, #28
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	f023 0210 	bic.w	r2, r3, #16
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800363c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	031b      	lsls	r3, r3, #12
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800364e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	621a      	str	r2, [r3, #32]
}
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003672:	b480      	push	{r7}
 8003674:	b085      	sub	sp, #20
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	f043 0307 	orr.w	r3, r3, #7
 8003694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	609a      	str	r2, [r3, #8]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	021a      	lsls	r2, r3, #8
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	2201      	movs	r2, #1
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a1a      	ldr	r2, [r3, #32]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	43db      	mvns	r3, r3
 800370a:	401a      	ands	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1a      	ldr	r2, [r3, #32]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	fa01 f303 	lsl.w	r3, r1, r3
 8003720:	431a      	orrs	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	621a      	str	r2, [r3, #32]
}
 8003726:	bf00      	nop
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003748:	2302      	movs	r3, #2
 800374a:	e050      	b.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003772:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d018      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003798:	d013      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a18      	ldr	r2, [pc, #96]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00e      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a16      	ldr	r2, [pc, #88]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d009      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a15      	ldr	r2, [pc, #84]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a13      	ldr	r2, [pc, #76]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d10c      	bne.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40010000 	.word	0x40010000
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800
 8003808:	40000c00 	.word	0x40000c00
 800380c:	40014000 	.word	0x40014000

08003810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e03f      	b.n	80038ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd ff38 	bl	80016d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2224      	movs	r2, #36	; 0x24
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800387a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f905 	bl	8003a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b08a      	sub	sp, #40	; 0x28
 80038d6:	af02      	add	r7, sp, #8
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	4613      	mov	r3, r2
 80038e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d17c      	bne.n	80039ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_UART_Transmit+0x2c>
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e075      	b.n	80039ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_UART_Transmit+0x3e>
 800390c:	2302      	movs	r3, #2
 800390e:	e06e      	b.n	80039ee <HAL_UART_Transmit+0x11c>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2221      	movs	r2, #33	; 0x21
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003926:	f7fe f8b9 	bl	8001a9c <HAL_GetTick>
 800392a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	88fa      	ldrh	r2, [r7, #6]
 8003936:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003940:	d108      	bne.n	8003954 <HAL_UART_Transmit+0x82>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d104      	bne.n	8003954 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	e003      	b.n	800395c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003958:	2300      	movs	r3, #0
 800395a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003964:	e02a      	b.n	80039bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f840 	bl	80039f6 <UART_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e036      	b.n	80039ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10b      	bne.n	800399e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003994:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	3302      	adds	r3, #2
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	e007      	b.n	80039ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	3301      	adds	r3, #1
 80039ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1cf      	bne.n	8003966 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2200      	movs	r2, #0
 80039ce:	2140      	movs	r1, #64	; 0x40
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f810 	bl	80039f6 <UART_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e006      	b.n	80039ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e000      	b.n	80039ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039ec:	2302      	movs	r3, #2
  }
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3720      	adds	r7, #32
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	4613      	mov	r3, r2
 8003a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a06:	e02c      	b.n	8003a62 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d028      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a16:	f7fe f841 	bl	8001a9c <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d21d      	bcs.n	8003a62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a34:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0201 	bic.w	r2, r2, #1
 8003a44:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e00f      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	bf0c      	ite	eq
 8003a72:	2301      	moveq	r3, #1
 8003a74:	2300      	movne	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d0c3      	beq.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a90:	b09f      	sub	sp, #124	; 0x7c
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa2:	68d9      	ldr	r1, [r3, #12]
 8003aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	ea40 0301 	orr.w	r3, r0, r1
 8003aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ad0:	f021 010c 	bic.w	r1, r1, #12
 8003ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ada:	430b      	orrs	r3, r1
 8003adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aea:	6999      	ldr	r1, [r3, #24]
 8003aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	ea40 0301 	orr.w	r3, r0, r1
 8003af4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4bc5      	ldr	r3, [pc, #788]	; (8003e10 <UART_SetConfig+0x384>)
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d004      	beq.n	8003b0a <UART_SetConfig+0x7e>
 8003b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4bc3      	ldr	r3, [pc, #780]	; (8003e14 <UART_SetConfig+0x388>)
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d103      	bne.n	8003b12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b0a:	f7fe ff1f 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8003b0e:	6778      	str	r0, [r7, #116]	; 0x74
 8003b10:	e002      	b.n	8003b18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b12:	f7fe ff07 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8003b16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b20:	f040 80b6 	bne.w	8003c90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b26:	461c      	mov	r4, r3
 8003b28:	f04f 0500 	mov.w	r5, #0
 8003b2c:	4622      	mov	r2, r4
 8003b2e:	462b      	mov	r3, r5
 8003b30:	1891      	adds	r1, r2, r2
 8003b32:	6439      	str	r1, [r7, #64]	; 0x40
 8003b34:	415b      	adcs	r3, r3
 8003b36:	647b      	str	r3, [r7, #68]	; 0x44
 8003b38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b3c:	1912      	adds	r2, r2, r4
 8003b3e:	eb45 0303 	adc.w	r3, r5, r3
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	00d9      	lsls	r1, r3, #3
 8003b4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b50:	00d0      	lsls	r0, r2, #3
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	1911      	adds	r1, r2, r4
 8003b58:	6639      	str	r1, [r7, #96]	; 0x60
 8003b5a:	416b      	adcs	r3, r5
 8003b5c:	667b      	str	r3, [r7, #100]	; 0x64
 8003b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	1891      	adds	r1, r2, r2
 8003b6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b6c:	415b      	adcs	r3, r3
 8003b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b78:	f7fd f88e 	bl	8000c98 <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4ba5      	ldr	r3, [pc, #660]	; (8003e18 <UART_SetConfig+0x38c>)
 8003b82:	fba3 2302 	umull	r2, r3, r3, r2
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	011e      	lsls	r6, r3, #4
 8003b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8c:	461c      	mov	r4, r3
 8003b8e:	f04f 0500 	mov.w	r5, #0
 8003b92:	4622      	mov	r2, r4
 8003b94:	462b      	mov	r3, r5
 8003b96:	1891      	adds	r1, r2, r2
 8003b98:	6339      	str	r1, [r7, #48]	; 0x30
 8003b9a:	415b      	adcs	r3, r3
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ba2:	1912      	adds	r2, r2, r4
 8003ba4:	eb45 0303 	adc.w	r3, r5, r3
 8003ba8:	f04f 0000 	mov.w	r0, #0
 8003bac:	f04f 0100 	mov.w	r1, #0
 8003bb0:	00d9      	lsls	r1, r3, #3
 8003bb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bb6:	00d0      	lsls	r0, r2, #3
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	1911      	adds	r1, r2, r4
 8003bbe:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bc0:	416b      	adcs	r3, r5
 8003bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	1891      	adds	r1, r2, r2
 8003bd0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003bde:	f7fd f85b 	bl	8000c98 <__aeabi_uldivmod>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4b8c      	ldr	r3, [pc, #560]	; (8003e18 <UART_SetConfig+0x38c>)
 8003be8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	2164      	movs	r1, #100	; 0x64
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	3332      	adds	r3, #50	; 0x32
 8003bfa:	4a87      	ldr	r2, [pc, #540]	; (8003e18 <UART_SetConfig+0x38c>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c08:	441e      	add	r6, r3
 8003c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f04f 0100 	mov.w	r1, #0
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	1894      	adds	r4, r2, r2
 8003c18:	623c      	str	r4, [r7, #32]
 8003c1a:	415b      	adcs	r3, r3
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c22:	1812      	adds	r2, r2, r0
 8003c24:	eb41 0303 	adc.w	r3, r1, r3
 8003c28:	f04f 0400 	mov.w	r4, #0
 8003c2c:	f04f 0500 	mov.w	r5, #0
 8003c30:	00dd      	lsls	r5, r3, #3
 8003c32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c36:	00d4      	lsls	r4, r2, #3
 8003c38:	4622      	mov	r2, r4
 8003c3a:	462b      	mov	r3, r5
 8003c3c:	1814      	adds	r4, r2, r0
 8003c3e:	653c      	str	r4, [r7, #80]	; 0x50
 8003c40:	414b      	adcs	r3, r1
 8003c42:	657b      	str	r3, [r7, #84]	; 0x54
 8003c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	1891      	adds	r1, r2, r2
 8003c50:	61b9      	str	r1, [r7, #24]
 8003c52:	415b      	adcs	r3, r3
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c5e:	f7fd f81b 	bl	8000c98 <__aeabi_uldivmod>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4b6c      	ldr	r3, [pc, #432]	; (8003e18 <UART_SetConfig+0x38c>)
 8003c68:	fba3 1302 	umull	r1, r3, r3, r2
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	2164      	movs	r1, #100	; 0x64
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	3332      	adds	r3, #50	; 0x32
 8003c7a:	4a67      	ldr	r2, [pc, #412]	; (8003e18 <UART_SetConfig+0x38c>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	f003 0207 	and.w	r2, r3, #7
 8003c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4432      	add	r2, r6
 8003c8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c8e:	e0b9      	b.n	8003e04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c92:	461c      	mov	r4, r3
 8003c94:	f04f 0500 	mov.w	r5, #0
 8003c98:	4622      	mov	r2, r4
 8003c9a:	462b      	mov	r3, r5
 8003c9c:	1891      	adds	r1, r2, r2
 8003c9e:	6139      	str	r1, [r7, #16]
 8003ca0:	415b      	adcs	r3, r3
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ca8:	1912      	adds	r2, r2, r4
 8003caa:	eb45 0303 	adc.w	r3, r5, r3
 8003cae:	f04f 0000 	mov.w	r0, #0
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	00d9      	lsls	r1, r3, #3
 8003cb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cbc:	00d0      	lsls	r0, r2, #3
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	eb12 0804 	adds.w	r8, r2, r4
 8003cc6:	eb43 0905 	adc.w	r9, r3, r5
 8003cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	008b      	lsls	r3, r1, #2
 8003cde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ce2:	0082      	lsls	r2, r0, #2
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	f7fc ffd6 	bl	8000c98 <__aeabi_uldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <UART_SetConfig+0x38c>)
 8003cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	011e      	lsls	r6, r3, #4
 8003cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	1894      	adds	r4, r2, r2
 8003d08:	60bc      	str	r4, [r7, #8]
 8003d0a:	415b      	adcs	r3, r3
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d12:	1812      	adds	r2, r2, r0
 8003d14:	eb41 0303 	adc.w	r3, r1, r3
 8003d18:	f04f 0400 	mov.w	r4, #0
 8003d1c:	f04f 0500 	mov.w	r5, #0
 8003d20:	00dd      	lsls	r5, r3, #3
 8003d22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d26:	00d4      	lsls	r4, r2, #3
 8003d28:	4622      	mov	r2, r4
 8003d2a:	462b      	mov	r3, r5
 8003d2c:	1814      	adds	r4, r2, r0
 8003d2e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003d30:	414b      	adcs	r3, r1
 8003d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	008b      	lsls	r3, r1, #2
 8003d48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d4c:	0082      	lsls	r2, r0, #2
 8003d4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003d52:	f7fc ffa1 	bl	8000c98 <__aeabi_uldivmod>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4b2f      	ldr	r3, [pc, #188]	; (8003e18 <UART_SetConfig+0x38c>)
 8003d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	2164      	movs	r1, #100	; 0x64
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	3332      	adds	r3, #50	; 0x32
 8003d6e:	4a2a      	ldr	r2, [pc, #168]	; (8003e18 <UART_SetConfig+0x38c>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d7a:	441e      	add	r6, r3
 8003d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f04f 0100 	mov.w	r1, #0
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	1894      	adds	r4, r2, r2
 8003d8a:	603c      	str	r4, [r7, #0]
 8003d8c:	415b      	adcs	r3, r3
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d94:	1812      	adds	r2, r2, r0
 8003d96:	eb41 0303 	adc.w	r3, r1, r3
 8003d9a:	f04f 0400 	mov.w	r4, #0
 8003d9e:	f04f 0500 	mov.w	r5, #0
 8003da2:	00dd      	lsls	r5, r3, #3
 8003da4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003da8:	00d4      	lsls	r4, r2, #3
 8003daa:	4622      	mov	r2, r4
 8003dac:	462b      	mov	r3, r5
 8003dae:	eb12 0a00 	adds.w	sl, r2, r0
 8003db2:	eb43 0b01 	adc.w	fp, r3, r1
 8003db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f04f 0100 	mov.w	r1, #0
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	008b      	lsls	r3, r1, #2
 8003dca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dce:	0082      	lsls	r2, r0, #2
 8003dd0:	4650      	mov	r0, sl
 8003dd2:	4659      	mov	r1, fp
 8003dd4:	f7fc ff60 	bl	8000c98 <__aeabi_uldivmod>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4b0e      	ldr	r3, [pc, #56]	; (8003e18 <UART_SetConfig+0x38c>)
 8003dde:	fba3 1302 	umull	r1, r3, r3, r2
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	2164      	movs	r1, #100	; 0x64
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	3332      	adds	r3, #50	; 0x32
 8003df0:	4a09      	ldr	r2, [pc, #36]	; (8003e18 <UART_SetConfig+0x38c>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	f003 020f 	and.w	r2, r3, #15
 8003dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4432      	add	r2, r6
 8003e02:	609a      	str	r2, [r3, #8]
}
 8003e04:	bf00      	nop
 8003e06:	377c      	adds	r7, #124	; 0x7c
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0e:	bf00      	nop
 8003e10:	40011000 	.word	0x40011000
 8003e14:	40011400 	.word	0x40011400
 8003e18:	51eb851f 	.word	0x51eb851f

08003e1c <__errno>:
 8003e1c:	4b01      	ldr	r3, [pc, #4]	; (8003e24 <__errno+0x8>)
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	2000000c 	.word	0x2000000c

08003e28 <__libc_init_array>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	4d0d      	ldr	r5, [pc, #52]	; (8003e60 <__libc_init_array+0x38>)
 8003e2c:	4c0d      	ldr	r4, [pc, #52]	; (8003e64 <__libc_init_array+0x3c>)
 8003e2e:	1b64      	subs	r4, r4, r5
 8003e30:	10a4      	asrs	r4, r4, #2
 8003e32:	2600      	movs	r6, #0
 8003e34:	42a6      	cmp	r6, r4
 8003e36:	d109      	bne.n	8003e4c <__libc_init_array+0x24>
 8003e38:	4d0b      	ldr	r5, [pc, #44]	; (8003e68 <__libc_init_array+0x40>)
 8003e3a:	4c0c      	ldr	r4, [pc, #48]	; (8003e6c <__libc_init_array+0x44>)
 8003e3c:	f004 fc44 	bl	80086c8 <_init>
 8003e40:	1b64      	subs	r4, r4, r5
 8003e42:	10a4      	asrs	r4, r4, #2
 8003e44:	2600      	movs	r6, #0
 8003e46:	42a6      	cmp	r6, r4
 8003e48:	d105      	bne.n	8003e56 <__libc_init_array+0x2e>
 8003e4a:	bd70      	pop	{r4, r5, r6, pc}
 8003e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e50:	4798      	blx	r3
 8003e52:	3601      	adds	r6, #1
 8003e54:	e7ee      	b.n	8003e34 <__libc_init_array+0xc>
 8003e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5a:	4798      	blx	r3
 8003e5c:	3601      	adds	r6, #1
 8003e5e:	e7f2      	b.n	8003e46 <__libc_init_array+0x1e>
 8003e60:	08008bcc 	.word	0x08008bcc
 8003e64:	08008bcc 	.word	0x08008bcc
 8003e68:	08008bcc 	.word	0x08008bcc
 8003e6c:	08008bd0 	.word	0x08008bd0

08003e70 <memset>:
 8003e70:	4402      	add	r2, r0
 8003e72:	4603      	mov	r3, r0
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d100      	bne.n	8003e7a <memset+0xa>
 8003e78:	4770      	bx	lr
 8003e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e7e:	e7f9      	b.n	8003e74 <memset+0x4>

08003e80 <__cvt>:
 8003e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e84:	ec55 4b10 	vmov	r4, r5, d0
 8003e88:	2d00      	cmp	r5, #0
 8003e8a:	460e      	mov	r6, r1
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	462b      	mov	r3, r5
 8003e90:	bfbb      	ittet	lt
 8003e92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003e96:	461d      	movlt	r5, r3
 8003e98:	2300      	movge	r3, #0
 8003e9a:	232d      	movlt	r3, #45	; 0x2d
 8003e9c:	700b      	strb	r3, [r1, #0]
 8003e9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ea0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003ea4:	4691      	mov	r9, r2
 8003ea6:	f023 0820 	bic.w	r8, r3, #32
 8003eaa:	bfbc      	itt	lt
 8003eac:	4622      	movlt	r2, r4
 8003eae:	4614      	movlt	r4, r2
 8003eb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003eb4:	d005      	beq.n	8003ec2 <__cvt+0x42>
 8003eb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003eba:	d100      	bne.n	8003ebe <__cvt+0x3e>
 8003ebc:	3601      	adds	r6, #1
 8003ebe:	2102      	movs	r1, #2
 8003ec0:	e000      	b.n	8003ec4 <__cvt+0x44>
 8003ec2:	2103      	movs	r1, #3
 8003ec4:	ab03      	add	r3, sp, #12
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	ab02      	add	r3, sp, #8
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	ec45 4b10 	vmov	d0, r4, r5
 8003ed0:	4653      	mov	r3, sl
 8003ed2:	4632      	mov	r2, r6
 8003ed4:	f001 fdb4 	bl	8005a40 <_dtoa_r>
 8003ed8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003edc:	4607      	mov	r7, r0
 8003ede:	d102      	bne.n	8003ee6 <__cvt+0x66>
 8003ee0:	f019 0f01 	tst.w	r9, #1
 8003ee4:	d022      	beq.n	8003f2c <__cvt+0xac>
 8003ee6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003eea:	eb07 0906 	add.w	r9, r7, r6
 8003eee:	d110      	bne.n	8003f12 <__cvt+0x92>
 8003ef0:	783b      	ldrb	r3, [r7, #0]
 8003ef2:	2b30      	cmp	r3, #48	; 0x30
 8003ef4:	d10a      	bne.n	8003f0c <__cvt+0x8c>
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2300      	movs	r3, #0
 8003efa:	4620      	mov	r0, r4
 8003efc:	4629      	mov	r1, r5
 8003efe:	f7fc fdeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f02:	b918      	cbnz	r0, 8003f0c <__cvt+0x8c>
 8003f04:	f1c6 0601 	rsb	r6, r6, #1
 8003f08:	f8ca 6000 	str.w	r6, [sl]
 8003f0c:	f8da 3000 	ldr.w	r3, [sl]
 8003f10:	4499      	add	r9, r3
 8003f12:	2200      	movs	r2, #0
 8003f14:	2300      	movs	r3, #0
 8003f16:	4620      	mov	r0, r4
 8003f18:	4629      	mov	r1, r5
 8003f1a:	f7fc fddd 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f1e:	b108      	cbz	r0, 8003f24 <__cvt+0xa4>
 8003f20:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f24:	2230      	movs	r2, #48	; 0x30
 8003f26:	9b03      	ldr	r3, [sp, #12]
 8003f28:	454b      	cmp	r3, r9
 8003f2a:	d307      	bcc.n	8003f3c <__cvt+0xbc>
 8003f2c:	9b03      	ldr	r3, [sp, #12]
 8003f2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f30:	1bdb      	subs	r3, r3, r7
 8003f32:	4638      	mov	r0, r7
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	b004      	add	sp, #16
 8003f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f3c:	1c59      	adds	r1, r3, #1
 8003f3e:	9103      	str	r1, [sp, #12]
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	e7f0      	b.n	8003f26 <__cvt+0xa6>

08003f44 <__exponent>:
 8003f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f46:	4603      	mov	r3, r0
 8003f48:	2900      	cmp	r1, #0
 8003f4a:	bfb8      	it	lt
 8003f4c:	4249      	neglt	r1, r1
 8003f4e:	f803 2b02 	strb.w	r2, [r3], #2
 8003f52:	bfb4      	ite	lt
 8003f54:	222d      	movlt	r2, #45	; 0x2d
 8003f56:	222b      	movge	r2, #43	; 0x2b
 8003f58:	2909      	cmp	r1, #9
 8003f5a:	7042      	strb	r2, [r0, #1]
 8003f5c:	dd2a      	ble.n	8003fb4 <__exponent+0x70>
 8003f5e:	f10d 0407 	add.w	r4, sp, #7
 8003f62:	46a4      	mov	ip, r4
 8003f64:	270a      	movs	r7, #10
 8003f66:	46a6      	mov	lr, r4
 8003f68:	460a      	mov	r2, r1
 8003f6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8003f6e:	fb07 1516 	mls	r5, r7, r6, r1
 8003f72:	3530      	adds	r5, #48	; 0x30
 8003f74:	2a63      	cmp	r2, #99	; 0x63
 8003f76:	f104 34ff 	add.w	r4, r4, #4294967295
 8003f7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003f7e:	4631      	mov	r1, r6
 8003f80:	dcf1      	bgt.n	8003f66 <__exponent+0x22>
 8003f82:	3130      	adds	r1, #48	; 0x30
 8003f84:	f1ae 0502 	sub.w	r5, lr, #2
 8003f88:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003f8c:	1c44      	adds	r4, r0, #1
 8003f8e:	4629      	mov	r1, r5
 8003f90:	4561      	cmp	r1, ip
 8003f92:	d30a      	bcc.n	8003faa <__exponent+0x66>
 8003f94:	f10d 0209 	add.w	r2, sp, #9
 8003f98:	eba2 020e 	sub.w	r2, r2, lr
 8003f9c:	4565      	cmp	r5, ip
 8003f9e:	bf88      	it	hi
 8003fa0:	2200      	movhi	r2, #0
 8003fa2:	4413      	add	r3, r2
 8003fa4:	1a18      	subs	r0, r3, r0
 8003fa6:	b003      	add	sp, #12
 8003fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fae:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003fb2:	e7ed      	b.n	8003f90 <__exponent+0x4c>
 8003fb4:	2330      	movs	r3, #48	; 0x30
 8003fb6:	3130      	adds	r1, #48	; 0x30
 8003fb8:	7083      	strb	r3, [r0, #2]
 8003fba:	70c1      	strb	r1, [r0, #3]
 8003fbc:	1d03      	adds	r3, r0, #4
 8003fbe:	e7f1      	b.n	8003fa4 <__exponent+0x60>

08003fc0 <_printf_float>:
 8003fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc4:	ed2d 8b02 	vpush	{d8}
 8003fc8:	b08d      	sub	sp, #52	; 0x34
 8003fca:	460c      	mov	r4, r1
 8003fcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003fd0:	4616      	mov	r6, r2
 8003fd2:	461f      	mov	r7, r3
 8003fd4:	4605      	mov	r5, r0
 8003fd6:	f002 fe8f 	bl	8006cf8 <_localeconv_r>
 8003fda:	f8d0 a000 	ldr.w	sl, [r0]
 8003fde:	4650      	mov	r0, sl
 8003fe0:	f7fc f8fe 	bl	80001e0 <strlen>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	9305      	str	r3, [sp, #20]
 8003fec:	f8d8 3000 	ldr.w	r3, [r8]
 8003ff0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003ff4:	3307      	adds	r3, #7
 8003ff6:	f023 0307 	bic.w	r3, r3, #7
 8003ffa:	f103 0208 	add.w	r2, r3, #8
 8003ffe:	f8c8 2000 	str.w	r2, [r8]
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800400a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800400e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004012:	9307      	str	r3, [sp, #28]
 8004014:	f8cd 8018 	str.w	r8, [sp, #24]
 8004018:	ee08 0a10 	vmov	s16, r0
 800401c:	4b9f      	ldr	r3, [pc, #636]	; (800429c <_printf_float+0x2dc>)
 800401e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004022:	f04f 32ff 	mov.w	r2, #4294967295
 8004026:	f7fc fd89 	bl	8000b3c <__aeabi_dcmpun>
 800402a:	bb88      	cbnz	r0, 8004090 <_printf_float+0xd0>
 800402c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004030:	4b9a      	ldr	r3, [pc, #616]	; (800429c <_printf_float+0x2dc>)
 8004032:	f04f 32ff 	mov.w	r2, #4294967295
 8004036:	f7fc fd63 	bl	8000b00 <__aeabi_dcmple>
 800403a:	bb48      	cbnz	r0, 8004090 <_printf_float+0xd0>
 800403c:	2200      	movs	r2, #0
 800403e:	2300      	movs	r3, #0
 8004040:	4640      	mov	r0, r8
 8004042:	4649      	mov	r1, r9
 8004044:	f7fc fd52 	bl	8000aec <__aeabi_dcmplt>
 8004048:	b110      	cbz	r0, 8004050 <_printf_float+0x90>
 800404a:	232d      	movs	r3, #45	; 0x2d
 800404c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004050:	4b93      	ldr	r3, [pc, #588]	; (80042a0 <_printf_float+0x2e0>)
 8004052:	4894      	ldr	r0, [pc, #592]	; (80042a4 <_printf_float+0x2e4>)
 8004054:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004058:	bf94      	ite	ls
 800405a:	4698      	movls	r8, r3
 800405c:	4680      	movhi	r8, r0
 800405e:	2303      	movs	r3, #3
 8004060:	6123      	str	r3, [r4, #16]
 8004062:	9b05      	ldr	r3, [sp, #20]
 8004064:	f023 0204 	bic.w	r2, r3, #4
 8004068:	6022      	str	r2, [r4, #0]
 800406a:	f04f 0900 	mov.w	r9, #0
 800406e:	9700      	str	r7, [sp, #0]
 8004070:	4633      	mov	r3, r6
 8004072:	aa0b      	add	r2, sp, #44	; 0x2c
 8004074:	4621      	mov	r1, r4
 8004076:	4628      	mov	r0, r5
 8004078:	f000 f9d8 	bl	800442c <_printf_common>
 800407c:	3001      	adds	r0, #1
 800407e:	f040 8090 	bne.w	80041a2 <_printf_float+0x1e2>
 8004082:	f04f 30ff 	mov.w	r0, #4294967295
 8004086:	b00d      	add	sp, #52	; 0x34
 8004088:	ecbd 8b02 	vpop	{d8}
 800408c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004090:	4642      	mov	r2, r8
 8004092:	464b      	mov	r3, r9
 8004094:	4640      	mov	r0, r8
 8004096:	4649      	mov	r1, r9
 8004098:	f7fc fd50 	bl	8000b3c <__aeabi_dcmpun>
 800409c:	b140      	cbz	r0, 80040b0 <_printf_float+0xf0>
 800409e:	464b      	mov	r3, r9
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bfbc      	itt	lt
 80040a4:	232d      	movlt	r3, #45	; 0x2d
 80040a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80040aa:	487f      	ldr	r0, [pc, #508]	; (80042a8 <_printf_float+0x2e8>)
 80040ac:	4b7f      	ldr	r3, [pc, #508]	; (80042ac <_printf_float+0x2ec>)
 80040ae:	e7d1      	b.n	8004054 <_printf_float+0x94>
 80040b0:	6863      	ldr	r3, [r4, #4]
 80040b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80040b6:	9206      	str	r2, [sp, #24]
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	d13f      	bne.n	800413c <_printf_float+0x17c>
 80040bc:	2306      	movs	r3, #6
 80040be:	6063      	str	r3, [r4, #4]
 80040c0:	9b05      	ldr	r3, [sp, #20]
 80040c2:	6861      	ldr	r1, [r4, #4]
 80040c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80040c8:	2300      	movs	r3, #0
 80040ca:	9303      	str	r3, [sp, #12]
 80040cc:	ab0a      	add	r3, sp, #40	; 0x28
 80040ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80040d2:	ab09      	add	r3, sp, #36	; 0x24
 80040d4:	ec49 8b10 	vmov	d0, r8, r9
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	6022      	str	r2, [r4, #0]
 80040dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80040e0:	4628      	mov	r0, r5
 80040e2:	f7ff fecd 	bl	8003e80 <__cvt>
 80040e6:	9b06      	ldr	r3, [sp, #24]
 80040e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040ea:	2b47      	cmp	r3, #71	; 0x47
 80040ec:	4680      	mov	r8, r0
 80040ee:	d108      	bne.n	8004102 <_printf_float+0x142>
 80040f0:	1cc8      	adds	r0, r1, #3
 80040f2:	db02      	blt.n	80040fa <_printf_float+0x13a>
 80040f4:	6863      	ldr	r3, [r4, #4]
 80040f6:	4299      	cmp	r1, r3
 80040f8:	dd41      	ble.n	800417e <_printf_float+0x1be>
 80040fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80040fe:	fa5f fb8b 	uxtb.w	fp, fp
 8004102:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004106:	d820      	bhi.n	800414a <_printf_float+0x18a>
 8004108:	3901      	subs	r1, #1
 800410a:	465a      	mov	r2, fp
 800410c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004110:	9109      	str	r1, [sp, #36]	; 0x24
 8004112:	f7ff ff17 	bl	8003f44 <__exponent>
 8004116:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004118:	1813      	adds	r3, r2, r0
 800411a:	2a01      	cmp	r2, #1
 800411c:	4681      	mov	r9, r0
 800411e:	6123      	str	r3, [r4, #16]
 8004120:	dc02      	bgt.n	8004128 <_printf_float+0x168>
 8004122:	6822      	ldr	r2, [r4, #0]
 8004124:	07d2      	lsls	r2, r2, #31
 8004126:	d501      	bpl.n	800412c <_printf_float+0x16c>
 8004128:	3301      	adds	r3, #1
 800412a:	6123      	str	r3, [r4, #16]
 800412c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004130:	2b00      	cmp	r3, #0
 8004132:	d09c      	beq.n	800406e <_printf_float+0xae>
 8004134:	232d      	movs	r3, #45	; 0x2d
 8004136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800413a:	e798      	b.n	800406e <_printf_float+0xae>
 800413c:	9a06      	ldr	r2, [sp, #24]
 800413e:	2a47      	cmp	r2, #71	; 0x47
 8004140:	d1be      	bne.n	80040c0 <_printf_float+0x100>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1bc      	bne.n	80040c0 <_printf_float+0x100>
 8004146:	2301      	movs	r3, #1
 8004148:	e7b9      	b.n	80040be <_printf_float+0xfe>
 800414a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800414e:	d118      	bne.n	8004182 <_printf_float+0x1c2>
 8004150:	2900      	cmp	r1, #0
 8004152:	6863      	ldr	r3, [r4, #4]
 8004154:	dd0b      	ble.n	800416e <_printf_float+0x1ae>
 8004156:	6121      	str	r1, [r4, #16]
 8004158:	b913      	cbnz	r3, 8004160 <_printf_float+0x1a0>
 800415a:	6822      	ldr	r2, [r4, #0]
 800415c:	07d0      	lsls	r0, r2, #31
 800415e:	d502      	bpl.n	8004166 <_printf_float+0x1a6>
 8004160:	3301      	adds	r3, #1
 8004162:	440b      	add	r3, r1
 8004164:	6123      	str	r3, [r4, #16]
 8004166:	65a1      	str	r1, [r4, #88]	; 0x58
 8004168:	f04f 0900 	mov.w	r9, #0
 800416c:	e7de      	b.n	800412c <_printf_float+0x16c>
 800416e:	b913      	cbnz	r3, 8004176 <_printf_float+0x1b6>
 8004170:	6822      	ldr	r2, [r4, #0]
 8004172:	07d2      	lsls	r2, r2, #31
 8004174:	d501      	bpl.n	800417a <_printf_float+0x1ba>
 8004176:	3302      	adds	r3, #2
 8004178:	e7f4      	b.n	8004164 <_printf_float+0x1a4>
 800417a:	2301      	movs	r3, #1
 800417c:	e7f2      	b.n	8004164 <_printf_float+0x1a4>
 800417e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004184:	4299      	cmp	r1, r3
 8004186:	db05      	blt.n	8004194 <_printf_float+0x1d4>
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	6121      	str	r1, [r4, #16]
 800418c:	07d8      	lsls	r0, r3, #31
 800418e:	d5ea      	bpl.n	8004166 <_printf_float+0x1a6>
 8004190:	1c4b      	adds	r3, r1, #1
 8004192:	e7e7      	b.n	8004164 <_printf_float+0x1a4>
 8004194:	2900      	cmp	r1, #0
 8004196:	bfd4      	ite	le
 8004198:	f1c1 0202 	rsble	r2, r1, #2
 800419c:	2201      	movgt	r2, #1
 800419e:	4413      	add	r3, r2
 80041a0:	e7e0      	b.n	8004164 <_printf_float+0x1a4>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	055a      	lsls	r2, r3, #21
 80041a6:	d407      	bmi.n	80041b8 <_printf_float+0x1f8>
 80041a8:	6923      	ldr	r3, [r4, #16]
 80041aa:	4642      	mov	r2, r8
 80041ac:	4631      	mov	r1, r6
 80041ae:	4628      	mov	r0, r5
 80041b0:	47b8      	blx	r7
 80041b2:	3001      	adds	r0, #1
 80041b4:	d12c      	bne.n	8004210 <_printf_float+0x250>
 80041b6:	e764      	b.n	8004082 <_printf_float+0xc2>
 80041b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80041bc:	f240 80e0 	bls.w	8004380 <_printf_float+0x3c0>
 80041c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041c4:	2200      	movs	r2, #0
 80041c6:	2300      	movs	r3, #0
 80041c8:	f7fc fc86 	bl	8000ad8 <__aeabi_dcmpeq>
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d034      	beq.n	800423a <_printf_float+0x27a>
 80041d0:	4a37      	ldr	r2, [pc, #220]	; (80042b0 <_printf_float+0x2f0>)
 80041d2:	2301      	movs	r3, #1
 80041d4:	4631      	mov	r1, r6
 80041d6:	4628      	mov	r0, r5
 80041d8:	47b8      	blx	r7
 80041da:	3001      	adds	r0, #1
 80041dc:	f43f af51 	beq.w	8004082 <_printf_float+0xc2>
 80041e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041e4:	429a      	cmp	r2, r3
 80041e6:	db02      	blt.n	80041ee <_printf_float+0x22e>
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	07d8      	lsls	r0, r3, #31
 80041ec:	d510      	bpl.n	8004210 <_printf_float+0x250>
 80041ee:	ee18 3a10 	vmov	r3, s16
 80041f2:	4652      	mov	r2, sl
 80041f4:	4631      	mov	r1, r6
 80041f6:	4628      	mov	r0, r5
 80041f8:	47b8      	blx	r7
 80041fa:	3001      	adds	r0, #1
 80041fc:	f43f af41 	beq.w	8004082 <_printf_float+0xc2>
 8004200:	f04f 0800 	mov.w	r8, #0
 8004204:	f104 091a 	add.w	r9, r4, #26
 8004208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800420a:	3b01      	subs	r3, #1
 800420c:	4543      	cmp	r3, r8
 800420e:	dc09      	bgt.n	8004224 <_printf_float+0x264>
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	079b      	lsls	r3, r3, #30
 8004214:	f100 8105 	bmi.w	8004422 <_printf_float+0x462>
 8004218:	68e0      	ldr	r0, [r4, #12]
 800421a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800421c:	4298      	cmp	r0, r3
 800421e:	bfb8      	it	lt
 8004220:	4618      	movlt	r0, r3
 8004222:	e730      	b.n	8004086 <_printf_float+0xc6>
 8004224:	2301      	movs	r3, #1
 8004226:	464a      	mov	r2, r9
 8004228:	4631      	mov	r1, r6
 800422a:	4628      	mov	r0, r5
 800422c:	47b8      	blx	r7
 800422e:	3001      	adds	r0, #1
 8004230:	f43f af27 	beq.w	8004082 <_printf_float+0xc2>
 8004234:	f108 0801 	add.w	r8, r8, #1
 8004238:	e7e6      	b.n	8004208 <_printf_float+0x248>
 800423a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800423c:	2b00      	cmp	r3, #0
 800423e:	dc39      	bgt.n	80042b4 <_printf_float+0x2f4>
 8004240:	4a1b      	ldr	r2, [pc, #108]	; (80042b0 <_printf_float+0x2f0>)
 8004242:	2301      	movs	r3, #1
 8004244:	4631      	mov	r1, r6
 8004246:	4628      	mov	r0, r5
 8004248:	47b8      	blx	r7
 800424a:	3001      	adds	r0, #1
 800424c:	f43f af19 	beq.w	8004082 <_printf_float+0xc2>
 8004250:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004254:	4313      	orrs	r3, r2
 8004256:	d102      	bne.n	800425e <_printf_float+0x29e>
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	07d9      	lsls	r1, r3, #31
 800425c:	d5d8      	bpl.n	8004210 <_printf_float+0x250>
 800425e:	ee18 3a10 	vmov	r3, s16
 8004262:	4652      	mov	r2, sl
 8004264:	4631      	mov	r1, r6
 8004266:	4628      	mov	r0, r5
 8004268:	47b8      	blx	r7
 800426a:	3001      	adds	r0, #1
 800426c:	f43f af09 	beq.w	8004082 <_printf_float+0xc2>
 8004270:	f04f 0900 	mov.w	r9, #0
 8004274:	f104 0a1a 	add.w	sl, r4, #26
 8004278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800427a:	425b      	negs	r3, r3
 800427c:	454b      	cmp	r3, r9
 800427e:	dc01      	bgt.n	8004284 <_printf_float+0x2c4>
 8004280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004282:	e792      	b.n	80041aa <_printf_float+0x1ea>
 8004284:	2301      	movs	r3, #1
 8004286:	4652      	mov	r2, sl
 8004288:	4631      	mov	r1, r6
 800428a:	4628      	mov	r0, r5
 800428c:	47b8      	blx	r7
 800428e:	3001      	adds	r0, #1
 8004290:	f43f aef7 	beq.w	8004082 <_printf_float+0xc2>
 8004294:	f109 0901 	add.w	r9, r9, #1
 8004298:	e7ee      	b.n	8004278 <_printf_float+0x2b8>
 800429a:	bf00      	nop
 800429c:	7fefffff 	.word	0x7fefffff
 80042a0:	08008714 	.word	0x08008714
 80042a4:	08008718 	.word	0x08008718
 80042a8:	08008720 	.word	0x08008720
 80042ac:	0800871c 	.word	0x0800871c
 80042b0:	08008724 	.word	0x08008724
 80042b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042b8:	429a      	cmp	r2, r3
 80042ba:	bfa8      	it	ge
 80042bc:	461a      	movge	r2, r3
 80042be:	2a00      	cmp	r2, #0
 80042c0:	4691      	mov	r9, r2
 80042c2:	dc37      	bgt.n	8004334 <_printf_float+0x374>
 80042c4:	f04f 0b00 	mov.w	fp, #0
 80042c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042cc:	f104 021a 	add.w	r2, r4, #26
 80042d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042d2:	9305      	str	r3, [sp, #20]
 80042d4:	eba3 0309 	sub.w	r3, r3, r9
 80042d8:	455b      	cmp	r3, fp
 80042da:	dc33      	bgt.n	8004344 <_printf_float+0x384>
 80042dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042e0:	429a      	cmp	r2, r3
 80042e2:	db3b      	blt.n	800435c <_printf_float+0x39c>
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	07da      	lsls	r2, r3, #31
 80042e8:	d438      	bmi.n	800435c <_printf_float+0x39c>
 80042ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042ec:	9b05      	ldr	r3, [sp, #20]
 80042ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	eba2 0901 	sub.w	r9, r2, r1
 80042f6:	4599      	cmp	r9, r3
 80042f8:	bfa8      	it	ge
 80042fa:	4699      	movge	r9, r3
 80042fc:	f1b9 0f00 	cmp.w	r9, #0
 8004300:	dc35      	bgt.n	800436e <_printf_float+0x3ae>
 8004302:	f04f 0800 	mov.w	r8, #0
 8004306:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800430a:	f104 0a1a 	add.w	sl, r4, #26
 800430e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	eba3 0309 	sub.w	r3, r3, r9
 8004318:	4543      	cmp	r3, r8
 800431a:	f77f af79 	ble.w	8004210 <_printf_float+0x250>
 800431e:	2301      	movs	r3, #1
 8004320:	4652      	mov	r2, sl
 8004322:	4631      	mov	r1, r6
 8004324:	4628      	mov	r0, r5
 8004326:	47b8      	blx	r7
 8004328:	3001      	adds	r0, #1
 800432a:	f43f aeaa 	beq.w	8004082 <_printf_float+0xc2>
 800432e:	f108 0801 	add.w	r8, r8, #1
 8004332:	e7ec      	b.n	800430e <_printf_float+0x34e>
 8004334:	4613      	mov	r3, r2
 8004336:	4631      	mov	r1, r6
 8004338:	4642      	mov	r2, r8
 800433a:	4628      	mov	r0, r5
 800433c:	47b8      	blx	r7
 800433e:	3001      	adds	r0, #1
 8004340:	d1c0      	bne.n	80042c4 <_printf_float+0x304>
 8004342:	e69e      	b.n	8004082 <_printf_float+0xc2>
 8004344:	2301      	movs	r3, #1
 8004346:	4631      	mov	r1, r6
 8004348:	4628      	mov	r0, r5
 800434a:	9205      	str	r2, [sp, #20]
 800434c:	47b8      	blx	r7
 800434e:	3001      	adds	r0, #1
 8004350:	f43f ae97 	beq.w	8004082 <_printf_float+0xc2>
 8004354:	9a05      	ldr	r2, [sp, #20]
 8004356:	f10b 0b01 	add.w	fp, fp, #1
 800435a:	e7b9      	b.n	80042d0 <_printf_float+0x310>
 800435c:	ee18 3a10 	vmov	r3, s16
 8004360:	4652      	mov	r2, sl
 8004362:	4631      	mov	r1, r6
 8004364:	4628      	mov	r0, r5
 8004366:	47b8      	blx	r7
 8004368:	3001      	adds	r0, #1
 800436a:	d1be      	bne.n	80042ea <_printf_float+0x32a>
 800436c:	e689      	b.n	8004082 <_printf_float+0xc2>
 800436e:	9a05      	ldr	r2, [sp, #20]
 8004370:	464b      	mov	r3, r9
 8004372:	4442      	add	r2, r8
 8004374:	4631      	mov	r1, r6
 8004376:	4628      	mov	r0, r5
 8004378:	47b8      	blx	r7
 800437a:	3001      	adds	r0, #1
 800437c:	d1c1      	bne.n	8004302 <_printf_float+0x342>
 800437e:	e680      	b.n	8004082 <_printf_float+0xc2>
 8004380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004382:	2a01      	cmp	r2, #1
 8004384:	dc01      	bgt.n	800438a <_printf_float+0x3ca>
 8004386:	07db      	lsls	r3, r3, #31
 8004388:	d538      	bpl.n	80043fc <_printf_float+0x43c>
 800438a:	2301      	movs	r3, #1
 800438c:	4642      	mov	r2, r8
 800438e:	4631      	mov	r1, r6
 8004390:	4628      	mov	r0, r5
 8004392:	47b8      	blx	r7
 8004394:	3001      	adds	r0, #1
 8004396:	f43f ae74 	beq.w	8004082 <_printf_float+0xc2>
 800439a:	ee18 3a10 	vmov	r3, s16
 800439e:	4652      	mov	r2, sl
 80043a0:	4631      	mov	r1, r6
 80043a2:	4628      	mov	r0, r5
 80043a4:	47b8      	blx	r7
 80043a6:	3001      	adds	r0, #1
 80043a8:	f43f ae6b 	beq.w	8004082 <_printf_float+0xc2>
 80043ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043b0:	2200      	movs	r2, #0
 80043b2:	2300      	movs	r3, #0
 80043b4:	f7fc fb90 	bl	8000ad8 <__aeabi_dcmpeq>
 80043b8:	b9d8      	cbnz	r0, 80043f2 <_printf_float+0x432>
 80043ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043bc:	f108 0201 	add.w	r2, r8, #1
 80043c0:	3b01      	subs	r3, #1
 80043c2:	4631      	mov	r1, r6
 80043c4:	4628      	mov	r0, r5
 80043c6:	47b8      	blx	r7
 80043c8:	3001      	adds	r0, #1
 80043ca:	d10e      	bne.n	80043ea <_printf_float+0x42a>
 80043cc:	e659      	b.n	8004082 <_printf_float+0xc2>
 80043ce:	2301      	movs	r3, #1
 80043d0:	4652      	mov	r2, sl
 80043d2:	4631      	mov	r1, r6
 80043d4:	4628      	mov	r0, r5
 80043d6:	47b8      	blx	r7
 80043d8:	3001      	adds	r0, #1
 80043da:	f43f ae52 	beq.w	8004082 <_printf_float+0xc2>
 80043de:	f108 0801 	add.w	r8, r8, #1
 80043e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043e4:	3b01      	subs	r3, #1
 80043e6:	4543      	cmp	r3, r8
 80043e8:	dcf1      	bgt.n	80043ce <_printf_float+0x40e>
 80043ea:	464b      	mov	r3, r9
 80043ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80043f0:	e6dc      	b.n	80041ac <_printf_float+0x1ec>
 80043f2:	f04f 0800 	mov.w	r8, #0
 80043f6:	f104 0a1a 	add.w	sl, r4, #26
 80043fa:	e7f2      	b.n	80043e2 <_printf_float+0x422>
 80043fc:	2301      	movs	r3, #1
 80043fe:	4642      	mov	r2, r8
 8004400:	e7df      	b.n	80043c2 <_printf_float+0x402>
 8004402:	2301      	movs	r3, #1
 8004404:	464a      	mov	r2, r9
 8004406:	4631      	mov	r1, r6
 8004408:	4628      	mov	r0, r5
 800440a:	47b8      	blx	r7
 800440c:	3001      	adds	r0, #1
 800440e:	f43f ae38 	beq.w	8004082 <_printf_float+0xc2>
 8004412:	f108 0801 	add.w	r8, r8, #1
 8004416:	68e3      	ldr	r3, [r4, #12]
 8004418:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800441a:	1a5b      	subs	r3, r3, r1
 800441c:	4543      	cmp	r3, r8
 800441e:	dcf0      	bgt.n	8004402 <_printf_float+0x442>
 8004420:	e6fa      	b.n	8004218 <_printf_float+0x258>
 8004422:	f04f 0800 	mov.w	r8, #0
 8004426:	f104 0919 	add.w	r9, r4, #25
 800442a:	e7f4      	b.n	8004416 <_printf_float+0x456>

0800442c <_printf_common>:
 800442c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004430:	4616      	mov	r6, r2
 8004432:	4699      	mov	r9, r3
 8004434:	688a      	ldr	r2, [r1, #8]
 8004436:	690b      	ldr	r3, [r1, #16]
 8004438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800443c:	4293      	cmp	r3, r2
 800443e:	bfb8      	it	lt
 8004440:	4613      	movlt	r3, r2
 8004442:	6033      	str	r3, [r6, #0]
 8004444:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004448:	4607      	mov	r7, r0
 800444a:	460c      	mov	r4, r1
 800444c:	b10a      	cbz	r2, 8004452 <_printf_common+0x26>
 800444e:	3301      	adds	r3, #1
 8004450:	6033      	str	r3, [r6, #0]
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	0699      	lsls	r1, r3, #26
 8004456:	bf42      	ittt	mi
 8004458:	6833      	ldrmi	r3, [r6, #0]
 800445a:	3302      	addmi	r3, #2
 800445c:	6033      	strmi	r3, [r6, #0]
 800445e:	6825      	ldr	r5, [r4, #0]
 8004460:	f015 0506 	ands.w	r5, r5, #6
 8004464:	d106      	bne.n	8004474 <_printf_common+0x48>
 8004466:	f104 0a19 	add.w	sl, r4, #25
 800446a:	68e3      	ldr	r3, [r4, #12]
 800446c:	6832      	ldr	r2, [r6, #0]
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	42ab      	cmp	r3, r5
 8004472:	dc26      	bgt.n	80044c2 <_printf_common+0x96>
 8004474:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004478:	1e13      	subs	r3, r2, #0
 800447a:	6822      	ldr	r2, [r4, #0]
 800447c:	bf18      	it	ne
 800447e:	2301      	movne	r3, #1
 8004480:	0692      	lsls	r2, r2, #26
 8004482:	d42b      	bmi.n	80044dc <_printf_common+0xb0>
 8004484:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004488:	4649      	mov	r1, r9
 800448a:	4638      	mov	r0, r7
 800448c:	47c0      	blx	r8
 800448e:	3001      	adds	r0, #1
 8004490:	d01e      	beq.n	80044d0 <_printf_common+0xa4>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	68e5      	ldr	r5, [r4, #12]
 8004496:	6832      	ldr	r2, [r6, #0]
 8004498:	f003 0306 	and.w	r3, r3, #6
 800449c:	2b04      	cmp	r3, #4
 800449e:	bf08      	it	eq
 80044a0:	1aad      	subeq	r5, r5, r2
 80044a2:	68a3      	ldr	r3, [r4, #8]
 80044a4:	6922      	ldr	r2, [r4, #16]
 80044a6:	bf0c      	ite	eq
 80044a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044ac:	2500      	movne	r5, #0
 80044ae:	4293      	cmp	r3, r2
 80044b0:	bfc4      	itt	gt
 80044b2:	1a9b      	subgt	r3, r3, r2
 80044b4:	18ed      	addgt	r5, r5, r3
 80044b6:	2600      	movs	r6, #0
 80044b8:	341a      	adds	r4, #26
 80044ba:	42b5      	cmp	r5, r6
 80044bc:	d11a      	bne.n	80044f4 <_printf_common+0xc8>
 80044be:	2000      	movs	r0, #0
 80044c0:	e008      	b.n	80044d4 <_printf_common+0xa8>
 80044c2:	2301      	movs	r3, #1
 80044c4:	4652      	mov	r2, sl
 80044c6:	4649      	mov	r1, r9
 80044c8:	4638      	mov	r0, r7
 80044ca:	47c0      	blx	r8
 80044cc:	3001      	adds	r0, #1
 80044ce:	d103      	bne.n	80044d8 <_printf_common+0xac>
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295
 80044d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d8:	3501      	adds	r5, #1
 80044da:	e7c6      	b.n	800446a <_printf_common+0x3e>
 80044dc:	18e1      	adds	r1, r4, r3
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	2030      	movs	r0, #48	; 0x30
 80044e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044e6:	4422      	add	r2, r4
 80044e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044f0:	3302      	adds	r3, #2
 80044f2:	e7c7      	b.n	8004484 <_printf_common+0x58>
 80044f4:	2301      	movs	r3, #1
 80044f6:	4622      	mov	r2, r4
 80044f8:	4649      	mov	r1, r9
 80044fa:	4638      	mov	r0, r7
 80044fc:	47c0      	blx	r8
 80044fe:	3001      	adds	r0, #1
 8004500:	d0e6      	beq.n	80044d0 <_printf_common+0xa4>
 8004502:	3601      	adds	r6, #1
 8004504:	e7d9      	b.n	80044ba <_printf_common+0x8e>
	...

08004508 <_printf_i>:
 8004508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800450c:	460c      	mov	r4, r1
 800450e:	4691      	mov	r9, r2
 8004510:	7e27      	ldrb	r7, [r4, #24]
 8004512:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004514:	2f78      	cmp	r7, #120	; 0x78
 8004516:	4680      	mov	r8, r0
 8004518:	469a      	mov	sl, r3
 800451a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800451e:	d807      	bhi.n	8004530 <_printf_i+0x28>
 8004520:	2f62      	cmp	r7, #98	; 0x62
 8004522:	d80a      	bhi.n	800453a <_printf_i+0x32>
 8004524:	2f00      	cmp	r7, #0
 8004526:	f000 80d8 	beq.w	80046da <_printf_i+0x1d2>
 800452a:	2f58      	cmp	r7, #88	; 0x58
 800452c:	f000 80a3 	beq.w	8004676 <_printf_i+0x16e>
 8004530:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004534:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004538:	e03a      	b.n	80045b0 <_printf_i+0xa8>
 800453a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800453e:	2b15      	cmp	r3, #21
 8004540:	d8f6      	bhi.n	8004530 <_printf_i+0x28>
 8004542:	a001      	add	r0, pc, #4	; (adr r0, 8004548 <_printf_i+0x40>)
 8004544:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004548:	080045a1 	.word	0x080045a1
 800454c:	080045b5 	.word	0x080045b5
 8004550:	08004531 	.word	0x08004531
 8004554:	08004531 	.word	0x08004531
 8004558:	08004531 	.word	0x08004531
 800455c:	08004531 	.word	0x08004531
 8004560:	080045b5 	.word	0x080045b5
 8004564:	08004531 	.word	0x08004531
 8004568:	08004531 	.word	0x08004531
 800456c:	08004531 	.word	0x08004531
 8004570:	08004531 	.word	0x08004531
 8004574:	080046c1 	.word	0x080046c1
 8004578:	080045e5 	.word	0x080045e5
 800457c:	080046a3 	.word	0x080046a3
 8004580:	08004531 	.word	0x08004531
 8004584:	08004531 	.word	0x08004531
 8004588:	080046e3 	.word	0x080046e3
 800458c:	08004531 	.word	0x08004531
 8004590:	080045e5 	.word	0x080045e5
 8004594:	08004531 	.word	0x08004531
 8004598:	08004531 	.word	0x08004531
 800459c:	080046ab 	.word	0x080046ab
 80045a0:	680b      	ldr	r3, [r1, #0]
 80045a2:	1d1a      	adds	r2, r3, #4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	600a      	str	r2, [r1, #0]
 80045a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0a3      	b.n	80046fc <_printf_i+0x1f4>
 80045b4:	6825      	ldr	r5, [r4, #0]
 80045b6:	6808      	ldr	r0, [r1, #0]
 80045b8:	062e      	lsls	r6, r5, #24
 80045ba:	f100 0304 	add.w	r3, r0, #4
 80045be:	d50a      	bpl.n	80045d6 <_printf_i+0xce>
 80045c0:	6805      	ldr	r5, [r0, #0]
 80045c2:	600b      	str	r3, [r1, #0]
 80045c4:	2d00      	cmp	r5, #0
 80045c6:	da03      	bge.n	80045d0 <_printf_i+0xc8>
 80045c8:	232d      	movs	r3, #45	; 0x2d
 80045ca:	426d      	negs	r5, r5
 80045cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045d0:	485e      	ldr	r0, [pc, #376]	; (800474c <_printf_i+0x244>)
 80045d2:	230a      	movs	r3, #10
 80045d4:	e019      	b.n	800460a <_printf_i+0x102>
 80045d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80045da:	6805      	ldr	r5, [r0, #0]
 80045dc:	600b      	str	r3, [r1, #0]
 80045de:	bf18      	it	ne
 80045e0:	b22d      	sxthne	r5, r5
 80045e2:	e7ef      	b.n	80045c4 <_printf_i+0xbc>
 80045e4:	680b      	ldr	r3, [r1, #0]
 80045e6:	6825      	ldr	r5, [r4, #0]
 80045e8:	1d18      	adds	r0, r3, #4
 80045ea:	6008      	str	r0, [r1, #0]
 80045ec:	0628      	lsls	r0, r5, #24
 80045ee:	d501      	bpl.n	80045f4 <_printf_i+0xec>
 80045f0:	681d      	ldr	r5, [r3, #0]
 80045f2:	e002      	b.n	80045fa <_printf_i+0xf2>
 80045f4:	0669      	lsls	r1, r5, #25
 80045f6:	d5fb      	bpl.n	80045f0 <_printf_i+0xe8>
 80045f8:	881d      	ldrh	r5, [r3, #0]
 80045fa:	4854      	ldr	r0, [pc, #336]	; (800474c <_printf_i+0x244>)
 80045fc:	2f6f      	cmp	r7, #111	; 0x6f
 80045fe:	bf0c      	ite	eq
 8004600:	2308      	moveq	r3, #8
 8004602:	230a      	movne	r3, #10
 8004604:	2100      	movs	r1, #0
 8004606:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800460a:	6866      	ldr	r6, [r4, #4]
 800460c:	60a6      	str	r6, [r4, #8]
 800460e:	2e00      	cmp	r6, #0
 8004610:	bfa2      	ittt	ge
 8004612:	6821      	ldrge	r1, [r4, #0]
 8004614:	f021 0104 	bicge.w	r1, r1, #4
 8004618:	6021      	strge	r1, [r4, #0]
 800461a:	b90d      	cbnz	r5, 8004620 <_printf_i+0x118>
 800461c:	2e00      	cmp	r6, #0
 800461e:	d04d      	beq.n	80046bc <_printf_i+0x1b4>
 8004620:	4616      	mov	r6, r2
 8004622:	fbb5 f1f3 	udiv	r1, r5, r3
 8004626:	fb03 5711 	mls	r7, r3, r1, r5
 800462a:	5dc7      	ldrb	r7, [r0, r7]
 800462c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004630:	462f      	mov	r7, r5
 8004632:	42bb      	cmp	r3, r7
 8004634:	460d      	mov	r5, r1
 8004636:	d9f4      	bls.n	8004622 <_printf_i+0x11a>
 8004638:	2b08      	cmp	r3, #8
 800463a:	d10b      	bne.n	8004654 <_printf_i+0x14c>
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	07df      	lsls	r7, r3, #31
 8004640:	d508      	bpl.n	8004654 <_printf_i+0x14c>
 8004642:	6923      	ldr	r3, [r4, #16]
 8004644:	6861      	ldr	r1, [r4, #4]
 8004646:	4299      	cmp	r1, r3
 8004648:	bfde      	ittt	le
 800464a:	2330      	movle	r3, #48	; 0x30
 800464c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004650:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004654:	1b92      	subs	r2, r2, r6
 8004656:	6122      	str	r2, [r4, #16]
 8004658:	f8cd a000 	str.w	sl, [sp]
 800465c:	464b      	mov	r3, r9
 800465e:	aa03      	add	r2, sp, #12
 8004660:	4621      	mov	r1, r4
 8004662:	4640      	mov	r0, r8
 8004664:	f7ff fee2 	bl	800442c <_printf_common>
 8004668:	3001      	adds	r0, #1
 800466a:	d14c      	bne.n	8004706 <_printf_i+0x1fe>
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	b004      	add	sp, #16
 8004672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004676:	4835      	ldr	r0, [pc, #212]	; (800474c <_printf_i+0x244>)
 8004678:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	680e      	ldr	r6, [r1, #0]
 8004680:	061f      	lsls	r7, r3, #24
 8004682:	f856 5b04 	ldr.w	r5, [r6], #4
 8004686:	600e      	str	r6, [r1, #0]
 8004688:	d514      	bpl.n	80046b4 <_printf_i+0x1ac>
 800468a:	07d9      	lsls	r1, r3, #31
 800468c:	bf44      	itt	mi
 800468e:	f043 0320 	orrmi.w	r3, r3, #32
 8004692:	6023      	strmi	r3, [r4, #0]
 8004694:	b91d      	cbnz	r5, 800469e <_printf_i+0x196>
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	f023 0320 	bic.w	r3, r3, #32
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	2310      	movs	r3, #16
 80046a0:	e7b0      	b.n	8004604 <_printf_i+0xfc>
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	f043 0320 	orr.w	r3, r3, #32
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	2378      	movs	r3, #120	; 0x78
 80046ac:	4828      	ldr	r0, [pc, #160]	; (8004750 <_printf_i+0x248>)
 80046ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046b2:	e7e3      	b.n	800467c <_printf_i+0x174>
 80046b4:	065e      	lsls	r6, r3, #25
 80046b6:	bf48      	it	mi
 80046b8:	b2ad      	uxthmi	r5, r5
 80046ba:	e7e6      	b.n	800468a <_printf_i+0x182>
 80046bc:	4616      	mov	r6, r2
 80046be:	e7bb      	b.n	8004638 <_printf_i+0x130>
 80046c0:	680b      	ldr	r3, [r1, #0]
 80046c2:	6826      	ldr	r6, [r4, #0]
 80046c4:	6960      	ldr	r0, [r4, #20]
 80046c6:	1d1d      	adds	r5, r3, #4
 80046c8:	600d      	str	r5, [r1, #0]
 80046ca:	0635      	lsls	r5, r6, #24
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	d501      	bpl.n	80046d4 <_printf_i+0x1cc>
 80046d0:	6018      	str	r0, [r3, #0]
 80046d2:	e002      	b.n	80046da <_printf_i+0x1d2>
 80046d4:	0671      	lsls	r1, r6, #25
 80046d6:	d5fb      	bpl.n	80046d0 <_printf_i+0x1c8>
 80046d8:	8018      	strh	r0, [r3, #0]
 80046da:	2300      	movs	r3, #0
 80046dc:	6123      	str	r3, [r4, #16]
 80046de:	4616      	mov	r6, r2
 80046e0:	e7ba      	b.n	8004658 <_printf_i+0x150>
 80046e2:	680b      	ldr	r3, [r1, #0]
 80046e4:	1d1a      	adds	r2, r3, #4
 80046e6:	600a      	str	r2, [r1, #0]
 80046e8:	681e      	ldr	r6, [r3, #0]
 80046ea:	6862      	ldr	r2, [r4, #4]
 80046ec:	2100      	movs	r1, #0
 80046ee:	4630      	mov	r0, r6
 80046f0:	f7fb fd7e 	bl	80001f0 <memchr>
 80046f4:	b108      	cbz	r0, 80046fa <_printf_i+0x1f2>
 80046f6:	1b80      	subs	r0, r0, r6
 80046f8:	6060      	str	r0, [r4, #4]
 80046fa:	6863      	ldr	r3, [r4, #4]
 80046fc:	6123      	str	r3, [r4, #16]
 80046fe:	2300      	movs	r3, #0
 8004700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004704:	e7a8      	b.n	8004658 <_printf_i+0x150>
 8004706:	6923      	ldr	r3, [r4, #16]
 8004708:	4632      	mov	r2, r6
 800470a:	4649      	mov	r1, r9
 800470c:	4640      	mov	r0, r8
 800470e:	47d0      	blx	sl
 8004710:	3001      	adds	r0, #1
 8004712:	d0ab      	beq.n	800466c <_printf_i+0x164>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	079b      	lsls	r3, r3, #30
 8004718:	d413      	bmi.n	8004742 <_printf_i+0x23a>
 800471a:	68e0      	ldr	r0, [r4, #12]
 800471c:	9b03      	ldr	r3, [sp, #12]
 800471e:	4298      	cmp	r0, r3
 8004720:	bfb8      	it	lt
 8004722:	4618      	movlt	r0, r3
 8004724:	e7a4      	b.n	8004670 <_printf_i+0x168>
 8004726:	2301      	movs	r3, #1
 8004728:	4632      	mov	r2, r6
 800472a:	4649      	mov	r1, r9
 800472c:	4640      	mov	r0, r8
 800472e:	47d0      	blx	sl
 8004730:	3001      	adds	r0, #1
 8004732:	d09b      	beq.n	800466c <_printf_i+0x164>
 8004734:	3501      	adds	r5, #1
 8004736:	68e3      	ldr	r3, [r4, #12]
 8004738:	9903      	ldr	r1, [sp, #12]
 800473a:	1a5b      	subs	r3, r3, r1
 800473c:	42ab      	cmp	r3, r5
 800473e:	dcf2      	bgt.n	8004726 <_printf_i+0x21e>
 8004740:	e7eb      	b.n	800471a <_printf_i+0x212>
 8004742:	2500      	movs	r5, #0
 8004744:	f104 0619 	add.w	r6, r4, #25
 8004748:	e7f5      	b.n	8004736 <_printf_i+0x22e>
 800474a:	bf00      	nop
 800474c:	08008726 	.word	0x08008726
 8004750:	08008737 	.word	0x08008737

08004754 <_scanf_float>:
 8004754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004758:	b087      	sub	sp, #28
 800475a:	4617      	mov	r7, r2
 800475c:	9303      	str	r3, [sp, #12]
 800475e:	688b      	ldr	r3, [r1, #8]
 8004760:	1e5a      	subs	r2, r3, #1
 8004762:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004766:	bf83      	ittte	hi
 8004768:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800476c:	195b      	addhi	r3, r3, r5
 800476e:	9302      	strhi	r3, [sp, #8]
 8004770:	2300      	movls	r3, #0
 8004772:	bf86      	itte	hi
 8004774:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004778:	608b      	strhi	r3, [r1, #8]
 800477a:	9302      	strls	r3, [sp, #8]
 800477c:	680b      	ldr	r3, [r1, #0]
 800477e:	468b      	mov	fp, r1
 8004780:	2500      	movs	r5, #0
 8004782:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004786:	f84b 3b1c 	str.w	r3, [fp], #28
 800478a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800478e:	4680      	mov	r8, r0
 8004790:	460c      	mov	r4, r1
 8004792:	465e      	mov	r6, fp
 8004794:	46aa      	mov	sl, r5
 8004796:	46a9      	mov	r9, r5
 8004798:	9501      	str	r5, [sp, #4]
 800479a:	68a2      	ldr	r2, [r4, #8]
 800479c:	b152      	cbz	r2, 80047b4 <_scanf_float+0x60>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b4e      	cmp	r3, #78	; 0x4e
 80047a4:	d864      	bhi.n	8004870 <_scanf_float+0x11c>
 80047a6:	2b40      	cmp	r3, #64	; 0x40
 80047a8:	d83c      	bhi.n	8004824 <_scanf_float+0xd0>
 80047aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80047ae:	b2c8      	uxtb	r0, r1
 80047b0:	280e      	cmp	r0, #14
 80047b2:	d93a      	bls.n	800482a <_scanf_float+0xd6>
 80047b4:	f1b9 0f00 	cmp.w	r9, #0
 80047b8:	d003      	beq.n	80047c2 <_scanf_float+0x6e>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047c6:	f1ba 0f01 	cmp.w	sl, #1
 80047ca:	f200 8113 	bhi.w	80049f4 <_scanf_float+0x2a0>
 80047ce:	455e      	cmp	r6, fp
 80047d0:	f200 8105 	bhi.w	80049de <_scanf_float+0x28a>
 80047d4:	2501      	movs	r5, #1
 80047d6:	4628      	mov	r0, r5
 80047d8:	b007      	add	sp, #28
 80047da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80047e2:	2a0d      	cmp	r2, #13
 80047e4:	d8e6      	bhi.n	80047b4 <_scanf_float+0x60>
 80047e6:	a101      	add	r1, pc, #4	; (adr r1, 80047ec <_scanf_float+0x98>)
 80047e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80047ec:	0800492b 	.word	0x0800492b
 80047f0:	080047b5 	.word	0x080047b5
 80047f4:	080047b5 	.word	0x080047b5
 80047f8:	080047b5 	.word	0x080047b5
 80047fc:	0800498b 	.word	0x0800498b
 8004800:	08004963 	.word	0x08004963
 8004804:	080047b5 	.word	0x080047b5
 8004808:	080047b5 	.word	0x080047b5
 800480c:	08004939 	.word	0x08004939
 8004810:	080047b5 	.word	0x080047b5
 8004814:	080047b5 	.word	0x080047b5
 8004818:	080047b5 	.word	0x080047b5
 800481c:	080047b5 	.word	0x080047b5
 8004820:	080048f1 	.word	0x080048f1
 8004824:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004828:	e7db      	b.n	80047e2 <_scanf_float+0x8e>
 800482a:	290e      	cmp	r1, #14
 800482c:	d8c2      	bhi.n	80047b4 <_scanf_float+0x60>
 800482e:	a001      	add	r0, pc, #4	; (adr r0, 8004834 <_scanf_float+0xe0>)
 8004830:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004834:	080048e3 	.word	0x080048e3
 8004838:	080047b5 	.word	0x080047b5
 800483c:	080048e3 	.word	0x080048e3
 8004840:	08004977 	.word	0x08004977
 8004844:	080047b5 	.word	0x080047b5
 8004848:	08004891 	.word	0x08004891
 800484c:	080048cd 	.word	0x080048cd
 8004850:	080048cd 	.word	0x080048cd
 8004854:	080048cd 	.word	0x080048cd
 8004858:	080048cd 	.word	0x080048cd
 800485c:	080048cd 	.word	0x080048cd
 8004860:	080048cd 	.word	0x080048cd
 8004864:	080048cd 	.word	0x080048cd
 8004868:	080048cd 	.word	0x080048cd
 800486c:	080048cd 	.word	0x080048cd
 8004870:	2b6e      	cmp	r3, #110	; 0x6e
 8004872:	d809      	bhi.n	8004888 <_scanf_float+0x134>
 8004874:	2b60      	cmp	r3, #96	; 0x60
 8004876:	d8b2      	bhi.n	80047de <_scanf_float+0x8a>
 8004878:	2b54      	cmp	r3, #84	; 0x54
 800487a:	d077      	beq.n	800496c <_scanf_float+0x218>
 800487c:	2b59      	cmp	r3, #89	; 0x59
 800487e:	d199      	bne.n	80047b4 <_scanf_float+0x60>
 8004880:	2d07      	cmp	r5, #7
 8004882:	d197      	bne.n	80047b4 <_scanf_float+0x60>
 8004884:	2508      	movs	r5, #8
 8004886:	e029      	b.n	80048dc <_scanf_float+0x188>
 8004888:	2b74      	cmp	r3, #116	; 0x74
 800488a:	d06f      	beq.n	800496c <_scanf_float+0x218>
 800488c:	2b79      	cmp	r3, #121	; 0x79
 800488e:	e7f6      	b.n	800487e <_scanf_float+0x12a>
 8004890:	6821      	ldr	r1, [r4, #0]
 8004892:	05c8      	lsls	r0, r1, #23
 8004894:	d51a      	bpl.n	80048cc <_scanf_float+0x178>
 8004896:	9b02      	ldr	r3, [sp, #8]
 8004898:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800489c:	6021      	str	r1, [r4, #0]
 800489e:	f109 0901 	add.w	r9, r9, #1
 80048a2:	b11b      	cbz	r3, 80048ac <_scanf_float+0x158>
 80048a4:	3b01      	subs	r3, #1
 80048a6:	3201      	adds	r2, #1
 80048a8:	9302      	str	r3, [sp, #8]
 80048aa:	60a2      	str	r2, [r4, #8]
 80048ac:	68a3      	ldr	r3, [r4, #8]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	60a3      	str	r3, [r4, #8]
 80048b2:	6923      	ldr	r3, [r4, #16]
 80048b4:	3301      	adds	r3, #1
 80048b6:	6123      	str	r3, [r4, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	607b      	str	r3, [r7, #4]
 80048c0:	f340 8084 	ble.w	80049cc <_scanf_float+0x278>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	3301      	adds	r3, #1
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	e766      	b.n	800479a <_scanf_float+0x46>
 80048cc:	eb1a 0f05 	cmn.w	sl, r5
 80048d0:	f47f af70 	bne.w	80047b4 <_scanf_float+0x60>
 80048d4:	6822      	ldr	r2, [r4, #0]
 80048d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80048da:	6022      	str	r2, [r4, #0]
 80048dc:	f806 3b01 	strb.w	r3, [r6], #1
 80048e0:	e7e4      	b.n	80048ac <_scanf_float+0x158>
 80048e2:	6822      	ldr	r2, [r4, #0]
 80048e4:	0610      	lsls	r0, r2, #24
 80048e6:	f57f af65 	bpl.w	80047b4 <_scanf_float+0x60>
 80048ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ee:	e7f4      	b.n	80048da <_scanf_float+0x186>
 80048f0:	f1ba 0f00 	cmp.w	sl, #0
 80048f4:	d10e      	bne.n	8004914 <_scanf_float+0x1c0>
 80048f6:	f1b9 0f00 	cmp.w	r9, #0
 80048fa:	d10e      	bne.n	800491a <_scanf_float+0x1c6>
 80048fc:	6822      	ldr	r2, [r4, #0]
 80048fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004902:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004906:	d108      	bne.n	800491a <_scanf_float+0x1c6>
 8004908:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800490c:	6022      	str	r2, [r4, #0]
 800490e:	f04f 0a01 	mov.w	sl, #1
 8004912:	e7e3      	b.n	80048dc <_scanf_float+0x188>
 8004914:	f1ba 0f02 	cmp.w	sl, #2
 8004918:	d055      	beq.n	80049c6 <_scanf_float+0x272>
 800491a:	2d01      	cmp	r5, #1
 800491c:	d002      	beq.n	8004924 <_scanf_float+0x1d0>
 800491e:	2d04      	cmp	r5, #4
 8004920:	f47f af48 	bne.w	80047b4 <_scanf_float+0x60>
 8004924:	3501      	adds	r5, #1
 8004926:	b2ed      	uxtb	r5, r5
 8004928:	e7d8      	b.n	80048dc <_scanf_float+0x188>
 800492a:	f1ba 0f01 	cmp.w	sl, #1
 800492e:	f47f af41 	bne.w	80047b4 <_scanf_float+0x60>
 8004932:	f04f 0a02 	mov.w	sl, #2
 8004936:	e7d1      	b.n	80048dc <_scanf_float+0x188>
 8004938:	b97d      	cbnz	r5, 800495a <_scanf_float+0x206>
 800493a:	f1b9 0f00 	cmp.w	r9, #0
 800493e:	f47f af3c 	bne.w	80047ba <_scanf_float+0x66>
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004948:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800494c:	f47f af39 	bne.w	80047c2 <_scanf_float+0x6e>
 8004950:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004954:	6022      	str	r2, [r4, #0]
 8004956:	2501      	movs	r5, #1
 8004958:	e7c0      	b.n	80048dc <_scanf_float+0x188>
 800495a:	2d03      	cmp	r5, #3
 800495c:	d0e2      	beq.n	8004924 <_scanf_float+0x1d0>
 800495e:	2d05      	cmp	r5, #5
 8004960:	e7de      	b.n	8004920 <_scanf_float+0x1cc>
 8004962:	2d02      	cmp	r5, #2
 8004964:	f47f af26 	bne.w	80047b4 <_scanf_float+0x60>
 8004968:	2503      	movs	r5, #3
 800496a:	e7b7      	b.n	80048dc <_scanf_float+0x188>
 800496c:	2d06      	cmp	r5, #6
 800496e:	f47f af21 	bne.w	80047b4 <_scanf_float+0x60>
 8004972:	2507      	movs	r5, #7
 8004974:	e7b2      	b.n	80048dc <_scanf_float+0x188>
 8004976:	6822      	ldr	r2, [r4, #0]
 8004978:	0591      	lsls	r1, r2, #22
 800497a:	f57f af1b 	bpl.w	80047b4 <_scanf_float+0x60>
 800497e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004982:	6022      	str	r2, [r4, #0]
 8004984:	f8cd 9004 	str.w	r9, [sp, #4]
 8004988:	e7a8      	b.n	80048dc <_scanf_float+0x188>
 800498a:	6822      	ldr	r2, [r4, #0]
 800498c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004990:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004994:	d006      	beq.n	80049a4 <_scanf_float+0x250>
 8004996:	0550      	lsls	r0, r2, #21
 8004998:	f57f af0c 	bpl.w	80047b4 <_scanf_float+0x60>
 800499c:	f1b9 0f00 	cmp.w	r9, #0
 80049a0:	f43f af0f 	beq.w	80047c2 <_scanf_float+0x6e>
 80049a4:	0591      	lsls	r1, r2, #22
 80049a6:	bf58      	it	pl
 80049a8:	9901      	ldrpl	r1, [sp, #4]
 80049aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80049ae:	bf58      	it	pl
 80049b0:	eba9 0101 	subpl.w	r1, r9, r1
 80049b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80049b8:	bf58      	it	pl
 80049ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80049be:	6022      	str	r2, [r4, #0]
 80049c0:	f04f 0900 	mov.w	r9, #0
 80049c4:	e78a      	b.n	80048dc <_scanf_float+0x188>
 80049c6:	f04f 0a03 	mov.w	sl, #3
 80049ca:	e787      	b.n	80048dc <_scanf_float+0x188>
 80049cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80049d0:	4639      	mov	r1, r7
 80049d2:	4640      	mov	r0, r8
 80049d4:	4798      	blx	r3
 80049d6:	2800      	cmp	r0, #0
 80049d8:	f43f aedf 	beq.w	800479a <_scanf_float+0x46>
 80049dc:	e6ea      	b.n	80047b4 <_scanf_float+0x60>
 80049de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049e6:	463a      	mov	r2, r7
 80049e8:	4640      	mov	r0, r8
 80049ea:	4798      	blx	r3
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	6123      	str	r3, [r4, #16]
 80049f2:	e6ec      	b.n	80047ce <_scanf_float+0x7a>
 80049f4:	1e6b      	subs	r3, r5, #1
 80049f6:	2b06      	cmp	r3, #6
 80049f8:	d825      	bhi.n	8004a46 <_scanf_float+0x2f2>
 80049fa:	2d02      	cmp	r5, #2
 80049fc:	d836      	bhi.n	8004a6c <_scanf_float+0x318>
 80049fe:	455e      	cmp	r6, fp
 8004a00:	f67f aee8 	bls.w	80047d4 <_scanf_float+0x80>
 8004a04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a0c:	463a      	mov	r2, r7
 8004a0e:	4640      	mov	r0, r8
 8004a10:	4798      	blx	r3
 8004a12:	6923      	ldr	r3, [r4, #16]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	6123      	str	r3, [r4, #16]
 8004a18:	e7f1      	b.n	80049fe <_scanf_float+0x2aa>
 8004a1a:	9802      	ldr	r0, [sp, #8]
 8004a1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a20:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004a24:	9002      	str	r0, [sp, #8]
 8004a26:	463a      	mov	r2, r7
 8004a28:	4640      	mov	r0, r8
 8004a2a:	4798      	blx	r3
 8004a2c:	6923      	ldr	r3, [r4, #16]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	6123      	str	r3, [r4, #16]
 8004a32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a36:	fa5f fa8a 	uxtb.w	sl, sl
 8004a3a:	f1ba 0f02 	cmp.w	sl, #2
 8004a3e:	d1ec      	bne.n	8004a1a <_scanf_float+0x2c6>
 8004a40:	3d03      	subs	r5, #3
 8004a42:	b2ed      	uxtb	r5, r5
 8004a44:	1b76      	subs	r6, r6, r5
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	05da      	lsls	r2, r3, #23
 8004a4a:	d52f      	bpl.n	8004aac <_scanf_float+0x358>
 8004a4c:	055b      	lsls	r3, r3, #21
 8004a4e:	d510      	bpl.n	8004a72 <_scanf_float+0x31e>
 8004a50:	455e      	cmp	r6, fp
 8004a52:	f67f aebf 	bls.w	80047d4 <_scanf_float+0x80>
 8004a56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a5e:	463a      	mov	r2, r7
 8004a60:	4640      	mov	r0, r8
 8004a62:	4798      	blx	r3
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	6123      	str	r3, [r4, #16]
 8004a6a:	e7f1      	b.n	8004a50 <_scanf_float+0x2fc>
 8004a6c:	46aa      	mov	sl, r5
 8004a6e:	9602      	str	r6, [sp, #8]
 8004a70:	e7df      	b.n	8004a32 <_scanf_float+0x2de>
 8004a72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004a76:	6923      	ldr	r3, [r4, #16]
 8004a78:	2965      	cmp	r1, #101	; 0x65
 8004a7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004a82:	6123      	str	r3, [r4, #16]
 8004a84:	d00c      	beq.n	8004aa0 <_scanf_float+0x34c>
 8004a86:	2945      	cmp	r1, #69	; 0x45
 8004a88:	d00a      	beq.n	8004aa0 <_scanf_float+0x34c>
 8004a8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a8e:	463a      	mov	r2, r7
 8004a90:	4640      	mov	r0, r8
 8004a92:	4798      	blx	r3
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	1eb5      	subs	r5, r6, #2
 8004a9e:	6123      	str	r3, [r4, #16]
 8004aa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004aa4:	463a      	mov	r2, r7
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	4798      	blx	r3
 8004aaa:	462e      	mov	r6, r5
 8004aac:	6825      	ldr	r5, [r4, #0]
 8004aae:	f015 0510 	ands.w	r5, r5, #16
 8004ab2:	d158      	bne.n	8004b66 <_scanf_float+0x412>
 8004ab4:	7035      	strb	r5, [r6, #0]
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac0:	d11c      	bne.n	8004afc <_scanf_float+0x3a8>
 8004ac2:	9b01      	ldr	r3, [sp, #4]
 8004ac4:	454b      	cmp	r3, r9
 8004ac6:	eba3 0209 	sub.w	r2, r3, r9
 8004aca:	d124      	bne.n	8004b16 <_scanf_float+0x3c2>
 8004acc:	2200      	movs	r2, #0
 8004ace:	4659      	mov	r1, fp
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	f000 fe9b 	bl	800580c <_strtod_r>
 8004ad6:	9b03      	ldr	r3, [sp, #12]
 8004ad8:	6821      	ldr	r1, [r4, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f011 0f02 	tst.w	r1, #2
 8004ae0:	ec57 6b10 	vmov	r6, r7, d0
 8004ae4:	f103 0204 	add.w	r2, r3, #4
 8004ae8:	d020      	beq.n	8004b2c <_scanf_float+0x3d8>
 8004aea:	9903      	ldr	r1, [sp, #12]
 8004aec:	600a      	str	r2, [r1, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	e9c3 6700 	strd	r6, r7, [r3]
 8004af4:	68e3      	ldr	r3, [r4, #12]
 8004af6:	3301      	adds	r3, #1
 8004af8:	60e3      	str	r3, [r4, #12]
 8004afa:	e66c      	b.n	80047d6 <_scanf_float+0x82>
 8004afc:	9b04      	ldr	r3, [sp, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0e4      	beq.n	8004acc <_scanf_float+0x378>
 8004b02:	9905      	ldr	r1, [sp, #20]
 8004b04:	230a      	movs	r3, #10
 8004b06:	462a      	mov	r2, r5
 8004b08:	3101      	adds	r1, #1
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	f000 ff08 	bl	8005920 <_strtol_r>
 8004b10:	9b04      	ldr	r3, [sp, #16]
 8004b12:	9e05      	ldr	r6, [sp, #20]
 8004b14:	1ac2      	subs	r2, r0, r3
 8004b16:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004b1a:	429e      	cmp	r6, r3
 8004b1c:	bf28      	it	cs
 8004b1e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004b22:	4912      	ldr	r1, [pc, #72]	; (8004b6c <_scanf_float+0x418>)
 8004b24:	4630      	mov	r0, r6
 8004b26:	f000 f82b 	bl	8004b80 <siprintf>
 8004b2a:	e7cf      	b.n	8004acc <_scanf_float+0x378>
 8004b2c:	f011 0f04 	tst.w	r1, #4
 8004b30:	9903      	ldr	r1, [sp, #12]
 8004b32:	600a      	str	r2, [r1, #0]
 8004b34:	d1db      	bne.n	8004aee <_scanf_float+0x39a>
 8004b36:	f8d3 8000 	ldr.w	r8, [r3]
 8004b3a:	ee10 2a10 	vmov	r2, s0
 8004b3e:	ee10 0a10 	vmov	r0, s0
 8004b42:	463b      	mov	r3, r7
 8004b44:	4639      	mov	r1, r7
 8004b46:	f7fb fff9 	bl	8000b3c <__aeabi_dcmpun>
 8004b4a:	b128      	cbz	r0, 8004b58 <_scanf_float+0x404>
 8004b4c:	4808      	ldr	r0, [pc, #32]	; (8004b70 <_scanf_float+0x41c>)
 8004b4e:	f000 f811 	bl	8004b74 <nanf>
 8004b52:	ed88 0a00 	vstr	s0, [r8]
 8004b56:	e7cd      	b.n	8004af4 <_scanf_float+0x3a0>
 8004b58:	4630      	mov	r0, r6
 8004b5a:	4639      	mov	r1, r7
 8004b5c:	f7fc f84c 	bl	8000bf8 <__aeabi_d2f>
 8004b60:	f8c8 0000 	str.w	r0, [r8]
 8004b64:	e7c6      	b.n	8004af4 <_scanf_float+0x3a0>
 8004b66:	2500      	movs	r5, #0
 8004b68:	e635      	b.n	80047d6 <_scanf_float+0x82>
 8004b6a:	bf00      	nop
 8004b6c:	08008748 	.word	0x08008748
 8004b70:	08008b60 	.word	0x08008b60

08004b74 <nanf>:
 8004b74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004b7c <nanf+0x8>
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	7fc00000 	.word	0x7fc00000

08004b80 <siprintf>:
 8004b80:	b40e      	push	{r1, r2, r3}
 8004b82:	b500      	push	{lr}
 8004b84:	b09c      	sub	sp, #112	; 0x70
 8004b86:	ab1d      	add	r3, sp, #116	; 0x74
 8004b88:	9002      	str	r0, [sp, #8]
 8004b8a:	9006      	str	r0, [sp, #24]
 8004b8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b90:	4809      	ldr	r0, [pc, #36]	; (8004bb8 <siprintf+0x38>)
 8004b92:	9107      	str	r1, [sp, #28]
 8004b94:	9104      	str	r1, [sp, #16]
 8004b96:	4909      	ldr	r1, [pc, #36]	; (8004bbc <siprintf+0x3c>)
 8004b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b9c:	9105      	str	r1, [sp, #20]
 8004b9e:	6800      	ldr	r0, [r0, #0]
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	a902      	add	r1, sp, #8
 8004ba4:	f002 fea4 	bl	80078f0 <_svfiprintf_r>
 8004ba8:	9b02      	ldr	r3, [sp, #8]
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	b01c      	add	sp, #112	; 0x70
 8004bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bb4:	b003      	add	sp, #12
 8004bb6:	4770      	bx	lr
 8004bb8:	2000000c 	.word	0x2000000c
 8004bbc:	ffff0208 	.word	0xffff0208

08004bc0 <sulp>:
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	460d      	mov	r5, r1
 8004bc6:	ec45 4b10 	vmov	d0, r4, r5
 8004bca:	4616      	mov	r6, r2
 8004bcc:	f002 fc2c 	bl	8007428 <__ulp>
 8004bd0:	ec51 0b10 	vmov	r0, r1, d0
 8004bd4:	b17e      	cbz	r6, 8004bf6 <sulp+0x36>
 8004bd6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004bda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	dd09      	ble.n	8004bf6 <sulp+0x36>
 8004be2:	051b      	lsls	r3, r3, #20
 8004be4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004be8:	2400      	movs	r4, #0
 8004bea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004bee:	4622      	mov	r2, r4
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	f7fb fd09 	bl	8000608 <__aeabi_dmul>
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}

08004bf8 <_strtod_l>:
 8004bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfc:	b0a3      	sub	sp, #140	; 0x8c
 8004bfe:	461f      	mov	r7, r3
 8004c00:	2300      	movs	r3, #0
 8004c02:	931e      	str	r3, [sp, #120]	; 0x78
 8004c04:	4ba4      	ldr	r3, [pc, #656]	; (8004e98 <_strtod_l+0x2a0>)
 8004c06:	9219      	str	r2, [sp, #100]	; 0x64
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	9307      	str	r3, [sp, #28]
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	4688      	mov	r8, r1
 8004c12:	f7fb fae5 	bl	80001e0 <strlen>
 8004c16:	f04f 0a00 	mov.w	sl, #0
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	f04f 0b00 	mov.w	fp, #0
 8004c20:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004c24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c26:	781a      	ldrb	r2, [r3, #0]
 8004c28:	2a2b      	cmp	r2, #43	; 0x2b
 8004c2a:	d04c      	beq.n	8004cc6 <_strtod_l+0xce>
 8004c2c:	d839      	bhi.n	8004ca2 <_strtod_l+0xaa>
 8004c2e:	2a0d      	cmp	r2, #13
 8004c30:	d832      	bhi.n	8004c98 <_strtod_l+0xa0>
 8004c32:	2a08      	cmp	r2, #8
 8004c34:	d832      	bhi.n	8004c9c <_strtod_l+0xa4>
 8004c36:	2a00      	cmp	r2, #0
 8004c38:	d03c      	beq.n	8004cb4 <_strtod_l+0xbc>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	930e      	str	r3, [sp, #56]	; 0x38
 8004c3e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004c40:	7833      	ldrb	r3, [r6, #0]
 8004c42:	2b30      	cmp	r3, #48	; 0x30
 8004c44:	f040 80b4 	bne.w	8004db0 <_strtod_l+0x1b8>
 8004c48:	7873      	ldrb	r3, [r6, #1]
 8004c4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004c4e:	2b58      	cmp	r3, #88	; 0x58
 8004c50:	d16c      	bne.n	8004d2c <_strtod_l+0x134>
 8004c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	ab1e      	add	r3, sp, #120	; 0x78
 8004c58:	9702      	str	r7, [sp, #8]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	4a8f      	ldr	r2, [pc, #572]	; (8004e9c <_strtod_l+0x2a4>)
 8004c5e:	ab1f      	add	r3, sp, #124	; 0x7c
 8004c60:	a91d      	add	r1, sp, #116	; 0x74
 8004c62:	4620      	mov	r0, r4
 8004c64:	f001 fd40 	bl	80066e8 <__gethex>
 8004c68:	f010 0707 	ands.w	r7, r0, #7
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	d005      	beq.n	8004c7c <_strtod_l+0x84>
 8004c70:	2f06      	cmp	r7, #6
 8004c72:	d12a      	bne.n	8004cca <_strtod_l+0xd2>
 8004c74:	3601      	adds	r6, #1
 8004c76:	2300      	movs	r3, #0
 8004c78:	961d      	str	r6, [sp, #116]	; 0x74
 8004c7a:	930e      	str	r3, [sp, #56]	; 0x38
 8004c7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f040 8596 	bne.w	80057b0 <_strtod_l+0xbb8>
 8004c84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c86:	b1db      	cbz	r3, 8004cc0 <_strtod_l+0xc8>
 8004c88:	4652      	mov	r2, sl
 8004c8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004c8e:	ec43 2b10 	vmov	d0, r2, r3
 8004c92:	b023      	add	sp, #140	; 0x8c
 8004c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c98:	2a20      	cmp	r2, #32
 8004c9a:	d1ce      	bne.n	8004c3a <_strtod_l+0x42>
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	931d      	str	r3, [sp, #116]	; 0x74
 8004ca0:	e7c0      	b.n	8004c24 <_strtod_l+0x2c>
 8004ca2:	2a2d      	cmp	r2, #45	; 0x2d
 8004ca4:	d1c9      	bne.n	8004c3a <_strtod_l+0x42>
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	920e      	str	r2, [sp, #56]	; 0x38
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	921d      	str	r2, [sp, #116]	; 0x74
 8004cae:	785b      	ldrb	r3, [r3, #1]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1c4      	bne.n	8004c3e <_strtod_l+0x46>
 8004cb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004cb6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f040 8576 	bne.w	80057ac <_strtod_l+0xbb4>
 8004cc0:	4652      	mov	r2, sl
 8004cc2:	465b      	mov	r3, fp
 8004cc4:	e7e3      	b.n	8004c8e <_strtod_l+0x96>
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	e7ee      	b.n	8004ca8 <_strtod_l+0xb0>
 8004cca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004ccc:	b13a      	cbz	r2, 8004cde <_strtod_l+0xe6>
 8004cce:	2135      	movs	r1, #53	; 0x35
 8004cd0:	a820      	add	r0, sp, #128	; 0x80
 8004cd2:	f002 fcb4 	bl	800763e <__copybits>
 8004cd6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f002 f879 	bl	8006dd0 <_Bfree>
 8004cde:	3f01      	subs	r7, #1
 8004ce0:	2f05      	cmp	r7, #5
 8004ce2:	d807      	bhi.n	8004cf4 <_strtod_l+0xfc>
 8004ce4:	e8df f007 	tbb	[pc, r7]
 8004ce8:	1d180b0e 	.word	0x1d180b0e
 8004cec:	030e      	.short	0x030e
 8004cee:	f04f 0b00 	mov.w	fp, #0
 8004cf2:	46da      	mov	sl, fp
 8004cf4:	0728      	lsls	r0, r5, #28
 8004cf6:	d5c1      	bpl.n	8004c7c <_strtod_l+0x84>
 8004cf8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004cfc:	e7be      	b.n	8004c7c <_strtod_l+0x84>
 8004cfe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8004d02:	e7f7      	b.n	8004cf4 <_strtod_l+0xfc>
 8004d04:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8004d08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004d0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004d12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004d16:	e7ed      	b.n	8004cf4 <_strtod_l+0xfc>
 8004d18:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004ea0 <_strtod_l+0x2a8>
 8004d1c:	f04f 0a00 	mov.w	sl, #0
 8004d20:	e7e8      	b.n	8004cf4 <_strtod_l+0xfc>
 8004d22:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004d26:	f04f 3aff 	mov.w	sl, #4294967295
 8004d2a:	e7e3      	b.n	8004cf4 <_strtod_l+0xfc>
 8004d2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	921d      	str	r2, [sp, #116]	; 0x74
 8004d32:	785b      	ldrb	r3, [r3, #1]
 8004d34:	2b30      	cmp	r3, #48	; 0x30
 8004d36:	d0f9      	beq.n	8004d2c <_strtod_l+0x134>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d09f      	beq.n	8004c7c <_strtod_l+0x84>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f04f 0900 	mov.w	r9, #0
 8004d42:	9304      	str	r3, [sp, #16]
 8004d44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d46:	930a      	str	r3, [sp, #40]	; 0x28
 8004d48:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004d4c:	464f      	mov	r7, r9
 8004d4e:	220a      	movs	r2, #10
 8004d50:	981d      	ldr	r0, [sp, #116]	; 0x74
 8004d52:	7806      	ldrb	r6, [r0, #0]
 8004d54:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004d58:	b2d9      	uxtb	r1, r3
 8004d5a:	2909      	cmp	r1, #9
 8004d5c:	d92a      	bls.n	8004db4 <_strtod_l+0x1bc>
 8004d5e:	9907      	ldr	r1, [sp, #28]
 8004d60:	462a      	mov	r2, r5
 8004d62:	f002 fedd 	bl	8007b20 <strncmp>
 8004d66:	b398      	cbz	r0, 8004dd0 <_strtod_l+0x1d8>
 8004d68:	2000      	movs	r0, #0
 8004d6a:	4633      	mov	r3, r6
 8004d6c:	463d      	mov	r5, r7
 8004d6e:	9007      	str	r0, [sp, #28]
 8004d70:	4602      	mov	r2, r0
 8004d72:	2b65      	cmp	r3, #101	; 0x65
 8004d74:	d001      	beq.n	8004d7a <_strtod_l+0x182>
 8004d76:	2b45      	cmp	r3, #69	; 0x45
 8004d78:	d118      	bne.n	8004dac <_strtod_l+0x1b4>
 8004d7a:	b91d      	cbnz	r5, 8004d84 <_strtod_l+0x18c>
 8004d7c:	9b04      	ldr	r3, [sp, #16]
 8004d7e:	4303      	orrs	r3, r0
 8004d80:	d098      	beq.n	8004cb4 <_strtod_l+0xbc>
 8004d82:	2500      	movs	r5, #0
 8004d84:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004d88:	f108 0301 	add.w	r3, r8, #1
 8004d8c:	931d      	str	r3, [sp, #116]	; 0x74
 8004d8e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004d92:	2b2b      	cmp	r3, #43	; 0x2b
 8004d94:	d075      	beq.n	8004e82 <_strtod_l+0x28a>
 8004d96:	2b2d      	cmp	r3, #45	; 0x2d
 8004d98:	d07b      	beq.n	8004e92 <_strtod_l+0x29a>
 8004d9a:	f04f 0c00 	mov.w	ip, #0
 8004d9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004da2:	2909      	cmp	r1, #9
 8004da4:	f240 8082 	bls.w	8004eac <_strtod_l+0x2b4>
 8004da8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004dac:	2600      	movs	r6, #0
 8004dae:	e09d      	b.n	8004eec <_strtod_l+0x2f4>
 8004db0:	2300      	movs	r3, #0
 8004db2:	e7c4      	b.n	8004d3e <_strtod_l+0x146>
 8004db4:	2f08      	cmp	r7, #8
 8004db6:	bfd8      	it	le
 8004db8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004dba:	f100 0001 	add.w	r0, r0, #1
 8004dbe:	bfda      	itte	le
 8004dc0:	fb02 3301 	mlale	r3, r2, r1, r3
 8004dc4:	9309      	strle	r3, [sp, #36]	; 0x24
 8004dc6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004dca:	3701      	adds	r7, #1
 8004dcc:	901d      	str	r0, [sp, #116]	; 0x74
 8004dce:	e7bf      	b.n	8004d50 <_strtod_l+0x158>
 8004dd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004dd2:	195a      	adds	r2, r3, r5
 8004dd4:	921d      	str	r2, [sp, #116]	; 0x74
 8004dd6:	5d5b      	ldrb	r3, [r3, r5]
 8004dd8:	2f00      	cmp	r7, #0
 8004dda:	d037      	beq.n	8004e4c <_strtod_l+0x254>
 8004ddc:	9007      	str	r0, [sp, #28]
 8004dde:	463d      	mov	r5, r7
 8004de0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004de4:	2a09      	cmp	r2, #9
 8004de6:	d912      	bls.n	8004e0e <_strtod_l+0x216>
 8004de8:	2201      	movs	r2, #1
 8004dea:	e7c2      	b.n	8004d72 <_strtod_l+0x17a>
 8004dec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	921d      	str	r2, [sp, #116]	; 0x74
 8004df2:	785b      	ldrb	r3, [r3, #1]
 8004df4:	3001      	adds	r0, #1
 8004df6:	2b30      	cmp	r3, #48	; 0x30
 8004df8:	d0f8      	beq.n	8004dec <_strtod_l+0x1f4>
 8004dfa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004dfe:	2a08      	cmp	r2, #8
 8004e00:	f200 84db 	bhi.w	80057ba <_strtod_l+0xbc2>
 8004e04:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004e06:	9007      	str	r0, [sp, #28]
 8004e08:	2000      	movs	r0, #0
 8004e0a:	920a      	str	r2, [sp, #40]	; 0x28
 8004e0c:	4605      	mov	r5, r0
 8004e0e:	3b30      	subs	r3, #48	; 0x30
 8004e10:	f100 0201 	add.w	r2, r0, #1
 8004e14:	d014      	beq.n	8004e40 <_strtod_l+0x248>
 8004e16:	9907      	ldr	r1, [sp, #28]
 8004e18:	4411      	add	r1, r2
 8004e1a:	9107      	str	r1, [sp, #28]
 8004e1c:	462a      	mov	r2, r5
 8004e1e:	eb00 0e05 	add.w	lr, r0, r5
 8004e22:	210a      	movs	r1, #10
 8004e24:	4572      	cmp	r2, lr
 8004e26:	d113      	bne.n	8004e50 <_strtod_l+0x258>
 8004e28:	182a      	adds	r2, r5, r0
 8004e2a:	2a08      	cmp	r2, #8
 8004e2c:	f105 0501 	add.w	r5, r5, #1
 8004e30:	4405      	add	r5, r0
 8004e32:	dc1c      	bgt.n	8004e6e <_strtod_l+0x276>
 8004e34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e36:	220a      	movs	r2, #10
 8004e38:	fb02 3301 	mla	r3, r2, r1, r3
 8004e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e3e:	2200      	movs	r2, #0
 8004e40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e42:	1c59      	adds	r1, r3, #1
 8004e44:	911d      	str	r1, [sp, #116]	; 0x74
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	4610      	mov	r0, r2
 8004e4a:	e7c9      	b.n	8004de0 <_strtod_l+0x1e8>
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	e7d2      	b.n	8004df6 <_strtod_l+0x1fe>
 8004e50:	2a08      	cmp	r2, #8
 8004e52:	dc04      	bgt.n	8004e5e <_strtod_l+0x266>
 8004e54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004e56:	434e      	muls	r6, r1
 8004e58:	9609      	str	r6, [sp, #36]	; 0x24
 8004e5a:	3201      	adds	r2, #1
 8004e5c:	e7e2      	b.n	8004e24 <_strtod_l+0x22c>
 8004e5e:	f102 0c01 	add.w	ip, r2, #1
 8004e62:	f1bc 0f10 	cmp.w	ip, #16
 8004e66:	bfd8      	it	le
 8004e68:	fb01 f909 	mulle.w	r9, r1, r9
 8004e6c:	e7f5      	b.n	8004e5a <_strtod_l+0x262>
 8004e6e:	2d10      	cmp	r5, #16
 8004e70:	bfdc      	itt	le
 8004e72:	220a      	movle	r2, #10
 8004e74:	fb02 3909 	mlale	r9, r2, r9, r3
 8004e78:	e7e1      	b.n	8004e3e <_strtod_l+0x246>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	9307      	str	r3, [sp, #28]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	e77c      	b.n	8004d7c <_strtod_l+0x184>
 8004e82:	f04f 0c00 	mov.w	ip, #0
 8004e86:	f108 0302 	add.w	r3, r8, #2
 8004e8a:	931d      	str	r3, [sp, #116]	; 0x74
 8004e8c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004e90:	e785      	b.n	8004d9e <_strtod_l+0x1a6>
 8004e92:	f04f 0c01 	mov.w	ip, #1
 8004e96:	e7f6      	b.n	8004e86 <_strtod_l+0x28e>
 8004e98:	080089a0 	.word	0x080089a0
 8004e9c:	08008750 	.word	0x08008750
 8004ea0:	7ff00000 	.word	0x7ff00000
 8004ea4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004ea6:	1c59      	adds	r1, r3, #1
 8004ea8:	911d      	str	r1, [sp, #116]	; 0x74
 8004eaa:	785b      	ldrb	r3, [r3, #1]
 8004eac:	2b30      	cmp	r3, #48	; 0x30
 8004eae:	d0f9      	beq.n	8004ea4 <_strtod_l+0x2ac>
 8004eb0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004eb4:	2908      	cmp	r1, #8
 8004eb6:	f63f af79 	bhi.w	8004dac <_strtod_l+0x1b4>
 8004eba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004ebe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004ec0:	9308      	str	r3, [sp, #32]
 8004ec2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004ec4:	1c59      	adds	r1, r3, #1
 8004ec6:	911d      	str	r1, [sp, #116]	; 0x74
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004ece:	2e09      	cmp	r6, #9
 8004ed0:	d937      	bls.n	8004f42 <_strtod_l+0x34a>
 8004ed2:	9e08      	ldr	r6, [sp, #32]
 8004ed4:	1b89      	subs	r1, r1, r6
 8004ed6:	2908      	cmp	r1, #8
 8004ed8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004edc:	dc02      	bgt.n	8004ee4 <_strtod_l+0x2ec>
 8004ede:	4576      	cmp	r6, lr
 8004ee0:	bfa8      	it	ge
 8004ee2:	4676      	movge	r6, lr
 8004ee4:	f1bc 0f00 	cmp.w	ip, #0
 8004ee8:	d000      	beq.n	8004eec <_strtod_l+0x2f4>
 8004eea:	4276      	negs	r6, r6
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	d14f      	bne.n	8004f90 <_strtod_l+0x398>
 8004ef0:	9904      	ldr	r1, [sp, #16]
 8004ef2:	4301      	orrs	r1, r0
 8004ef4:	f47f aec2 	bne.w	8004c7c <_strtod_l+0x84>
 8004ef8:	2a00      	cmp	r2, #0
 8004efa:	f47f aedb 	bne.w	8004cb4 <_strtod_l+0xbc>
 8004efe:	2b69      	cmp	r3, #105	; 0x69
 8004f00:	d027      	beq.n	8004f52 <_strtod_l+0x35a>
 8004f02:	dc24      	bgt.n	8004f4e <_strtod_l+0x356>
 8004f04:	2b49      	cmp	r3, #73	; 0x49
 8004f06:	d024      	beq.n	8004f52 <_strtod_l+0x35a>
 8004f08:	2b4e      	cmp	r3, #78	; 0x4e
 8004f0a:	f47f aed3 	bne.w	8004cb4 <_strtod_l+0xbc>
 8004f0e:	499e      	ldr	r1, [pc, #632]	; (8005188 <_strtod_l+0x590>)
 8004f10:	a81d      	add	r0, sp, #116	; 0x74
 8004f12:	f001 fe41 	bl	8006b98 <__match>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	f43f aecc 	beq.w	8004cb4 <_strtod_l+0xbc>
 8004f1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b28      	cmp	r3, #40	; 0x28
 8004f22:	d12d      	bne.n	8004f80 <_strtod_l+0x388>
 8004f24:	4999      	ldr	r1, [pc, #612]	; (800518c <_strtod_l+0x594>)
 8004f26:	aa20      	add	r2, sp, #128	; 0x80
 8004f28:	a81d      	add	r0, sp, #116	; 0x74
 8004f2a:	f001 fe49 	bl	8006bc0 <__hexnan>
 8004f2e:	2805      	cmp	r0, #5
 8004f30:	d126      	bne.n	8004f80 <_strtod_l+0x388>
 8004f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f34:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8004f38:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004f3c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004f40:	e69c      	b.n	8004c7c <_strtod_l+0x84>
 8004f42:	210a      	movs	r1, #10
 8004f44:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004f48:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004f4c:	e7b9      	b.n	8004ec2 <_strtod_l+0x2ca>
 8004f4e:	2b6e      	cmp	r3, #110	; 0x6e
 8004f50:	e7db      	b.n	8004f0a <_strtod_l+0x312>
 8004f52:	498f      	ldr	r1, [pc, #572]	; (8005190 <_strtod_l+0x598>)
 8004f54:	a81d      	add	r0, sp, #116	; 0x74
 8004f56:	f001 fe1f 	bl	8006b98 <__match>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	f43f aeaa 	beq.w	8004cb4 <_strtod_l+0xbc>
 8004f60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f62:	498c      	ldr	r1, [pc, #560]	; (8005194 <_strtod_l+0x59c>)
 8004f64:	3b01      	subs	r3, #1
 8004f66:	a81d      	add	r0, sp, #116	; 0x74
 8004f68:	931d      	str	r3, [sp, #116]	; 0x74
 8004f6a:	f001 fe15 	bl	8006b98 <__match>
 8004f6e:	b910      	cbnz	r0, 8004f76 <_strtod_l+0x37e>
 8004f70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f72:	3301      	adds	r3, #1
 8004f74:	931d      	str	r3, [sp, #116]	; 0x74
 8004f76:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80051a4 <_strtod_l+0x5ac>
 8004f7a:	f04f 0a00 	mov.w	sl, #0
 8004f7e:	e67d      	b.n	8004c7c <_strtod_l+0x84>
 8004f80:	4885      	ldr	r0, [pc, #532]	; (8005198 <_strtod_l+0x5a0>)
 8004f82:	f002 fdb5 	bl	8007af0 <nan>
 8004f86:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004f8a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004f8e:	e675      	b.n	8004c7c <_strtod_l+0x84>
 8004f90:	9b07      	ldr	r3, [sp, #28]
 8004f92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f94:	1af3      	subs	r3, r6, r3
 8004f96:	2f00      	cmp	r7, #0
 8004f98:	bf08      	it	eq
 8004f9a:	462f      	moveq	r7, r5
 8004f9c:	2d10      	cmp	r5, #16
 8004f9e:	9308      	str	r3, [sp, #32]
 8004fa0:	46a8      	mov	r8, r5
 8004fa2:	bfa8      	it	ge
 8004fa4:	f04f 0810 	movge.w	r8, #16
 8004fa8:	f7fb fab4 	bl	8000514 <__aeabi_ui2d>
 8004fac:	2d09      	cmp	r5, #9
 8004fae:	4682      	mov	sl, r0
 8004fb0:	468b      	mov	fp, r1
 8004fb2:	dd13      	ble.n	8004fdc <_strtod_l+0x3e4>
 8004fb4:	4b79      	ldr	r3, [pc, #484]	; (800519c <_strtod_l+0x5a4>)
 8004fb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004fba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004fbe:	f7fb fb23 	bl	8000608 <__aeabi_dmul>
 8004fc2:	4682      	mov	sl, r0
 8004fc4:	4648      	mov	r0, r9
 8004fc6:	468b      	mov	fp, r1
 8004fc8:	f7fb faa4 	bl	8000514 <__aeabi_ui2d>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4650      	mov	r0, sl
 8004fd2:	4659      	mov	r1, fp
 8004fd4:	f7fb f962 	bl	800029c <__adddf3>
 8004fd8:	4682      	mov	sl, r0
 8004fda:	468b      	mov	fp, r1
 8004fdc:	2d0f      	cmp	r5, #15
 8004fde:	dc38      	bgt.n	8005052 <_strtod_l+0x45a>
 8004fe0:	9b08      	ldr	r3, [sp, #32]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f43f ae4a 	beq.w	8004c7c <_strtod_l+0x84>
 8004fe8:	dd24      	ble.n	8005034 <_strtod_l+0x43c>
 8004fea:	2b16      	cmp	r3, #22
 8004fec:	dc0b      	bgt.n	8005006 <_strtod_l+0x40e>
 8004fee:	4d6b      	ldr	r5, [pc, #428]	; (800519c <_strtod_l+0x5a4>)
 8004ff0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8004ff4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004ff8:	4652      	mov	r2, sl
 8004ffa:	465b      	mov	r3, fp
 8004ffc:	f7fb fb04 	bl	8000608 <__aeabi_dmul>
 8005000:	4682      	mov	sl, r0
 8005002:	468b      	mov	fp, r1
 8005004:	e63a      	b.n	8004c7c <_strtod_l+0x84>
 8005006:	9a08      	ldr	r2, [sp, #32]
 8005008:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800500c:	4293      	cmp	r3, r2
 800500e:	db20      	blt.n	8005052 <_strtod_l+0x45a>
 8005010:	4c62      	ldr	r4, [pc, #392]	; (800519c <_strtod_l+0x5a4>)
 8005012:	f1c5 050f 	rsb	r5, r5, #15
 8005016:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800501a:	4652      	mov	r2, sl
 800501c:	465b      	mov	r3, fp
 800501e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005022:	f7fb faf1 	bl	8000608 <__aeabi_dmul>
 8005026:	9b08      	ldr	r3, [sp, #32]
 8005028:	1b5d      	subs	r5, r3, r5
 800502a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800502e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005032:	e7e3      	b.n	8004ffc <_strtod_l+0x404>
 8005034:	9b08      	ldr	r3, [sp, #32]
 8005036:	3316      	adds	r3, #22
 8005038:	db0b      	blt.n	8005052 <_strtod_l+0x45a>
 800503a:	9b07      	ldr	r3, [sp, #28]
 800503c:	4a57      	ldr	r2, [pc, #348]	; (800519c <_strtod_l+0x5a4>)
 800503e:	1b9e      	subs	r6, r3, r6
 8005040:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005044:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005048:	4650      	mov	r0, sl
 800504a:	4659      	mov	r1, fp
 800504c:	f7fb fc06 	bl	800085c <__aeabi_ddiv>
 8005050:	e7d6      	b.n	8005000 <_strtod_l+0x408>
 8005052:	9b08      	ldr	r3, [sp, #32]
 8005054:	eba5 0808 	sub.w	r8, r5, r8
 8005058:	4498      	add	r8, r3
 800505a:	f1b8 0f00 	cmp.w	r8, #0
 800505e:	dd71      	ble.n	8005144 <_strtod_l+0x54c>
 8005060:	f018 030f 	ands.w	r3, r8, #15
 8005064:	d00a      	beq.n	800507c <_strtod_l+0x484>
 8005066:	494d      	ldr	r1, [pc, #308]	; (800519c <_strtod_l+0x5a4>)
 8005068:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800506c:	4652      	mov	r2, sl
 800506e:	465b      	mov	r3, fp
 8005070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005074:	f7fb fac8 	bl	8000608 <__aeabi_dmul>
 8005078:	4682      	mov	sl, r0
 800507a:	468b      	mov	fp, r1
 800507c:	f038 080f 	bics.w	r8, r8, #15
 8005080:	d04d      	beq.n	800511e <_strtod_l+0x526>
 8005082:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005086:	dd22      	ble.n	80050ce <_strtod_l+0x4d6>
 8005088:	2500      	movs	r5, #0
 800508a:	462e      	mov	r6, r5
 800508c:	9509      	str	r5, [sp, #36]	; 0x24
 800508e:	9507      	str	r5, [sp, #28]
 8005090:	2322      	movs	r3, #34	; 0x22
 8005092:	f8df b110 	ldr.w	fp, [pc, #272]	; 80051a4 <_strtod_l+0x5ac>
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	f04f 0a00 	mov.w	sl, #0
 800509c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f43f adec 	beq.w	8004c7c <_strtod_l+0x84>
 80050a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80050a6:	4620      	mov	r0, r4
 80050a8:	f001 fe92 	bl	8006dd0 <_Bfree>
 80050ac:	9907      	ldr	r1, [sp, #28]
 80050ae:	4620      	mov	r0, r4
 80050b0:	f001 fe8e 	bl	8006dd0 <_Bfree>
 80050b4:	4631      	mov	r1, r6
 80050b6:	4620      	mov	r0, r4
 80050b8:	f001 fe8a 	bl	8006dd0 <_Bfree>
 80050bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050be:	4620      	mov	r0, r4
 80050c0:	f001 fe86 	bl	8006dd0 <_Bfree>
 80050c4:	4629      	mov	r1, r5
 80050c6:	4620      	mov	r0, r4
 80050c8:	f001 fe82 	bl	8006dd0 <_Bfree>
 80050cc:	e5d6      	b.n	8004c7c <_strtod_l+0x84>
 80050ce:	2300      	movs	r3, #0
 80050d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80050d4:	4650      	mov	r0, sl
 80050d6:	4659      	mov	r1, fp
 80050d8:	4699      	mov	r9, r3
 80050da:	f1b8 0f01 	cmp.w	r8, #1
 80050de:	dc21      	bgt.n	8005124 <_strtod_l+0x52c>
 80050e0:	b10b      	cbz	r3, 80050e6 <_strtod_l+0x4ee>
 80050e2:	4682      	mov	sl, r0
 80050e4:	468b      	mov	fp, r1
 80050e6:	4b2e      	ldr	r3, [pc, #184]	; (80051a0 <_strtod_l+0x5a8>)
 80050e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80050ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80050f0:	4652      	mov	r2, sl
 80050f2:	465b      	mov	r3, fp
 80050f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80050f8:	f7fb fa86 	bl	8000608 <__aeabi_dmul>
 80050fc:	4b29      	ldr	r3, [pc, #164]	; (80051a4 <_strtod_l+0x5ac>)
 80050fe:	460a      	mov	r2, r1
 8005100:	400b      	ands	r3, r1
 8005102:	4929      	ldr	r1, [pc, #164]	; (80051a8 <_strtod_l+0x5b0>)
 8005104:	428b      	cmp	r3, r1
 8005106:	4682      	mov	sl, r0
 8005108:	d8be      	bhi.n	8005088 <_strtod_l+0x490>
 800510a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800510e:	428b      	cmp	r3, r1
 8005110:	bf86      	itte	hi
 8005112:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80051ac <_strtod_l+0x5b4>
 8005116:	f04f 3aff 	movhi.w	sl, #4294967295
 800511a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800511e:	2300      	movs	r3, #0
 8005120:	9304      	str	r3, [sp, #16]
 8005122:	e081      	b.n	8005228 <_strtod_l+0x630>
 8005124:	f018 0f01 	tst.w	r8, #1
 8005128:	d007      	beq.n	800513a <_strtod_l+0x542>
 800512a:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <_strtod_l+0x5a8>)
 800512c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f7fb fa68 	bl	8000608 <__aeabi_dmul>
 8005138:	2301      	movs	r3, #1
 800513a:	f109 0901 	add.w	r9, r9, #1
 800513e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005142:	e7ca      	b.n	80050da <_strtod_l+0x4e2>
 8005144:	d0eb      	beq.n	800511e <_strtod_l+0x526>
 8005146:	f1c8 0800 	rsb	r8, r8, #0
 800514a:	f018 020f 	ands.w	r2, r8, #15
 800514e:	d00a      	beq.n	8005166 <_strtod_l+0x56e>
 8005150:	4b12      	ldr	r3, [pc, #72]	; (800519c <_strtod_l+0x5a4>)
 8005152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005156:	4650      	mov	r0, sl
 8005158:	4659      	mov	r1, fp
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f7fb fb7d 	bl	800085c <__aeabi_ddiv>
 8005162:	4682      	mov	sl, r0
 8005164:	468b      	mov	fp, r1
 8005166:	ea5f 1828 	movs.w	r8, r8, asr #4
 800516a:	d0d8      	beq.n	800511e <_strtod_l+0x526>
 800516c:	f1b8 0f1f 	cmp.w	r8, #31
 8005170:	dd1e      	ble.n	80051b0 <_strtod_l+0x5b8>
 8005172:	2500      	movs	r5, #0
 8005174:	462e      	mov	r6, r5
 8005176:	9509      	str	r5, [sp, #36]	; 0x24
 8005178:	9507      	str	r5, [sp, #28]
 800517a:	2322      	movs	r3, #34	; 0x22
 800517c:	f04f 0a00 	mov.w	sl, #0
 8005180:	f04f 0b00 	mov.w	fp, #0
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	e789      	b.n	800509c <_strtod_l+0x4a4>
 8005188:	08008721 	.word	0x08008721
 800518c:	08008764 	.word	0x08008764
 8005190:	08008719 	.word	0x08008719
 8005194:	080088a4 	.word	0x080088a4
 8005198:	08008b60 	.word	0x08008b60
 800519c:	08008a40 	.word	0x08008a40
 80051a0:	08008a18 	.word	0x08008a18
 80051a4:	7ff00000 	.word	0x7ff00000
 80051a8:	7ca00000 	.word	0x7ca00000
 80051ac:	7fefffff 	.word	0x7fefffff
 80051b0:	f018 0310 	ands.w	r3, r8, #16
 80051b4:	bf18      	it	ne
 80051b6:	236a      	movne	r3, #106	; 0x6a
 80051b8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005570 <_strtod_l+0x978>
 80051bc:	9304      	str	r3, [sp, #16]
 80051be:	4650      	mov	r0, sl
 80051c0:	4659      	mov	r1, fp
 80051c2:	2300      	movs	r3, #0
 80051c4:	f018 0f01 	tst.w	r8, #1
 80051c8:	d004      	beq.n	80051d4 <_strtod_l+0x5dc>
 80051ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 80051ce:	f7fb fa1b 	bl	8000608 <__aeabi_dmul>
 80051d2:	2301      	movs	r3, #1
 80051d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80051d8:	f109 0908 	add.w	r9, r9, #8
 80051dc:	d1f2      	bne.n	80051c4 <_strtod_l+0x5cc>
 80051de:	b10b      	cbz	r3, 80051e4 <_strtod_l+0x5ec>
 80051e0:	4682      	mov	sl, r0
 80051e2:	468b      	mov	fp, r1
 80051e4:	9b04      	ldr	r3, [sp, #16]
 80051e6:	b1bb      	cbz	r3, 8005218 <_strtod_l+0x620>
 80051e8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80051ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	4659      	mov	r1, fp
 80051f4:	dd10      	ble.n	8005218 <_strtod_l+0x620>
 80051f6:	2b1f      	cmp	r3, #31
 80051f8:	f340 8128 	ble.w	800544c <_strtod_l+0x854>
 80051fc:	2b34      	cmp	r3, #52	; 0x34
 80051fe:	bfde      	ittt	le
 8005200:	3b20      	suble	r3, #32
 8005202:	f04f 32ff 	movle.w	r2, #4294967295
 8005206:	fa02 f303 	lslle.w	r3, r2, r3
 800520a:	f04f 0a00 	mov.w	sl, #0
 800520e:	bfcc      	ite	gt
 8005210:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005214:	ea03 0b01 	andle.w	fp, r3, r1
 8005218:	2200      	movs	r2, #0
 800521a:	2300      	movs	r3, #0
 800521c:	4650      	mov	r0, sl
 800521e:	4659      	mov	r1, fp
 8005220:	f7fb fc5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005224:	2800      	cmp	r0, #0
 8005226:	d1a4      	bne.n	8005172 <_strtod_l+0x57a>
 8005228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800522e:	462b      	mov	r3, r5
 8005230:	463a      	mov	r2, r7
 8005232:	4620      	mov	r0, r4
 8005234:	f001 fe38 	bl	8006ea8 <__s2b>
 8005238:	9009      	str	r0, [sp, #36]	; 0x24
 800523a:	2800      	cmp	r0, #0
 800523c:	f43f af24 	beq.w	8005088 <_strtod_l+0x490>
 8005240:	9b07      	ldr	r3, [sp, #28]
 8005242:	1b9e      	subs	r6, r3, r6
 8005244:	9b08      	ldr	r3, [sp, #32]
 8005246:	2b00      	cmp	r3, #0
 8005248:	bfb4      	ite	lt
 800524a:	4633      	movlt	r3, r6
 800524c:	2300      	movge	r3, #0
 800524e:	9310      	str	r3, [sp, #64]	; 0x40
 8005250:	9b08      	ldr	r3, [sp, #32]
 8005252:	2500      	movs	r5, #0
 8005254:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005258:	9318      	str	r3, [sp, #96]	; 0x60
 800525a:	462e      	mov	r6, r5
 800525c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800525e:	4620      	mov	r0, r4
 8005260:	6859      	ldr	r1, [r3, #4]
 8005262:	f001 fd75 	bl	8006d50 <_Balloc>
 8005266:	9007      	str	r0, [sp, #28]
 8005268:	2800      	cmp	r0, #0
 800526a:	f43f af11 	beq.w	8005090 <_strtod_l+0x498>
 800526e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005270:	691a      	ldr	r2, [r3, #16]
 8005272:	3202      	adds	r2, #2
 8005274:	f103 010c 	add.w	r1, r3, #12
 8005278:	0092      	lsls	r2, r2, #2
 800527a:	300c      	adds	r0, #12
 800527c:	f001 fd5a 	bl	8006d34 <memcpy>
 8005280:	ec4b ab10 	vmov	d0, sl, fp
 8005284:	aa20      	add	r2, sp, #128	; 0x80
 8005286:	a91f      	add	r1, sp, #124	; 0x7c
 8005288:	4620      	mov	r0, r4
 800528a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800528e:	f002 f947 	bl	8007520 <__d2b>
 8005292:	901e      	str	r0, [sp, #120]	; 0x78
 8005294:	2800      	cmp	r0, #0
 8005296:	f43f aefb 	beq.w	8005090 <_strtod_l+0x498>
 800529a:	2101      	movs	r1, #1
 800529c:	4620      	mov	r0, r4
 800529e:	f001 fe9d 	bl	8006fdc <__i2b>
 80052a2:	4606      	mov	r6, r0
 80052a4:	2800      	cmp	r0, #0
 80052a6:	f43f aef3 	beq.w	8005090 <_strtod_l+0x498>
 80052aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80052ac:	9904      	ldr	r1, [sp, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bfab      	itete	ge
 80052b2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80052b4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80052b6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80052b8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80052bc:	bfac      	ite	ge
 80052be:	eb03 0902 	addge.w	r9, r3, r2
 80052c2:	1ad7      	sublt	r7, r2, r3
 80052c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052c6:	eba3 0801 	sub.w	r8, r3, r1
 80052ca:	4490      	add	r8, r2
 80052cc:	4ba3      	ldr	r3, [pc, #652]	; (800555c <_strtod_l+0x964>)
 80052ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80052d2:	4598      	cmp	r8, r3
 80052d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80052d8:	f280 80cc 	bge.w	8005474 <_strtod_l+0x87c>
 80052dc:	eba3 0308 	sub.w	r3, r3, r8
 80052e0:	2b1f      	cmp	r3, #31
 80052e2:	eba2 0203 	sub.w	r2, r2, r3
 80052e6:	f04f 0101 	mov.w	r1, #1
 80052ea:	f300 80b6 	bgt.w	800545a <_strtod_l+0x862>
 80052ee:	fa01 f303 	lsl.w	r3, r1, r3
 80052f2:	9311      	str	r3, [sp, #68]	; 0x44
 80052f4:	2300      	movs	r3, #0
 80052f6:	930c      	str	r3, [sp, #48]	; 0x30
 80052f8:	eb09 0802 	add.w	r8, r9, r2
 80052fc:	9b04      	ldr	r3, [sp, #16]
 80052fe:	45c1      	cmp	r9, r8
 8005300:	4417      	add	r7, r2
 8005302:	441f      	add	r7, r3
 8005304:	464b      	mov	r3, r9
 8005306:	bfa8      	it	ge
 8005308:	4643      	movge	r3, r8
 800530a:	42bb      	cmp	r3, r7
 800530c:	bfa8      	it	ge
 800530e:	463b      	movge	r3, r7
 8005310:	2b00      	cmp	r3, #0
 8005312:	bfc2      	ittt	gt
 8005314:	eba8 0803 	subgt.w	r8, r8, r3
 8005318:	1aff      	subgt	r7, r7, r3
 800531a:	eba9 0903 	subgt.w	r9, r9, r3
 800531e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	dd17      	ble.n	8005354 <_strtod_l+0x75c>
 8005324:	4631      	mov	r1, r6
 8005326:	461a      	mov	r2, r3
 8005328:	4620      	mov	r0, r4
 800532a:	f001 ff13 	bl	8007154 <__pow5mult>
 800532e:	4606      	mov	r6, r0
 8005330:	2800      	cmp	r0, #0
 8005332:	f43f aead 	beq.w	8005090 <_strtod_l+0x498>
 8005336:	4601      	mov	r1, r0
 8005338:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800533a:	4620      	mov	r0, r4
 800533c:	f001 fe64 	bl	8007008 <__multiply>
 8005340:	900f      	str	r0, [sp, #60]	; 0x3c
 8005342:	2800      	cmp	r0, #0
 8005344:	f43f aea4 	beq.w	8005090 <_strtod_l+0x498>
 8005348:	991e      	ldr	r1, [sp, #120]	; 0x78
 800534a:	4620      	mov	r0, r4
 800534c:	f001 fd40 	bl	8006dd0 <_Bfree>
 8005350:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005352:	931e      	str	r3, [sp, #120]	; 0x78
 8005354:	f1b8 0f00 	cmp.w	r8, #0
 8005358:	f300 8091 	bgt.w	800547e <_strtod_l+0x886>
 800535c:	9b08      	ldr	r3, [sp, #32]
 800535e:	2b00      	cmp	r3, #0
 8005360:	dd08      	ble.n	8005374 <_strtod_l+0x77c>
 8005362:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005364:	9907      	ldr	r1, [sp, #28]
 8005366:	4620      	mov	r0, r4
 8005368:	f001 fef4 	bl	8007154 <__pow5mult>
 800536c:	9007      	str	r0, [sp, #28]
 800536e:	2800      	cmp	r0, #0
 8005370:	f43f ae8e 	beq.w	8005090 <_strtod_l+0x498>
 8005374:	2f00      	cmp	r7, #0
 8005376:	dd08      	ble.n	800538a <_strtod_l+0x792>
 8005378:	9907      	ldr	r1, [sp, #28]
 800537a:	463a      	mov	r2, r7
 800537c:	4620      	mov	r0, r4
 800537e:	f001 ff43 	bl	8007208 <__lshift>
 8005382:	9007      	str	r0, [sp, #28]
 8005384:	2800      	cmp	r0, #0
 8005386:	f43f ae83 	beq.w	8005090 <_strtod_l+0x498>
 800538a:	f1b9 0f00 	cmp.w	r9, #0
 800538e:	dd08      	ble.n	80053a2 <_strtod_l+0x7aa>
 8005390:	4631      	mov	r1, r6
 8005392:	464a      	mov	r2, r9
 8005394:	4620      	mov	r0, r4
 8005396:	f001 ff37 	bl	8007208 <__lshift>
 800539a:	4606      	mov	r6, r0
 800539c:	2800      	cmp	r0, #0
 800539e:	f43f ae77 	beq.w	8005090 <_strtod_l+0x498>
 80053a2:	9a07      	ldr	r2, [sp, #28]
 80053a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80053a6:	4620      	mov	r0, r4
 80053a8:	f001 ffb6 	bl	8007318 <__mdiff>
 80053ac:	4605      	mov	r5, r0
 80053ae:	2800      	cmp	r0, #0
 80053b0:	f43f ae6e 	beq.w	8005090 <_strtod_l+0x498>
 80053b4:	68c3      	ldr	r3, [r0, #12]
 80053b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80053b8:	2300      	movs	r3, #0
 80053ba:	60c3      	str	r3, [r0, #12]
 80053bc:	4631      	mov	r1, r6
 80053be:	f001 ff8f 	bl	80072e0 <__mcmp>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	da65      	bge.n	8005492 <_strtod_l+0x89a>
 80053c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053c8:	ea53 030a 	orrs.w	r3, r3, sl
 80053cc:	f040 8087 	bne.w	80054de <_strtod_l+0x8e6>
 80053d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f040 8082 	bne.w	80054de <_strtod_l+0x8e6>
 80053da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80053de:	0d1b      	lsrs	r3, r3, #20
 80053e0:	051b      	lsls	r3, r3, #20
 80053e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80053e6:	d97a      	bls.n	80054de <_strtod_l+0x8e6>
 80053e8:	696b      	ldr	r3, [r5, #20]
 80053ea:	b913      	cbnz	r3, 80053f2 <_strtod_l+0x7fa>
 80053ec:	692b      	ldr	r3, [r5, #16]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	dd75      	ble.n	80054de <_strtod_l+0x8e6>
 80053f2:	4629      	mov	r1, r5
 80053f4:	2201      	movs	r2, #1
 80053f6:	4620      	mov	r0, r4
 80053f8:	f001 ff06 	bl	8007208 <__lshift>
 80053fc:	4631      	mov	r1, r6
 80053fe:	4605      	mov	r5, r0
 8005400:	f001 ff6e 	bl	80072e0 <__mcmp>
 8005404:	2800      	cmp	r0, #0
 8005406:	dd6a      	ble.n	80054de <_strtod_l+0x8e6>
 8005408:	9904      	ldr	r1, [sp, #16]
 800540a:	4a55      	ldr	r2, [pc, #340]	; (8005560 <_strtod_l+0x968>)
 800540c:	465b      	mov	r3, fp
 800540e:	2900      	cmp	r1, #0
 8005410:	f000 8085 	beq.w	800551e <_strtod_l+0x926>
 8005414:	ea02 010b 	and.w	r1, r2, fp
 8005418:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800541c:	dc7f      	bgt.n	800551e <_strtod_l+0x926>
 800541e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005422:	f77f aeaa 	ble.w	800517a <_strtod_l+0x582>
 8005426:	4a4f      	ldr	r2, [pc, #316]	; (8005564 <_strtod_l+0x96c>)
 8005428:	2300      	movs	r3, #0
 800542a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800542e:	4650      	mov	r0, sl
 8005430:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005434:	4659      	mov	r1, fp
 8005436:	f7fb f8e7 	bl	8000608 <__aeabi_dmul>
 800543a:	460b      	mov	r3, r1
 800543c:	4303      	orrs	r3, r0
 800543e:	bf08      	it	eq
 8005440:	2322      	moveq	r3, #34	; 0x22
 8005442:	4682      	mov	sl, r0
 8005444:	468b      	mov	fp, r1
 8005446:	bf08      	it	eq
 8005448:	6023      	streq	r3, [r4, #0]
 800544a:	e62b      	b.n	80050a4 <_strtod_l+0x4ac>
 800544c:	f04f 32ff 	mov.w	r2, #4294967295
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	ea03 0a0a 	and.w	sl, r3, sl
 8005458:	e6de      	b.n	8005218 <_strtod_l+0x620>
 800545a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800545e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005462:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005466:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800546a:	fa01 f308 	lsl.w	r3, r1, r8
 800546e:	930c      	str	r3, [sp, #48]	; 0x30
 8005470:	9111      	str	r1, [sp, #68]	; 0x44
 8005472:	e741      	b.n	80052f8 <_strtod_l+0x700>
 8005474:	2300      	movs	r3, #0
 8005476:	930c      	str	r3, [sp, #48]	; 0x30
 8005478:	2301      	movs	r3, #1
 800547a:	9311      	str	r3, [sp, #68]	; 0x44
 800547c:	e73c      	b.n	80052f8 <_strtod_l+0x700>
 800547e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005480:	4642      	mov	r2, r8
 8005482:	4620      	mov	r0, r4
 8005484:	f001 fec0 	bl	8007208 <__lshift>
 8005488:	901e      	str	r0, [sp, #120]	; 0x78
 800548a:	2800      	cmp	r0, #0
 800548c:	f47f af66 	bne.w	800535c <_strtod_l+0x764>
 8005490:	e5fe      	b.n	8005090 <_strtod_l+0x498>
 8005492:	465f      	mov	r7, fp
 8005494:	d16e      	bne.n	8005574 <_strtod_l+0x97c>
 8005496:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005498:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800549c:	b342      	cbz	r2, 80054f0 <_strtod_l+0x8f8>
 800549e:	4a32      	ldr	r2, [pc, #200]	; (8005568 <_strtod_l+0x970>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d128      	bne.n	80054f6 <_strtod_l+0x8fe>
 80054a4:	9b04      	ldr	r3, [sp, #16]
 80054a6:	4650      	mov	r0, sl
 80054a8:	b1eb      	cbz	r3, 80054e6 <_strtod_l+0x8ee>
 80054aa:	4a2d      	ldr	r2, [pc, #180]	; (8005560 <_strtod_l+0x968>)
 80054ac:	403a      	ands	r2, r7
 80054ae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80054b2:	f04f 31ff 	mov.w	r1, #4294967295
 80054b6:	d819      	bhi.n	80054ec <_strtod_l+0x8f4>
 80054b8:	0d12      	lsrs	r2, r2, #20
 80054ba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80054be:	fa01 f303 	lsl.w	r3, r1, r3
 80054c2:	4298      	cmp	r0, r3
 80054c4:	d117      	bne.n	80054f6 <_strtod_l+0x8fe>
 80054c6:	4b29      	ldr	r3, [pc, #164]	; (800556c <_strtod_l+0x974>)
 80054c8:	429f      	cmp	r7, r3
 80054ca:	d102      	bne.n	80054d2 <_strtod_l+0x8da>
 80054cc:	3001      	adds	r0, #1
 80054ce:	f43f addf 	beq.w	8005090 <_strtod_l+0x498>
 80054d2:	4b23      	ldr	r3, [pc, #140]	; (8005560 <_strtod_l+0x968>)
 80054d4:	403b      	ands	r3, r7
 80054d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80054da:	f04f 0a00 	mov.w	sl, #0
 80054de:	9b04      	ldr	r3, [sp, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1a0      	bne.n	8005426 <_strtod_l+0x82e>
 80054e4:	e5de      	b.n	80050a4 <_strtod_l+0x4ac>
 80054e6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ea:	e7ea      	b.n	80054c2 <_strtod_l+0x8ca>
 80054ec:	460b      	mov	r3, r1
 80054ee:	e7e8      	b.n	80054c2 <_strtod_l+0x8ca>
 80054f0:	ea53 030a 	orrs.w	r3, r3, sl
 80054f4:	d088      	beq.n	8005408 <_strtod_l+0x810>
 80054f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054f8:	b1db      	cbz	r3, 8005532 <_strtod_l+0x93a>
 80054fa:	423b      	tst	r3, r7
 80054fc:	d0ef      	beq.n	80054de <_strtod_l+0x8e6>
 80054fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005500:	9a04      	ldr	r2, [sp, #16]
 8005502:	4650      	mov	r0, sl
 8005504:	4659      	mov	r1, fp
 8005506:	b1c3      	cbz	r3, 800553a <_strtod_l+0x942>
 8005508:	f7ff fb5a 	bl	8004bc0 <sulp>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005514:	f7fa fec2 	bl	800029c <__adddf3>
 8005518:	4682      	mov	sl, r0
 800551a:	468b      	mov	fp, r1
 800551c:	e7df      	b.n	80054de <_strtod_l+0x8e6>
 800551e:	4013      	ands	r3, r2
 8005520:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005524:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005528:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800552c:	f04f 3aff 	mov.w	sl, #4294967295
 8005530:	e7d5      	b.n	80054de <_strtod_l+0x8e6>
 8005532:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005534:	ea13 0f0a 	tst.w	r3, sl
 8005538:	e7e0      	b.n	80054fc <_strtod_l+0x904>
 800553a:	f7ff fb41 	bl	8004bc0 <sulp>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005546:	f7fa fea7 	bl	8000298 <__aeabi_dsub>
 800554a:	2200      	movs	r2, #0
 800554c:	2300      	movs	r3, #0
 800554e:	4682      	mov	sl, r0
 8005550:	468b      	mov	fp, r1
 8005552:	f7fb fac1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005556:	2800      	cmp	r0, #0
 8005558:	d0c1      	beq.n	80054de <_strtod_l+0x8e6>
 800555a:	e60e      	b.n	800517a <_strtod_l+0x582>
 800555c:	fffffc02 	.word	0xfffffc02
 8005560:	7ff00000 	.word	0x7ff00000
 8005564:	39500000 	.word	0x39500000
 8005568:	000fffff 	.word	0x000fffff
 800556c:	7fefffff 	.word	0x7fefffff
 8005570:	08008778 	.word	0x08008778
 8005574:	4631      	mov	r1, r6
 8005576:	4628      	mov	r0, r5
 8005578:	f002 f82e 	bl	80075d8 <__ratio>
 800557c:	ec59 8b10 	vmov	r8, r9, d0
 8005580:	ee10 0a10 	vmov	r0, s0
 8005584:	2200      	movs	r2, #0
 8005586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800558a:	4649      	mov	r1, r9
 800558c:	f7fb fab8 	bl	8000b00 <__aeabi_dcmple>
 8005590:	2800      	cmp	r0, #0
 8005592:	d07c      	beq.n	800568e <_strtod_l+0xa96>
 8005594:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d04c      	beq.n	8005634 <_strtod_l+0xa3c>
 800559a:	4b95      	ldr	r3, [pc, #596]	; (80057f0 <_strtod_l+0xbf8>)
 800559c:	2200      	movs	r2, #0
 800559e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80055a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80057f0 <_strtod_l+0xbf8>
 80055a6:	f04f 0800 	mov.w	r8, #0
 80055aa:	4b92      	ldr	r3, [pc, #584]	; (80057f4 <_strtod_l+0xbfc>)
 80055ac:	403b      	ands	r3, r7
 80055ae:	9311      	str	r3, [sp, #68]	; 0x44
 80055b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80055b2:	4b91      	ldr	r3, [pc, #580]	; (80057f8 <_strtod_l+0xc00>)
 80055b4:	429a      	cmp	r2, r3
 80055b6:	f040 80b2 	bne.w	800571e <_strtod_l+0xb26>
 80055ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80055be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055c2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80055c6:	ec4b ab10 	vmov	d0, sl, fp
 80055ca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80055ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80055d2:	f001 ff29 	bl	8007428 <__ulp>
 80055d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055da:	ec53 2b10 	vmov	r2, r3, d0
 80055de:	f7fb f813 	bl	8000608 <__aeabi_dmul>
 80055e2:	4652      	mov	r2, sl
 80055e4:	465b      	mov	r3, fp
 80055e6:	f7fa fe59 	bl	800029c <__adddf3>
 80055ea:	460b      	mov	r3, r1
 80055ec:	4981      	ldr	r1, [pc, #516]	; (80057f4 <_strtod_l+0xbfc>)
 80055ee:	4a83      	ldr	r2, [pc, #524]	; (80057fc <_strtod_l+0xc04>)
 80055f0:	4019      	ands	r1, r3
 80055f2:	4291      	cmp	r1, r2
 80055f4:	4682      	mov	sl, r0
 80055f6:	d95e      	bls.n	80056b6 <_strtod_l+0xabe>
 80055f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055fa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80055fe:	4293      	cmp	r3, r2
 8005600:	d103      	bne.n	800560a <_strtod_l+0xa12>
 8005602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005604:	3301      	adds	r3, #1
 8005606:	f43f ad43 	beq.w	8005090 <_strtod_l+0x498>
 800560a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8005808 <_strtod_l+0xc10>
 800560e:	f04f 3aff 	mov.w	sl, #4294967295
 8005612:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005614:	4620      	mov	r0, r4
 8005616:	f001 fbdb 	bl	8006dd0 <_Bfree>
 800561a:	9907      	ldr	r1, [sp, #28]
 800561c:	4620      	mov	r0, r4
 800561e:	f001 fbd7 	bl	8006dd0 <_Bfree>
 8005622:	4631      	mov	r1, r6
 8005624:	4620      	mov	r0, r4
 8005626:	f001 fbd3 	bl	8006dd0 <_Bfree>
 800562a:	4629      	mov	r1, r5
 800562c:	4620      	mov	r0, r4
 800562e:	f001 fbcf 	bl	8006dd0 <_Bfree>
 8005632:	e613      	b.n	800525c <_strtod_l+0x664>
 8005634:	f1ba 0f00 	cmp.w	sl, #0
 8005638:	d11b      	bne.n	8005672 <_strtod_l+0xa7a>
 800563a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800563e:	b9f3      	cbnz	r3, 800567e <_strtod_l+0xa86>
 8005640:	4b6b      	ldr	r3, [pc, #428]	; (80057f0 <_strtod_l+0xbf8>)
 8005642:	2200      	movs	r2, #0
 8005644:	4640      	mov	r0, r8
 8005646:	4649      	mov	r1, r9
 8005648:	f7fb fa50 	bl	8000aec <__aeabi_dcmplt>
 800564c:	b9d0      	cbnz	r0, 8005684 <_strtod_l+0xa8c>
 800564e:	4640      	mov	r0, r8
 8005650:	4649      	mov	r1, r9
 8005652:	4b6b      	ldr	r3, [pc, #428]	; (8005800 <_strtod_l+0xc08>)
 8005654:	2200      	movs	r2, #0
 8005656:	f7fa ffd7 	bl	8000608 <__aeabi_dmul>
 800565a:	4680      	mov	r8, r0
 800565c:	4689      	mov	r9, r1
 800565e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005662:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005666:	931b      	str	r3, [sp, #108]	; 0x6c
 8005668:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800566c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005670:	e79b      	b.n	80055aa <_strtod_l+0x9b2>
 8005672:	f1ba 0f01 	cmp.w	sl, #1
 8005676:	d102      	bne.n	800567e <_strtod_l+0xa86>
 8005678:	2f00      	cmp	r7, #0
 800567a:	f43f ad7e 	beq.w	800517a <_strtod_l+0x582>
 800567e:	4b61      	ldr	r3, [pc, #388]	; (8005804 <_strtod_l+0xc0c>)
 8005680:	2200      	movs	r2, #0
 8005682:	e78c      	b.n	800559e <_strtod_l+0x9a6>
 8005684:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005800 <_strtod_l+0xc08>
 8005688:	f04f 0800 	mov.w	r8, #0
 800568c:	e7e7      	b.n	800565e <_strtod_l+0xa66>
 800568e:	4b5c      	ldr	r3, [pc, #368]	; (8005800 <_strtod_l+0xc08>)
 8005690:	4640      	mov	r0, r8
 8005692:	4649      	mov	r1, r9
 8005694:	2200      	movs	r2, #0
 8005696:	f7fa ffb7 	bl	8000608 <__aeabi_dmul>
 800569a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800569c:	4680      	mov	r8, r0
 800569e:	4689      	mov	r9, r1
 80056a0:	b933      	cbnz	r3, 80056b0 <_strtod_l+0xab8>
 80056a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056a6:	9012      	str	r0, [sp, #72]	; 0x48
 80056a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80056aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80056ae:	e7dd      	b.n	800566c <_strtod_l+0xa74>
 80056b0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80056b4:	e7f9      	b.n	80056aa <_strtod_l+0xab2>
 80056b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80056ba:	9b04      	ldr	r3, [sp, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1a8      	bne.n	8005612 <_strtod_l+0xa1a>
 80056c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80056c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80056c6:	0d1b      	lsrs	r3, r3, #20
 80056c8:	051b      	lsls	r3, r3, #20
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d1a1      	bne.n	8005612 <_strtod_l+0xa1a>
 80056ce:	4640      	mov	r0, r8
 80056d0:	4649      	mov	r1, r9
 80056d2:	f7fb faf9 	bl	8000cc8 <__aeabi_d2lz>
 80056d6:	f7fa ff69 	bl	80005ac <__aeabi_l2d>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4640      	mov	r0, r8
 80056e0:	4649      	mov	r1, r9
 80056e2:	f7fa fdd9 	bl	8000298 <__aeabi_dsub>
 80056e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056ec:	ea43 030a 	orr.w	r3, r3, sl
 80056f0:	4313      	orrs	r3, r2
 80056f2:	4680      	mov	r8, r0
 80056f4:	4689      	mov	r9, r1
 80056f6:	d053      	beq.n	80057a0 <_strtod_l+0xba8>
 80056f8:	a335      	add	r3, pc, #212	; (adr r3, 80057d0 <_strtod_l+0xbd8>)
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f7fb f9f5 	bl	8000aec <__aeabi_dcmplt>
 8005702:	2800      	cmp	r0, #0
 8005704:	f47f acce 	bne.w	80050a4 <_strtod_l+0x4ac>
 8005708:	a333      	add	r3, pc, #204	; (adr r3, 80057d8 <_strtod_l+0xbe0>)
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	4640      	mov	r0, r8
 8005710:	4649      	mov	r1, r9
 8005712:	f7fb fa09 	bl	8000b28 <__aeabi_dcmpgt>
 8005716:	2800      	cmp	r0, #0
 8005718:	f43f af7b 	beq.w	8005612 <_strtod_l+0xa1a>
 800571c:	e4c2      	b.n	80050a4 <_strtod_l+0x4ac>
 800571e:	9b04      	ldr	r3, [sp, #16]
 8005720:	b333      	cbz	r3, 8005770 <_strtod_l+0xb78>
 8005722:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005724:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005728:	d822      	bhi.n	8005770 <_strtod_l+0xb78>
 800572a:	a32d      	add	r3, pc, #180	; (adr r3, 80057e0 <_strtod_l+0xbe8>)
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	4640      	mov	r0, r8
 8005732:	4649      	mov	r1, r9
 8005734:	f7fb f9e4 	bl	8000b00 <__aeabi_dcmple>
 8005738:	b1a0      	cbz	r0, 8005764 <_strtod_l+0xb6c>
 800573a:	4649      	mov	r1, r9
 800573c:	4640      	mov	r0, r8
 800573e:	f7fb fa3b 	bl	8000bb8 <__aeabi_d2uiz>
 8005742:	2801      	cmp	r0, #1
 8005744:	bf38      	it	cc
 8005746:	2001      	movcc	r0, #1
 8005748:	f7fa fee4 	bl	8000514 <__aeabi_ui2d>
 800574c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800574e:	4680      	mov	r8, r0
 8005750:	4689      	mov	r9, r1
 8005752:	bb13      	cbnz	r3, 800579a <_strtod_l+0xba2>
 8005754:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005758:	9014      	str	r0, [sp, #80]	; 0x50
 800575a:	9315      	str	r3, [sp, #84]	; 0x54
 800575c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005760:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005766:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005768:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	930d      	str	r3, [sp, #52]	; 0x34
 8005770:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005774:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005778:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800577c:	f001 fe54 	bl	8007428 <__ulp>
 8005780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005784:	ec53 2b10 	vmov	r2, r3, d0
 8005788:	f7fa ff3e 	bl	8000608 <__aeabi_dmul>
 800578c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005790:	f7fa fd84 	bl	800029c <__adddf3>
 8005794:	4682      	mov	sl, r0
 8005796:	468b      	mov	fp, r1
 8005798:	e78f      	b.n	80056ba <_strtod_l+0xac2>
 800579a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800579e:	e7dd      	b.n	800575c <_strtod_l+0xb64>
 80057a0:	a311      	add	r3, pc, #68	; (adr r3, 80057e8 <_strtod_l+0xbf0>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f7fb f9a1 	bl	8000aec <__aeabi_dcmplt>
 80057aa:	e7b4      	b.n	8005716 <_strtod_l+0xb1e>
 80057ac:	2300      	movs	r3, #0
 80057ae:	930e      	str	r3, [sp, #56]	; 0x38
 80057b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80057b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	f7ff ba65 	b.w	8004c84 <_strtod_l+0x8c>
 80057ba:	2b65      	cmp	r3, #101	; 0x65
 80057bc:	f43f ab5d 	beq.w	8004e7a <_strtod_l+0x282>
 80057c0:	2b45      	cmp	r3, #69	; 0x45
 80057c2:	f43f ab5a 	beq.w	8004e7a <_strtod_l+0x282>
 80057c6:	2201      	movs	r2, #1
 80057c8:	f7ff bb92 	b.w	8004ef0 <_strtod_l+0x2f8>
 80057cc:	f3af 8000 	nop.w
 80057d0:	94a03595 	.word	0x94a03595
 80057d4:	3fdfffff 	.word	0x3fdfffff
 80057d8:	35afe535 	.word	0x35afe535
 80057dc:	3fe00000 	.word	0x3fe00000
 80057e0:	ffc00000 	.word	0xffc00000
 80057e4:	41dfffff 	.word	0x41dfffff
 80057e8:	94a03595 	.word	0x94a03595
 80057ec:	3fcfffff 	.word	0x3fcfffff
 80057f0:	3ff00000 	.word	0x3ff00000
 80057f4:	7ff00000 	.word	0x7ff00000
 80057f8:	7fe00000 	.word	0x7fe00000
 80057fc:	7c9fffff 	.word	0x7c9fffff
 8005800:	3fe00000 	.word	0x3fe00000
 8005804:	bff00000 	.word	0xbff00000
 8005808:	7fefffff 	.word	0x7fefffff

0800580c <_strtod_r>:
 800580c:	4b01      	ldr	r3, [pc, #4]	; (8005814 <_strtod_r+0x8>)
 800580e:	f7ff b9f3 	b.w	8004bf8 <_strtod_l>
 8005812:	bf00      	nop
 8005814:	20000074 	.word	0x20000074

08005818 <_strtol_l.isra.0>:
 8005818:	2b01      	cmp	r3, #1
 800581a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800581e:	d001      	beq.n	8005824 <_strtol_l.isra.0+0xc>
 8005820:	2b24      	cmp	r3, #36	; 0x24
 8005822:	d906      	bls.n	8005832 <_strtol_l.isra.0+0x1a>
 8005824:	f7fe fafa 	bl	8003e1c <__errno>
 8005828:	2316      	movs	r3, #22
 800582a:	6003      	str	r3, [r0, #0]
 800582c:	2000      	movs	r0, #0
 800582e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005832:	4f3a      	ldr	r7, [pc, #232]	; (800591c <_strtol_l.isra.0+0x104>)
 8005834:	468e      	mov	lr, r1
 8005836:	4676      	mov	r6, lr
 8005838:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800583c:	5de5      	ldrb	r5, [r4, r7]
 800583e:	f015 0508 	ands.w	r5, r5, #8
 8005842:	d1f8      	bne.n	8005836 <_strtol_l.isra.0+0x1e>
 8005844:	2c2d      	cmp	r4, #45	; 0x2d
 8005846:	d134      	bne.n	80058b2 <_strtol_l.isra.0+0x9a>
 8005848:	f89e 4000 	ldrb.w	r4, [lr]
 800584c:	f04f 0801 	mov.w	r8, #1
 8005850:	f106 0e02 	add.w	lr, r6, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d05c      	beq.n	8005912 <_strtol_l.isra.0+0xfa>
 8005858:	2b10      	cmp	r3, #16
 800585a:	d10c      	bne.n	8005876 <_strtol_l.isra.0+0x5e>
 800585c:	2c30      	cmp	r4, #48	; 0x30
 800585e:	d10a      	bne.n	8005876 <_strtol_l.isra.0+0x5e>
 8005860:	f89e 4000 	ldrb.w	r4, [lr]
 8005864:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005868:	2c58      	cmp	r4, #88	; 0x58
 800586a:	d14d      	bne.n	8005908 <_strtol_l.isra.0+0xf0>
 800586c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005870:	2310      	movs	r3, #16
 8005872:	f10e 0e02 	add.w	lr, lr, #2
 8005876:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800587a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800587e:	2600      	movs	r6, #0
 8005880:	fbbc f9f3 	udiv	r9, ip, r3
 8005884:	4635      	mov	r5, r6
 8005886:	fb03 ca19 	mls	sl, r3, r9, ip
 800588a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800588e:	2f09      	cmp	r7, #9
 8005890:	d818      	bhi.n	80058c4 <_strtol_l.isra.0+0xac>
 8005892:	463c      	mov	r4, r7
 8005894:	42a3      	cmp	r3, r4
 8005896:	dd24      	ble.n	80058e2 <_strtol_l.isra.0+0xca>
 8005898:	2e00      	cmp	r6, #0
 800589a:	db1f      	blt.n	80058dc <_strtol_l.isra.0+0xc4>
 800589c:	45a9      	cmp	r9, r5
 800589e:	d31d      	bcc.n	80058dc <_strtol_l.isra.0+0xc4>
 80058a0:	d101      	bne.n	80058a6 <_strtol_l.isra.0+0x8e>
 80058a2:	45a2      	cmp	sl, r4
 80058a4:	db1a      	blt.n	80058dc <_strtol_l.isra.0+0xc4>
 80058a6:	fb05 4503 	mla	r5, r5, r3, r4
 80058aa:	2601      	movs	r6, #1
 80058ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80058b0:	e7eb      	b.n	800588a <_strtol_l.isra.0+0x72>
 80058b2:	2c2b      	cmp	r4, #43	; 0x2b
 80058b4:	bf08      	it	eq
 80058b6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80058ba:	46a8      	mov	r8, r5
 80058bc:	bf08      	it	eq
 80058be:	f106 0e02 	addeq.w	lr, r6, #2
 80058c2:	e7c7      	b.n	8005854 <_strtol_l.isra.0+0x3c>
 80058c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80058c8:	2f19      	cmp	r7, #25
 80058ca:	d801      	bhi.n	80058d0 <_strtol_l.isra.0+0xb8>
 80058cc:	3c37      	subs	r4, #55	; 0x37
 80058ce:	e7e1      	b.n	8005894 <_strtol_l.isra.0+0x7c>
 80058d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80058d4:	2f19      	cmp	r7, #25
 80058d6:	d804      	bhi.n	80058e2 <_strtol_l.isra.0+0xca>
 80058d8:	3c57      	subs	r4, #87	; 0x57
 80058da:	e7db      	b.n	8005894 <_strtol_l.isra.0+0x7c>
 80058dc:	f04f 36ff 	mov.w	r6, #4294967295
 80058e0:	e7e4      	b.n	80058ac <_strtol_l.isra.0+0x94>
 80058e2:	2e00      	cmp	r6, #0
 80058e4:	da05      	bge.n	80058f2 <_strtol_l.isra.0+0xda>
 80058e6:	2322      	movs	r3, #34	; 0x22
 80058e8:	6003      	str	r3, [r0, #0]
 80058ea:	4665      	mov	r5, ip
 80058ec:	b942      	cbnz	r2, 8005900 <_strtol_l.isra.0+0xe8>
 80058ee:	4628      	mov	r0, r5
 80058f0:	e79d      	b.n	800582e <_strtol_l.isra.0+0x16>
 80058f2:	f1b8 0f00 	cmp.w	r8, #0
 80058f6:	d000      	beq.n	80058fa <_strtol_l.isra.0+0xe2>
 80058f8:	426d      	negs	r5, r5
 80058fa:	2a00      	cmp	r2, #0
 80058fc:	d0f7      	beq.n	80058ee <_strtol_l.isra.0+0xd6>
 80058fe:	b10e      	cbz	r6, 8005904 <_strtol_l.isra.0+0xec>
 8005900:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005904:	6011      	str	r1, [r2, #0]
 8005906:	e7f2      	b.n	80058ee <_strtol_l.isra.0+0xd6>
 8005908:	2430      	movs	r4, #48	; 0x30
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1b3      	bne.n	8005876 <_strtol_l.isra.0+0x5e>
 800590e:	2308      	movs	r3, #8
 8005910:	e7b1      	b.n	8005876 <_strtol_l.isra.0+0x5e>
 8005912:	2c30      	cmp	r4, #48	; 0x30
 8005914:	d0a4      	beq.n	8005860 <_strtol_l.isra.0+0x48>
 8005916:	230a      	movs	r3, #10
 8005918:	e7ad      	b.n	8005876 <_strtol_l.isra.0+0x5e>
 800591a:	bf00      	nop
 800591c:	080087a1 	.word	0x080087a1

08005920 <_strtol_r>:
 8005920:	f7ff bf7a 	b.w	8005818 <_strtol_l.isra.0>

08005924 <quorem>:
 8005924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005928:	6903      	ldr	r3, [r0, #16]
 800592a:	690c      	ldr	r4, [r1, #16]
 800592c:	42a3      	cmp	r3, r4
 800592e:	4607      	mov	r7, r0
 8005930:	f2c0 8081 	blt.w	8005a36 <quorem+0x112>
 8005934:	3c01      	subs	r4, #1
 8005936:	f101 0814 	add.w	r8, r1, #20
 800593a:	f100 0514 	add.w	r5, r0, #20
 800593e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005942:	9301      	str	r3, [sp, #4]
 8005944:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800594c:	3301      	adds	r3, #1
 800594e:	429a      	cmp	r2, r3
 8005950:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005954:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005958:	fbb2 f6f3 	udiv	r6, r2, r3
 800595c:	d331      	bcc.n	80059c2 <quorem+0x9e>
 800595e:	f04f 0e00 	mov.w	lr, #0
 8005962:	4640      	mov	r0, r8
 8005964:	46ac      	mov	ip, r5
 8005966:	46f2      	mov	sl, lr
 8005968:	f850 2b04 	ldr.w	r2, [r0], #4
 800596c:	b293      	uxth	r3, r2
 800596e:	fb06 e303 	mla	r3, r6, r3, lr
 8005972:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005976:	b29b      	uxth	r3, r3
 8005978:	ebaa 0303 	sub.w	r3, sl, r3
 800597c:	0c12      	lsrs	r2, r2, #16
 800597e:	f8dc a000 	ldr.w	sl, [ip]
 8005982:	fb06 e202 	mla	r2, r6, r2, lr
 8005986:	fa13 f38a 	uxtah	r3, r3, sl
 800598a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800598e:	fa1f fa82 	uxth.w	sl, r2
 8005992:	f8dc 2000 	ldr.w	r2, [ip]
 8005996:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800599a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800599e:	b29b      	uxth	r3, r3
 80059a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059a4:	4581      	cmp	r9, r0
 80059a6:	f84c 3b04 	str.w	r3, [ip], #4
 80059aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059ae:	d2db      	bcs.n	8005968 <quorem+0x44>
 80059b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80059b4:	b92b      	cbnz	r3, 80059c2 <quorem+0x9e>
 80059b6:	9b01      	ldr	r3, [sp, #4]
 80059b8:	3b04      	subs	r3, #4
 80059ba:	429d      	cmp	r5, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	d32e      	bcc.n	8005a1e <quorem+0xfa>
 80059c0:	613c      	str	r4, [r7, #16]
 80059c2:	4638      	mov	r0, r7
 80059c4:	f001 fc8c 	bl	80072e0 <__mcmp>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	db24      	blt.n	8005a16 <quorem+0xf2>
 80059cc:	3601      	adds	r6, #1
 80059ce:	4628      	mov	r0, r5
 80059d0:	f04f 0c00 	mov.w	ip, #0
 80059d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80059d8:	f8d0 e000 	ldr.w	lr, [r0]
 80059dc:	b293      	uxth	r3, r2
 80059de:	ebac 0303 	sub.w	r3, ip, r3
 80059e2:	0c12      	lsrs	r2, r2, #16
 80059e4:	fa13 f38e 	uxtah	r3, r3, lr
 80059e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80059ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059f6:	45c1      	cmp	r9, r8
 80059f8:	f840 3b04 	str.w	r3, [r0], #4
 80059fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a00:	d2e8      	bcs.n	80059d4 <quorem+0xb0>
 8005a02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a0a:	b922      	cbnz	r2, 8005a16 <quorem+0xf2>
 8005a0c:	3b04      	subs	r3, #4
 8005a0e:	429d      	cmp	r5, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	d30a      	bcc.n	8005a2a <quorem+0x106>
 8005a14:	613c      	str	r4, [r7, #16]
 8005a16:	4630      	mov	r0, r6
 8005a18:	b003      	add	sp, #12
 8005a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	3b04      	subs	r3, #4
 8005a22:	2a00      	cmp	r2, #0
 8005a24:	d1cc      	bne.n	80059c0 <quorem+0x9c>
 8005a26:	3c01      	subs	r4, #1
 8005a28:	e7c7      	b.n	80059ba <quorem+0x96>
 8005a2a:	6812      	ldr	r2, [r2, #0]
 8005a2c:	3b04      	subs	r3, #4
 8005a2e:	2a00      	cmp	r2, #0
 8005a30:	d1f0      	bne.n	8005a14 <quorem+0xf0>
 8005a32:	3c01      	subs	r4, #1
 8005a34:	e7eb      	b.n	8005a0e <quorem+0xea>
 8005a36:	2000      	movs	r0, #0
 8005a38:	e7ee      	b.n	8005a18 <quorem+0xf4>
 8005a3a:	0000      	movs	r0, r0
 8005a3c:	0000      	movs	r0, r0
	...

08005a40 <_dtoa_r>:
 8005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	ed2d 8b02 	vpush	{d8}
 8005a48:	ec57 6b10 	vmov	r6, r7, d0
 8005a4c:	b095      	sub	sp, #84	; 0x54
 8005a4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a54:	9105      	str	r1, [sp, #20]
 8005a56:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a60:	b975      	cbnz	r5, 8005a80 <_dtoa_r+0x40>
 8005a62:	2010      	movs	r0, #16
 8005a64:	f001 f94c 	bl	8006d00 <malloc>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	6260      	str	r0, [r4, #36]	; 0x24
 8005a6c:	b920      	cbnz	r0, 8005a78 <_dtoa_r+0x38>
 8005a6e:	4bb2      	ldr	r3, [pc, #712]	; (8005d38 <_dtoa_r+0x2f8>)
 8005a70:	21ea      	movs	r1, #234	; 0xea
 8005a72:	48b2      	ldr	r0, [pc, #712]	; (8005d3c <_dtoa_r+0x2fc>)
 8005a74:	f002 f874 	bl	8007b60 <__assert_func>
 8005a78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a7c:	6005      	str	r5, [r0, #0]
 8005a7e:	60c5      	str	r5, [r0, #12]
 8005a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a82:	6819      	ldr	r1, [r3, #0]
 8005a84:	b151      	cbz	r1, 8005a9c <_dtoa_r+0x5c>
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	604a      	str	r2, [r1, #4]
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4093      	lsls	r3, r2
 8005a8e:	608b      	str	r3, [r1, #8]
 8005a90:	4620      	mov	r0, r4
 8005a92:	f001 f99d 	bl	8006dd0 <_Bfree>
 8005a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	1e3b      	subs	r3, r7, #0
 8005a9e:	bfb9      	ittee	lt
 8005aa0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005aa4:	9303      	strlt	r3, [sp, #12]
 8005aa6:	2300      	movge	r3, #0
 8005aa8:	f8c8 3000 	strge.w	r3, [r8]
 8005aac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005ab0:	4ba3      	ldr	r3, [pc, #652]	; (8005d40 <_dtoa_r+0x300>)
 8005ab2:	bfbc      	itt	lt
 8005ab4:	2201      	movlt	r2, #1
 8005ab6:	f8c8 2000 	strlt.w	r2, [r8]
 8005aba:	ea33 0309 	bics.w	r3, r3, r9
 8005abe:	d11b      	bne.n	8005af8 <_dtoa_r+0xb8>
 8005ac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ac2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005acc:	4333      	orrs	r3, r6
 8005ace:	f000 857a 	beq.w	80065c6 <_dtoa_r+0xb86>
 8005ad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ad4:	b963      	cbnz	r3, 8005af0 <_dtoa_r+0xb0>
 8005ad6:	4b9b      	ldr	r3, [pc, #620]	; (8005d44 <_dtoa_r+0x304>)
 8005ad8:	e024      	b.n	8005b24 <_dtoa_r+0xe4>
 8005ada:	4b9b      	ldr	r3, [pc, #620]	; (8005d48 <_dtoa_r+0x308>)
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	3308      	adds	r3, #8
 8005ae0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	9800      	ldr	r0, [sp, #0]
 8005ae6:	b015      	add	sp, #84	; 0x54
 8005ae8:	ecbd 8b02 	vpop	{d8}
 8005aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af0:	4b94      	ldr	r3, [pc, #592]	; (8005d44 <_dtoa_r+0x304>)
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	3303      	adds	r3, #3
 8005af6:	e7f3      	b.n	8005ae0 <_dtoa_r+0xa0>
 8005af8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005afc:	2200      	movs	r2, #0
 8005afe:	ec51 0b17 	vmov	r0, r1, d7
 8005b02:	2300      	movs	r3, #0
 8005b04:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005b08:	f7fa ffe6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b0c:	4680      	mov	r8, r0
 8005b0e:	b158      	cbz	r0, 8005b28 <_dtoa_r+0xe8>
 8005b10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b12:	2301      	movs	r3, #1
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 8551 	beq.w	80065c0 <_dtoa_r+0xb80>
 8005b1e:	488b      	ldr	r0, [pc, #556]	; (8005d4c <_dtoa_r+0x30c>)
 8005b20:	6018      	str	r0, [r3, #0]
 8005b22:	1e43      	subs	r3, r0, #1
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	e7dd      	b.n	8005ae4 <_dtoa_r+0xa4>
 8005b28:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005b2c:	aa12      	add	r2, sp, #72	; 0x48
 8005b2e:	a913      	add	r1, sp, #76	; 0x4c
 8005b30:	4620      	mov	r0, r4
 8005b32:	f001 fcf5 	bl	8007520 <__d2b>
 8005b36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b3a:	4683      	mov	fp, r0
 8005b3c:	2d00      	cmp	r5, #0
 8005b3e:	d07c      	beq.n	8005c3a <_dtoa_r+0x1fa>
 8005b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b42:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005b46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b4a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005b4e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005b52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005b56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b5a:	4b7d      	ldr	r3, [pc, #500]	; (8005d50 <_dtoa_r+0x310>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4630      	mov	r0, r6
 8005b60:	4639      	mov	r1, r7
 8005b62:	f7fa fb99 	bl	8000298 <__aeabi_dsub>
 8005b66:	a36e      	add	r3, pc, #440	; (adr r3, 8005d20 <_dtoa_r+0x2e0>)
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	f7fa fd4c 	bl	8000608 <__aeabi_dmul>
 8005b70:	a36d      	add	r3, pc, #436	; (adr r3, 8005d28 <_dtoa_r+0x2e8>)
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	f7fa fb91 	bl	800029c <__adddf3>
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	460f      	mov	r7, r1
 8005b80:	f7fa fcd8 	bl	8000534 <__aeabi_i2d>
 8005b84:	a36a      	add	r3, pc, #424	; (adr r3, 8005d30 <_dtoa_r+0x2f0>)
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	f7fa fd3d 	bl	8000608 <__aeabi_dmul>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4630      	mov	r0, r6
 8005b94:	4639      	mov	r1, r7
 8005b96:	f7fa fb81 	bl	800029c <__adddf3>
 8005b9a:	4606      	mov	r6, r0
 8005b9c:	460f      	mov	r7, r1
 8005b9e:	f7fa ffe3 	bl	8000b68 <__aeabi_d2iz>
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	4682      	mov	sl, r0
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	4630      	mov	r0, r6
 8005baa:	4639      	mov	r1, r7
 8005bac:	f7fa ff9e 	bl	8000aec <__aeabi_dcmplt>
 8005bb0:	b148      	cbz	r0, 8005bc6 <_dtoa_r+0x186>
 8005bb2:	4650      	mov	r0, sl
 8005bb4:	f7fa fcbe 	bl	8000534 <__aeabi_i2d>
 8005bb8:	4632      	mov	r2, r6
 8005bba:	463b      	mov	r3, r7
 8005bbc:	f7fa ff8c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bc0:	b908      	cbnz	r0, 8005bc6 <_dtoa_r+0x186>
 8005bc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bc6:	f1ba 0f16 	cmp.w	sl, #22
 8005bca:	d854      	bhi.n	8005c76 <_dtoa_r+0x236>
 8005bcc:	4b61      	ldr	r3, [pc, #388]	; (8005d54 <_dtoa_r+0x314>)
 8005bce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005bda:	f7fa ff87 	bl	8000aec <__aeabi_dcmplt>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d04b      	beq.n	8005c7a <_dtoa_r+0x23a>
 8005be2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005be6:	2300      	movs	r3, #0
 8005be8:	930e      	str	r3, [sp, #56]	; 0x38
 8005bea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bec:	1b5d      	subs	r5, r3, r5
 8005bee:	1e6b      	subs	r3, r5, #1
 8005bf0:	9304      	str	r3, [sp, #16]
 8005bf2:	bf43      	ittte	mi
 8005bf4:	2300      	movmi	r3, #0
 8005bf6:	f1c5 0801 	rsbmi	r8, r5, #1
 8005bfa:	9304      	strmi	r3, [sp, #16]
 8005bfc:	f04f 0800 	movpl.w	r8, #0
 8005c00:	f1ba 0f00 	cmp.w	sl, #0
 8005c04:	db3b      	blt.n	8005c7e <_dtoa_r+0x23e>
 8005c06:	9b04      	ldr	r3, [sp, #16]
 8005c08:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005c0c:	4453      	add	r3, sl
 8005c0e:	9304      	str	r3, [sp, #16]
 8005c10:	2300      	movs	r3, #0
 8005c12:	9306      	str	r3, [sp, #24]
 8005c14:	9b05      	ldr	r3, [sp, #20]
 8005c16:	2b09      	cmp	r3, #9
 8005c18:	d869      	bhi.n	8005cee <_dtoa_r+0x2ae>
 8005c1a:	2b05      	cmp	r3, #5
 8005c1c:	bfc4      	itt	gt
 8005c1e:	3b04      	subgt	r3, #4
 8005c20:	9305      	strgt	r3, [sp, #20]
 8005c22:	9b05      	ldr	r3, [sp, #20]
 8005c24:	f1a3 0302 	sub.w	r3, r3, #2
 8005c28:	bfcc      	ite	gt
 8005c2a:	2500      	movgt	r5, #0
 8005c2c:	2501      	movle	r5, #1
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d869      	bhi.n	8005d06 <_dtoa_r+0x2c6>
 8005c32:	e8df f003 	tbb	[pc, r3]
 8005c36:	4e2c      	.short	0x4e2c
 8005c38:	5a4c      	.short	0x5a4c
 8005c3a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005c3e:	441d      	add	r5, r3
 8005c40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	bfc1      	itttt	gt
 8005c48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c4c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005c50:	fa09 f303 	lslgt.w	r3, r9, r3
 8005c54:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c58:	bfda      	itte	le
 8005c5a:	f1c3 0320 	rsble	r3, r3, #32
 8005c5e:	fa06 f003 	lslle.w	r0, r6, r3
 8005c62:	4318      	orrgt	r0, r3
 8005c64:	f7fa fc56 	bl	8000514 <__aeabi_ui2d>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	4606      	mov	r6, r0
 8005c6c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005c70:	3d01      	subs	r5, #1
 8005c72:	9310      	str	r3, [sp, #64]	; 0x40
 8005c74:	e771      	b.n	8005b5a <_dtoa_r+0x11a>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e7b6      	b.n	8005be8 <_dtoa_r+0x1a8>
 8005c7a:	900e      	str	r0, [sp, #56]	; 0x38
 8005c7c:	e7b5      	b.n	8005bea <_dtoa_r+0x1aa>
 8005c7e:	f1ca 0300 	rsb	r3, sl, #0
 8005c82:	9306      	str	r3, [sp, #24]
 8005c84:	2300      	movs	r3, #0
 8005c86:	eba8 080a 	sub.w	r8, r8, sl
 8005c8a:	930d      	str	r3, [sp, #52]	; 0x34
 8005c8c:	e7c2      	b.n	8005c14 <_dtoa_r+0x1d4>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	9308      	str	r3, [sp, #32]
 8005c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	dc39      	bgt.n	8005d0c <_dtoa_r+0x2cc>
 8005c98:	f04f 0901 	mov.w	r9, #1
 8005c9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005ca6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005ca8:	2200      	movs	r2, #0
 8005caa:	6042      	str	r2, [r0, #4]
 8005cac:	2204      	movs	r2, #4
 8005cae:	f102 0614 	add.w	r6, r2, #20
 8005cb2:	429e      	cmp	r6, r3
 8005cb4:	6841      	ldr	r1, [r0, #4]
 8005cb6:	d92f      	bls.n	8005d18 <_dtoa_r+0x2d8>
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f001 f849 	bl	8006d50 <_Balloc>
 8005cbe:	9000      	str	r0, [sp, #0]
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d14b      	bne.n	8005d5c <_dtoa_r+0x31c>
 8005cc4:	4b24      	ldr	r3, [pc, #144]	; (8005d58 <_dtoa_r+0x318>)
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005ccc:	e6d1      	b.n	8005a72 <_dtoa_r+0x32>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e7de      	b.n	8005c90 <_dtoa_r+0x250>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	9308      	str	r3, [sp, #32]
 8005cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd8:	eb0a 0903 	add.w	r9, sl, r3
 8005cdc:	f109 0301 	add.w	r3, r9, #1
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	9301      	str	r3, [sp, #4]
 8005ce4:	bfb8      	it	lt
 8005ce6:	2301      	movlt	r3, #1
 8005ce8:	e7dd      	b.n	8005ca6 <_dtoa_r+0x266>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e7f2      	b.n	8005cd4 <_dtoa_r+0x294>
 8005cee:	2501      	movs	r5, #1
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	9305      	str	r3, [sp, #20]
 8005cf4:	9508      	str	r5, [sp, #32]
 8005cf6:	f04f 39ff 	mov.w	r9, #4294967295
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d00:	2312      	movs	r3, #18
 8005d02:	9209      	str	r2, [sp, #36]	; 0x24
 8005d04:	e7cf      	b.n	8005ca6 <_dtoa_r+0x266>
 8005d06:	2301      	movs	r3, #1
 8005d08:	9308      	str	r3, [sp, #32]
 8005d0a:	e7f4      	b.n	8005cf6 <_dtoa_r+0x2b6>
 8005d0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005d10:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d14:	464b      	mov	r3, r9
 8005d16:	e7c6      	b.n	8005ca6 <_dtoa_r+0x266>
 8005d18:	3101      	adds	r1, #1
 8005d1a:	6041      	str	r1, [r0, #4]
 8005d1c:	0052      	lsls	r2, r2, #1
 8005d1e:	e7c6      	b.n	8005cae <_dtoa_r+0x26e>
 8005d20:	636f4361 	.word	0x636f4361
 8005d24:	3fd287a7 	.word	0x3fd287a7
 8005d28:	8b60c8b3 	.word	0x8b60c8b3
 8005d2c:	3fc68a28 	.word	0x3fc68a28
 8005d30:	509f79fb 	.word	0x509f79fb
 8005d34:	3fd34413 	.word	0x3fd34413
 8005d38:	080088ae 	.word	0x080088ae
 8005d3c:	080088c5 	.word	0x080088c5
 8005d40:	7ff00000 	.word	0x7ff00000
 8005d44:	080088aa 	.word	0x080088aa
 8005d48:	080088a1 	.word	0x080088a1
 8005d4c:	08008725 	.word	0x08008725
 8005d50:	3ff80000 	.word	0x3ff80000
 8005d54:	08008a40 	.word	0x08008a40
 8005d58:	08008924 	.word	0x08008924
 8005d5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d5e:	9a00      	ldr	r2, [sp, #0]
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	9b01      	ldr	r3, [sp, #4]
 8005d64:	2b0e      	cmp	r3, #14
 8005d66:	f200 80ad 	bhi.w	8005ec4 <_dtoa_r+0x484>
 8005d6a:	2d00      	cmp	r5, #0
 8005d6c:	f000 80aa 	beq.w	8005ec4 <_dtoa_r+0x484>
 8005d70:	f1ba 0f00 	cmp.w	sl, #0
 8005d74:	dd36      	ble.n	8005de4 <_dtoa_r+0x3a4>
 8005d76:	4ac3      	ldr	r2, [pc, #780]	; (8006084 <_dtoa_r+0x644>)
 8005d78:	f00a 030f 	and.w	r3, sl, #15
 8005d7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d80:	ed93 7b00 	vldr	d7, [r3]
 8005d84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005d88:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005d8c:	eeb0 8a47 	vmov.f32	s16, s14
 8005d90:	eef0 8a67 	vmov.f32	s17, s15
 8005d94:	d016      	beq.n	8005dc4 <_dtoa_r+0x384>
 8005d96:	4bbc      	ldr	r3, [pc, #752]	; (8006088 <_dtoa_r+0x648>)
 8005d98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005da0:	f7fa fd5c 	bl	800085c <__aeabi_ddiv>
 8005da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005da8:	f007 070f 	and.w	r7, r7, #15
 8005dac:	2503      	movs	r5, #3
 8005dae:	4eb6      	ldr	r6, [pc, #728]	; (8006088 <_dtoa_r+0x648>)
 8005db0:	b957      	cbnz	r7, 8005dc8 <_dtoa_r+0x388>
 8005db2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005db6:	ec53 2b18 	vmov	r2, r3, d8
 8005dba:	f7fa fd4f 	bl	800085c <__aeabi_ddiv>
 8005dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dc2:	e029      	b.n	8005e18 <_dtoa_r+0x3d8>
 8005dc4:	2502      	movs	r5, #2
 8005dc6:	e7f2      	b.n	8005dae <_dtoa_r+0x36e>
 8005dc8:	07f9      	lsls	r1, r7, #31
 8005dca:	d508      	bpl.n	8005dde <_dtoa_r+0x39e>
 8005dcc:	ec51 0b18 	vmov	r0, r1, d8
 8005dd0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005dd4:	f7fa fc18 	bl	8000608 <__aeabi_dmul>
 8005dd8:	ec41 0b18 	vmov	d8, r0, r1
 8005ddc:	3501      	adds	r5, #1
 8005dde:	107f      	asrs	r7, r7, #1
 8005de0:	3608      	adds	r6, #8
 8005de2:	e7e5      	b.n	8005db0 <_dtoa_r+0x370>
 8005de4:	f000 80a6 	beq.w	8005f34 <_dtoa_r+0x4f4>
 8005de8:	f1ca 0600 	rsb	r6, sl, #0
 8005dec:	4ba5      	ldr	r3, [pc, #660]	; (8006084 <_dtoa_r+0x644>)
 8005dee:	4fa6      	ldr	r7, [pc, #664]	; (8006088 <_dtoa_r+0x648>)
 8005df0:	f006 020f 	and.w	r2, r6, #15
 8005df4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e00:	f7fa fc02 	bl	8000608 <__aeabi_dmul>
 8005e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e08:	1136      	asrs	r6, r6, #4
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2502      	movs	r5, #2
 8005e0e:	2e00      	cmp	r6, #0
 8005e10:	f040 8085 	bne.w	8005f1e <_dtoa_r+0x4de>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1d2      	bne.n	8005dbe <_dtoa_r+0x37e>
 8005e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 808c 	beq.w	8005f38 <_dtoa_r+0x4f8>
 8005e20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e24:	4b99      	ldr	r3, [pc, #612]	; (800608c <_dtoa_r+0x64c>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	4630      	mov	r0, r6
 8005e2a:	4639      	mov	r1, r7
 8005e2c:	f7fa fe5e 	bl	8000aec <__aeabi_dcmplt>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	f000 8081 	beq.w	8005f38 <_dtoa_r+0x4f8>
 8005e36:	9b01      	ldr	r3, [sp, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d07d      	beq.n	8005f38 <_dtoa_r+0x4f8>
 8005e3c:	f1b9 0f00 	cmp.w	r9, #0
 8005e40:	dd3c      	ble.n	8005ebc <_dtoa_r+0x47c>
 8005e42:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005e46:	9307      	str	r3, [sp, #28]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4b91      	ldr	r3, [pc, #580]	; (8006090 <_dtoa_r+0x650>)
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	4639      	mov	r1, r7
 8005e50:	f7fa fbda 	bl	8000608 <__aeabi_dmul>
 8005e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e58:	3501      	adds	r5, #1
 8005e5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005e5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e62:	4628      	mov	r0, r5
 8005e64:	f7fa fb66 	bl	8000534 <__aeabi_i2d>
 8005e68:	4632      	mov	r2, r6
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	f7fa fbcc 	bl	8000608 <__aeabi_dmul>
 8005e70:	4b88      	ldr	r3, [pc, #544]	; (8006094 <_dtoa_r+0x654>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	f7fa fa12 	bl	800029c <__adddf3>
 8005e78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e80:	9303      	str	r3, [sp, #12]
 8005e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d15c      	bne.n	8005f42 <_dtoa_r+0x502>
 8005e88:	4b83      	ldr	r3, [pc, #524]	; (8006098 <_dtoa_r+0x658>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	4639      	mov	r1, r7
 8005e90:	f7fa fa02 	bl	8000298 <__aeabi_dsub>
 8005e94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e98:	4606      	mov	r6, r0
 8005e9a:	460f      	mov	r7, r1
 8005e9c:	f7fa fe44 	bl	8000b28 <__aeabi_dcmpgt>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	f040 8296 	bne.w	80063d2 <_dtoa_r+0x992>
 8005ea6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005eaa:	4630      	mov	r0, r6
 8005eac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	f7fa fe1b 	bl	8000aec <__aeabi_dcmplt>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	f040 8288 	bne.w	80063cc <_dtoa_r+0x98c>
 8005ebc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ec0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ec4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f2c0 8158 	blt.w	800617c <_dtoa_r+0x73c>
 8005ecc:	f1ba 0f0e 	cmp.w	sl, #14
 8005ed0:	f300 8154 	bgt.w	800617c <_dtoa_r+0x73c>
 8005ed4:	4b6b      	ldr	r3, [pc, #428]	; (8006084 <_dtoa_r+0x644>)
 8005ed6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005eda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f280 80e3 	bge.w	80060ac <_dtoa_r+0x66c>
 8005ee6:	9b01      	ldr	r3, [sp, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f300 80df 	bgt.w	80060ac <_dtoa_r+0x66c>
 8005eee:	f040 826d 	bne.w	80063cc <_dtoa_r+0x98c>
 8005ef2:	4b69      	ldr	r3, [pc, #420]	; (8006098 <_dtoa_r+0x658>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	4640      	mov	r0, r8
 8005ef8:	4649      	mov	r1, r9
 8005efa:	f7fa fb85 	bl	8000608 <__aeabi_dmul>
 8005efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f02:	f7fa fe07 	bl	8000b14 <__aeabi_dcmpge>
 8005f06:	9e01      	ldr	r6, [sp, #4]
 8005f08:	4637      	mov	r7, r6
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	f040 8243 	bne.w	8006396 <_dtoa_r+0x956>
 8005f10:	9d00      	ldr	r5, [sp, #0]
 8005f12:	2331      	movs	r3, #49	; 0x31
 8005f14:	f805 3b01 	strb.w	r3, [r5], #1
 8005f18:	f10a 0a01 	add.w	sl, sl, #1
 8005f1c:	e23f      	b.n	800639e <_dtoa_r+0x95e>
 8005f1e:	07f2      	lsls	r2, r6, #31
 8005f20:	d505      	bpl.n	8005f2e <_dtoa_r+0x4ee>
 8005f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f26:	f7fa fb6f 	bl	8000608 <__aeabi_dmul>
 8005f2a:	3501      	adds	r5, #1
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	1076      	asrs	r6, r6, #1
 8005f30:	3708      	adds	r7, #8
 8005f32:	e76c      	b.n	8005e0e <_dtoa_r+0x3ce>
 8005f34:	2502      	movs	r5, #2
 8005f36:	e76f      	b.n	8005e18 <_dtoa_r+0x3d8>
 8005f38:	9b01      	ldr	r3, [sp, #4]
 8005f3a:	f8cd a01c 	str.w	sl, [sp, #28]
 8005f3e:	930c      	str	r3, [sp, #48]	; 0x30
 8005f40:	e78d      	b.n	8005e5e <_dtoa_r+0x41e>
 8005f42:	9900      	ldr	r1, [sp, #0]
 8005f44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005f46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f48:	4b4e      	ldr	r3, [pc, #312]	; (8006084 <_dtoa_r+0x644>)
 8005f4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f4e:	4401      	add	r1, r0
 8005f50:	9102      	str	r1, [sp, #8]
 8005f52:	9908      	ldr	r1, [sp, #32]
 8005f54:	eeb0 8a47 	vmov.f32	s16, s14
 8005f58:	eef0 8a67 	vmov.f32	s17, s15
 8005f5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f64:	2900      	cmp	r1, #0
 8005f66:	d045      	beq.n	8005ff4 <_dtoa_r+0x5b4>
 8005f68:	494c      	ldr	r1, [pc, #304]	; (800609c <_dtoa_r+0x65c>)
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	f7fa fc76 	bl	800085c <__aeabi_ddiv>
 8005f70:	ec53 2b18 	vmov	r2, r3, d8
 8005f74:	f7fa f990 	bl	8000298 <__aeabi_dsub>
 8005f78:	9d00      	ldr	r5, [sp, #0]
 8005f7a:	ec41 0b18 	vmov	d8, r0, r1
 8005f7e:	4639      	mov	r1, r7
 8005f80:	4630      	mov	r0, r6
 8005f82:	f7fa fdf1 	bl	8000b68 <__aeabi_d2iz>
 8005f86:	900c      	str	r0, [sp, #48]	; 0x30
 8005f88:	f7fa fad4 	bl	8000534 <__aeabi_i2d>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4630      	mov	r0, r6
 8005f92:	4639      	mov	r1, r7
 8005f94:	f7fa f980 	bl	8000298 <__aeabi_dsub>
 8005f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f9a:	3330      	adds	r3, #48	; 0x30
 8005f9c:	f805 3b01 	strb.w	r3, [r5], #1
 8005fa0:	ec53 2b18 	vmov	r2, r3, d8
 8005fa4:	4606      	mov	r6, r0
 8005fa6:	460f      	mov	r7, r1
 8005fa8:	f7fa fda0 	bl	8000aec <__aeabi_dcmplt>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d165      	bne.n	800607c <_dtoa_r+0x63c>
 8005fb0:	4632      	mov	r2, r6
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	4935      	ldr	r1, [pc, #212]	; (800608c <_dtoa_r+0x64c>)
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	f7fa f96e 	bl	8000298 <__aeabi_dsub>
 8005fbc:	ec53 2b18 	vmov	r2, r3, d8
 8005fc0:	f7fa fd94 	bl	8000aec <__aeabi_dcmplt>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	f040 80b9 	bne.w	800613c <_dtoa_r+0x6fc>
 8005fca:	9b02      	ldr	r3, [sp, #8]
 8005fcc:	429d      	cmp	r5, r3
 8005fce:	f43f af75 	beq.w	8005ebc <_dtoa_r+0x47c>
 8005fd2:	4b2f      	ldr	r3, [pc, #188]	; (8006090 <_dtoa_r+0x650>)
 8005fd4:	ec51 0b18 	vmov	r0, r1, d8
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f7fa fb15 	bl	8000608 <__aeabi_dmul>
 8005fde:	4b2c      	ldr	r3, [pc, #176]	; (8006090 <_dtoa_r+0x650>)
 8005fe0:	ec41 0b18 	vmov	d8, r0, r1
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	4639      	mov	r1, r7
 8005fea:	f7fa fb0d 	bl	8000608 <__aeabi_dmul>
 8005fee:	4606      	mov	r6, r0
 8005ff0:	460f      	mov	r7, r1
 8005ff2:	e7c4      	b.n	8005f7e <_dtoa_r+0x53e>
 8005ff4:	ec51 0b17 	vmov	r0, r1, d7
 8005ff8:	f7fa fb06 	bl	8000608 <__aeabi_dmul>
 8005ffc:	9b02      	ldr	r3, [sp, #8]
 8005ffe:	9d00      	ldr	r5, [sp, #0]
 8006000:	930c      	str	r3, [sp, #48]	; 0x30
 8006002:	ec41 0b18 	vmov	d8, r0, r1
 8006006:	4639      	mov	r1, r7
 8006008:	4630      	mov	r0, r6
 800600a:	f7fa fdad 	bl	8000b68 <__aeabi_d2iz>
 800600e:	9011      	str	r0, [sp, #68]	; 0x44
 8006010:	f7fa fa90 	bl	8000534 <__aeabi_i2d>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4630      	mov	r0, r6
 800601a:	4639      	mov	r1, r7
 800601c:	f7fa f93c 	bl	8000298 <__aeabi_dsub>
 8006020:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006022:	3330      	adds	r3, #48	; 0x30
 8006024:	f805 3b01 	strb.w	r3, [r5], #1
 8006028:	9b02      	ldr	r3, [sp, #8]
 800602a:	429d      	cmp	r5, r3
 800602c:	4606      	mov	r6, r0
 800602e:	460f      	mov	r7, r1
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	d134      	bne.n	80060a0 <_dtoa_r+0x660>
 8006036:	4b19      	ldr	r3, [pc, #100]	; (800609c <_dtoa_r+0x65c>)
 8006038:	ec51 0b18 	vmov	r0, r1, d8
 800603c:	f7fa f92e 	bl	800029c <__adddf3>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4630      	mov	r0, r6
 8006046:	4639      	mov	r1, r7
 8006048:	f7fa fd6e 	bl	8000b28 <__aeabi_dcmpgt>
 800604c:	2800      	cmp	r0, #0
 800604e:	d175      	bne.n	800613c <_dtoa_r+0x6fc>
 8006050:	ec53 2b18 	vmov	r2, r3, d8
 8006054:	4911      	ldr	r1, [pc, #68]	; (800609c <_dtoa_r+0x65c>)
 8006056:	2000      	movs	r0, #0
 8006058:	f7fa f91e 	bl	8000298 <__aeabi_dsub>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4630      	mov	r0, r6
 8006062:	4639      	mov	r1, r7
 8006064:	f7fa fd42 	bl	8000aec <__aeabi_dcmplt>
 8006068:	2800      	cmp	r0, #0
 800606a:	f43f af27 	beq.w	8005ebc <_dtoa_r+0x47c>
 800606e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006070:	1e6b      	subs	r3, r5, #1
 8006072:	930c      	str	r3, [sp, #48]	; 0x30
 8006074:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006078:	2b30      	cmp	r3, #48	; 0x30
 800607a:	d0f8      	beq.n	800606e <_dtoa_r+0x62e>
 800607c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006080:	e04a      	b.n	8006118 <_dtoa_r+0x6d8>
 8006082:	bf00      	nop
 8006084:	08008a40 	.word	0x08008a40
 8006088:	08008a18 	.word	0x08008a18
 800608c:	3ff00000 	.word	0x3ff00000
 8006090:	40240000 	.word	0x40240000
 8006094:	401c0000 	.word	0x401c0000
 8006098:	40140000 	.word	0x40140000
 800609c:	3fe00000 	.word	0x3fe00000
 80060a0:	4baf      	ldr	r3, [pc, #700]	; (8006360 <_dtoa_r+0x920>)
 80060a2:	f7fa fab1 	bl	8000608 <__aeabi_dmul>
 80060a6:	4606      	mov	r6, r0
 80060a8:	460f      	mov	r7, r1
 80060aa:	e7ac      	b.n	8006006 <_dtoa_r+0x5c6>
 80060ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060b0:	9d00      	ldr	r5, [sp, #0]
 80060b2:	4642      	mov	r2, r8
 80060b4:	464b      	mov	r3, r9
 80060b6:	4630      	mov	r0, r6
 80060b8:	4639      	mov	r1, r7
 80060ba:	f7fa fbcf 	bl	800085c <__aeabi_ddiv>
 80060be:	f7fa fd53 	bl	8000b68 <__aeabi_d2iz>
 80060c2:	9002      	str	r0, [sp, #8]
 80060c4:	f7fa fa36 	bl	8000534 <__aeabi_i2d>
 80060c8:	4642      	mov	r2, r8
 80060ca:	464b      	mov	r3, r9
 80060cc:	f7fa fa9c 	bl	8000608 <__aeabi_dmul>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4630      	mov	r0, r6
 80060d6:	4639      	mov	r1, r7
 80060d8:	f7fa f8de 	bl	8000298 <__aeabi_dsub>
 80060dc:	9e02      	ldr	r6, [sp, #8]
 80060de:	9f01      	ldr	r7, [sp, #4]
 80060e0:	3630      	adds	r6, #48	; 0x30
 80060e2:	f805 6b01 	strb.w	r6, [r5], #1
 80060e6:	9e00      	ldr	r6, [sp, #0]
 80060e8:	1bae      	subs	r6, r5, r6
 80060ea:	42b7      	cmp	r7, r6
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	d137      	bne.n	8006162 <_dtoa_r+0x722>
 80060f2:	f7fa f8d3 	bl	800029c <__adddf3>
 80060f6:	4642      	mov	r2, r8
 80060f8:	464b      	mov	r3, r9
 80060fa:	4606      	mov	r6, r0
 80060fc:	460f      	mov	r7, r1
 80060fe:	f7fa fd13 	bl	8000b28 <__aeabi_dcmpgt>
 8006102:	b9c8      	cbnz	r0, 8006138 <_dtoa_r+0x6f8>
 8006104:	4642      	mov	r2, r8
 8006106:	464b      	mov	r3, r9
 8006108:	4630      	mov	r0, r6
 800610a:	4639      	mov	r1, r7
 800610c:	f7fa fce4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006110:	b110      	cbz	r0, 8006118 <_dtoa_r+0x6d8>
 8006112:	9b02      	ldr	r3, [sp, #8]
 8006114:	07d9      	lsls	r1, r3, #31
 8006116:	d40f      	bmi.n	8006138 <_dtoa_r+0x6f8>
 8006118:	4620      	mov	r0, r4
 800611a:	4659      	mov	r1, fp
 800611c:	f000 fe58 	bl	8006dd0 <_Bfree>
 8006120:	2300      	movs	r3, #0
 8006122:	702b      	strb	r3, [r5, #0]
 8006124:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006126:	f10a 0001 	add.w	r0, sl, #1
 800612a:	6018      	str	r0, [r3, #0]
 800612c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800612e:	2b00      	cmp	r3, #0
 8006130:	f43f acd8 	beq.w	8005ae4 <_dtoa_r+0xa4>
 8006134:	601d      	str	r5, [r3, #0]
 8006136:	e4d5      	b.n	8005ae4 <_dtoa_r+0xa4>
 8006138:	f8cd a01c 	str.w	sl, [sp, #28]
 800613c:	462b      	mov	r3, r5
 800613e:	461d      	mov	r5, r3
 8006140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006144:	2a39      	cmp	r2, #57	; 0x39
 8006146:	d108      	bne.n	800615a <_dtoa_r+0x71a>
 8006148:	9a00      	ldr	r2, [sp, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d1f7      	bne.n	800613e <_dtoa_r+0x6fe>
 800614e:	9a07      	ldr	r2, [sp, #28]
 8006150:	9900      	ldr	r1, [sp, #0]
 8006152:	3201      	adds	r2, #1
 8006154:	9207      	str	r2, [sp, #28]
 8006156:	2230      	movs	r2, #48	; 0x30
 8006158:	700a      	strb	r2, [r1, #0]
 800615a:	781a      	ldrb	r2, [r3, #0]
 800615c:	3201      	adds	r2, #1
 800615e:	701a      	strb	r2, [r3, #0]
 8006160:	e78c      	b.n	800607c <_dtoa_r+0x63c>
 8006162:	4b7f      	ldr	r3, [pc, #508]	; (8006360 <_dtoa_r+0x920>)
 8006164:	2200      	movs	r2, #0
 8006166:	f7fa fa4f 	bl	8000608 <__aeabi_dmul>
 800616a:	2200      	movs	r2, #0
 800616c:	2300      	movs	r3, #0
 800616e:	4606      	mov	r6, r0
 8006170:	460f      	mov	r7, r1
 8006172:	f7fa fcb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006176:	2800      	cmp	r0, #0
 8006178:	d09b      	beq.n	80060b2 <_dtoa_r+0x672>
 800617a:	e7cd      	b.n	8006118 <_dtoa_r+0x6d8>
 800617c:	9a08      	ldr	r2, [sp, #32]
 800617e:	2a00      	cmp	r2, #0
 8006180:	f000 80c4 	beq.w	800630c <_dtoa_r+0x8cc>
 8006184:	9a05      	ldr	r2, [sp, #20]
 8006186:	2a01      	cmp	r2, #1
 8006188:	f300 80a8 	bgt.w	80062dc <_dtoa_r+0x89c>
 800618c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800618e:	2a00      	cmp	r2, #0
 8006190:	f000 80a0 	beq.w	80062d4 <_dtoa_r+0x894>
 8006194:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006198:	9e06      	ldr	r6, [sp, #24]
 800619a:	4645      	mov	r5, r8
 800619c:	9a04      	ldr	r2, [sp, #16]
 800619e:	2101      	movs	r1, #1
 80061a0:	441a      	add	r2, r3
 80061a2:	4620      	mov	r0, r4
 80061a4:	4498      	add	r8, r3
 80061a6:	9204      	str	r2, [sp, #16]
 80061a8:	f000 ff18 	bl	8006fdc <__i2b>
 80061ac:	4607      	mov	r7, r0
 80061ae:	2d00      	cmp	r5, #0
 80061b0:	dd0b      	ble.n	80061ca <_dtoa_r+0x78a>
 80061b2:	9b04      	ldr	r3, [sp, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	dd08      	ble.n	80061ca <_dtoa_r+0x78a>
 80061b8:	42ab      	cmp	r3, r5
 80061ba:	9a04      	ldr	r2, [sp, #16]
 80061bc:	bfa8      	it	ge
 80061be:	462b      	movge	r3, r5
 80061c0:	eba8 0803 	sub.w	r8, r8, r3
 80061c4:	1aed      	subs	r5, r5, r3
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	9304      	str	r3, [sp, #16]
 80061ca:	9b06      	ldr	r3, [sp, #24]
 80061cc:	b1fb      	cbz	r3, 800620e <_dtoa_r+0x7ce>
 80061ce:	9b08      	ldr	r3, [sp, #32]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 809f 	beq.w	8006314 <_dtoa_r+0x8d4>
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	dd11      	ble.n	80061fe <_dtoa_r+0x7be>
 80061da:	4639      	mov	r1, r7
 80061dc:	4632      	mov	r2, r6
 80061de:	4620      	mov	r0, r4
 80061e0:	f000 ffb8 	bl	8007154 <__pow5mult>
 80061e4:	465a      	mov	r2, fp
 80061e6:	4601      	mov	r1, r0
 80061e8:	4607      	mov	r7, r0
 80061ea:	4620      	mov	r0, r4
 80061ec:	f000 ff0c 	bl	8007008 <__multiply>
 80061f0:	4659      	mov	r1, fp
 80061f2:	9007      	str	r0, [sp, #28]
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 fdeb 	bl	8006dd0 <_Bfree>
 80061fa:	9b07      	ldr	r3, [sp, #28]
 80061fc:	469b      	mov	fp, r3
 80061fe:	9b06      	ldr	r3, [sp, #24]
 8006200:	1b9a      	subs	r2, r3, r6
 8006202:	d004      	beq.n	800620e <_dtoa_r+0x7ce>
 8006204:	4659      	mov	r1, fp
 8006206:	4620      	mov	r0, r4
 8006208:	f000 ffa4 	bl	8007154 <__pow5mult>
 800620c:	4683      	mov	fp, r0
 800620e:	2101      	movs	r1, #1
 8006210:	4620      	mov	r0, r4
 8006212:	f000 fee3 	bl	8006fdc <__i2b>
 8006216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006218:	2b00      	cmp	r3, #0
 800621a:	4606      	mov	r6, r0
 800621c:	dd7c      	ble.n	8006318 <_dtoa_r+0x8d8>
 800621e:	461a      	mov	r2, r3
 8006220:	4601      	mov	r1, r0
 8006222:	4620      	mov	r0, r4
 8006224:	f000 ff96 	bl	8007154 <__pow5mult>
 8006228:	9b05      	ldr	r3, [sp, #20]
 800622a:	2b01      	cmp	r3, #1
 800622c:	4606      	mov	r6, r0
 800622e:	dd76      	ble.n	800631e <_dtoa_r+0x8de>
 8006230:	2300      	movs	r3, #0
 8006232:	9306      	str	r3, [sp, #24]
 8006234:	6933      	ldr	r3, [r6, #16]
 8006236:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800623a:	6918      	ldr	r0, [r3, #16]
 800623c:	f000 fe7e 	bl	8006f3c <__hi0bits>
 8006240:	f1c0 0020 	rsb	r0, r0, #32
 8006244:	9b04      	ldr	r3, [sp, #16]
 8006246:	4418      	add	r0, r3
 8006248:	f010 001f 	ands.w	r0, r0, #31
 800624c:	f000 8086 	beq.w	800635c <_dtoa_r+0x91c>
 8006250:	f1c0 0320 	rsb	r3, r0, #32
 8006254:	2b04      	cmp	r3, #4
 8006256:	dd7f      	ble.n	8006358 <_dtoa_r+0x918>
 8006258:	f1c0 001c 	rsb	r0, r0, #28
 800625c:	9b04      	ldr	r3, [sp, #16]
 800625e:	4403      	add	r3, r0
 8006260:	4480      	add	r8, r0
 8006262:	4405      	add	r5, r0
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	f1b8 0f00 	cmp.w	r8, #0
 800626a:	dd05      	ble.n	8006278 <_dtoa_r+0x838>
 800626c:	4659      	mov	r1, fp
 800626e:	4642      	mov	r2, r8
 8006270:	4620      	mov	r0, r4
 8006272:	f000 ffc9 	bl	8007208 <__lshift>
 8006276:	4683      	mov	fp, r0
 8006278:	9b04      	ldr	r3, [sp, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	dd05      	ble.n	800628a <_dtoa_r+0x84a>
 800627e:	4631      	mov	r1, r6
 8006280:	461a      	mov	r2, r3
 8006282:	4620      	mov	r0, r4
 8006284:	f000 ffc0 	bl	8007208 <__lshift>
 8006288:	4606      	mov	r6, r0
 800628a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800628c:	2b00      	cmp	r3, #0
 800628e:	d069      	beq.n	8006364 <_dtoa_r+0x924>
 8006290:	4631      	mov	r1, r6
 8006292:	4658      	mov	r0, fp
 8006294:	f001 f824 	bl	80072e0 <__mcmp>
 8006298:	2800      	cmp	r0, #0
 800629a:	da63      	bge.n	8006364 <_dtoa_r+0x924>
 800629c:	2300      	movs	r3, #0
 800629e:	4659      	mov	r1, fp
 80062a0:	220a      	movs	r2, #10
 80062a2:	4620      	mov	r0, r4
 80062a4:	f000 fdb6 	bl	8006e14 <__multadd>
 80062a8:	9b08      	ldr	r3, [sp, #32]
 80062aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062ae:	4683      	mov	fp, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 818f 	beq.w	80065d4 <_dtoa_r+0xb94>
 80062b6:	4639      	mov	r1, r7
 80062b8:	2300      	movs	r3, #0
 80062ba:	220a      	movs	r2, #10
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 fda9 	bl	8006e14 <__multadd>
 80062c2:	f1b9 0f00 	cmp.w	r9, #0
 80062c6:	4607      	mov	r7, r0
 80062c8:	f300 808e 	bgt.w	80063e8 <_dtoa_r+0x9a8>
 80062cc:	9b05      	ldr	r3, [sp, #20]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	dc50      	bgt.n	8006374 <_dtoa_r+0x934>
 80062d2:	e089      	b.n	80063e8 <_dtoa_r+0x9a8>
 80062d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062da:	e75d      	b.n	8006198 <_dtoa_r+0x758>
 80062dc:	9b01      	ldr	r3, [sp, #4]
 80062de:	1e5e      	subs	r6, r3, #1
 80062e0:	9b06      	ldr	r3, [sp, #24]
 80062e2:	42b3      	cmp	r3, r6
 80062e4:	bfbf      	itttt	lt
 80062e6:	9b06      	ldrlt	r3, [sp, #24]
 80062e8:	9606      	strlt	r6, [sp, #24]
 80062ea:	1af2      	sublt	r2, r6, r3
 80062ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80062ee:	bfb6      	itet	lt
 80062f0:	189b      	addlt	r3, r3, r2
 80062f2:	1b9e      	subge	r6, r3, r6
 80062f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80062f6:	9b01      	ldr	r3, [sp, #4]
 80062f8:	bfb8      	it	lt
 80062fa:	2600      	movlt	r6, #0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	bfb5      	itete	lt
 8006300:	eba8 0503 	sublt.w	r5, r8, r3
 8006304:	9b01      	ldrge	r3, [sp, #4]
 8006306:	2300      	movlt	r3, #0
 8006308:	4645      	movge	r5, r8
 800630a:	e747      	b.n	800619c <_dtoa_r+0x75c>
 800630c:	9e06      	ldr	r6, [sp, #24]
 800630e:	9f08      	ldr	r7, [sp, #32]
 8006310:	4645      	mov	r5, r8
 8006312:	e74c      	b.n	80061ae <_dtoa_r+0x76e>
 8006314:	9a06      	ldr	r2, [sp, #24]
 8006316:	e775      	b.n	8006204 <_dtoa_r+0x7c4>
 8006318:	9b05      	ldr	r3, [sp, #20]
 800631a:	2b01      	cmp	r3, #1
 800631c:	dc18      	bgt.n	8006350 <_dtoa_r+0x910>
 800631e:	9b02      	ldr	r3, [sp, #8]
 8006320:	b9b3      	cbnz	r3, 8006350 <_dtoa_r+0x910>
 8006322:	9b03      	ldr	r3, [sp, #12]
 8006324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006328:	b9a3      	cbnz	r3, 8006354 <_dtoa_r+0x914>
 800632a:	9b03      	ldr	r3, [sp, #12]
 800632c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006330:	0d1b      	lsrs	r3, r3, #20
 8006332:	051b      	lsls	r3, r3, #20
 8006334:	b12b      	cbz	r3, 8006342 <_dtoa_r+0x902>
 8006336:	9b04      	ldr	r3, [sp, #16]
 8006338:	3301      	adds	r3, #1
 800633a:	9304      	str	r3, [sp, #16]
 800633c:	f108 0801 	add.w	r8, r8, #1
 8006340:	2301      	movs	r3, #1
 8006342:	9306      	str	r3, [sp, #24]
 8006344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006346:	2b00      	cmp	r3, #0
 8006348:	f47f af74 	bne.w	8006234 <_dtoa_r+0x7f4>
 800634c:	2001      	movs	r0, #1
 800634e:	e779      	b.n	8006244 <_dtoa_r+0x804>
 8006350:	2300      	movs	r3, #0
 8006352:	e7f6      	b.n	8006342 <_dtoa_r+0x902>
 8006354:	9b02      	ldr	r3, [sp, #8]
 8006356:	e7f4      	b.n	8006342 <_dtoa_r+0x902>
 8006358:	d085      	beq.n	8006266 <_dtoa_r+0x826>
 800635a:	4618      	mov	r0, r3
 800635c:	301c      	adds	r0, #28
 800635e:	e77d      	b.n	800625c <_dtoa_r+0x81c>
 8006360:	40240000 	.word	0x40240000
 8006364:	9b01      	ldr	r3, [sp, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	dc38      	bgt.n	80063dc <_dtoa_r+0x99c>
 800636a:	9b05      	ldr	r3, [sp, #20]
 800636c:	2b02      	cmp	r3, #2
 800636e:	dd35      	ble.n	80063dc <_dtoa_r+0x99c>
 8006370:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006374:	f1b9 0f00 	cmp.w	r9, #0
 8006378:	d10d      	bne.n	8006396 <_dtoa_r+0x956>
 800637a:	4631      	mov	r1, r6
 800637c:	464b      	mov	r3, r9
 800637e:	2205      	movs	r2, #5
 8006380:	4620      	mov	r0, r4
 8006382:	f000 fd47 	bl	8006e14 <__multadd>
 8006386:	4601      	mov	r1, r0
 8006388:	4606      	mov	r6, r0
 800638a:	4658      	mov	r0, fp
 800638c:	f000 ffa8 	bl	80072e0 <__mcmp>
 8006390:	2800      	cmp	r0, #0
 8006392:	f73f adbd 	bgt.w	8005f10 <_dtoa_r+0x4d0>
 8006396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006398:	9d00      	ldr	r5, [sp, #0]
 800639a:	ea6f 0a03 	mvn.w	sl, r3
 800639e:	f04f 0800 	mov.w	r8, #0
 80063a2:	4631      	mov	r1, r6
 80063a4:	4620      	mov	r0, r4
 80063a6:	f000 fd13 	bl	8006dd0 <_Bfree>
 80063aa:	2f00      	cmp	r7, #0
 80063ac:	f43f aeb4 	beq.w	8006118 <_dtoa_r+0x6d8>
 80063b0:	f1b8 0f00 	cmp.w	r8, #0
 80063b4:	d005      	beq.n	80063c2 <_dtoa_r+0x982>
 80063b6:	45b8      	cmp	r8, r7
 80063b8:	d003      	beq.n	80063c2 <_dtoa_r+0x982>
 80063ba:	4641      	mov	r1, r8
 80063bc:	4620      	mov	r0, r4
 80063be:	f000 fd07 	bl	8006dd0 <_Bfree>
 80063c2:	4639      	mov	r1, r7
 80063c4:	4620      	mov	r0, r4
 80063c6:	f000 fd03 	bl	8006dd0 <_Bfree>
 80063ca:	e6a5      	b.n	8006118 <_dtoa_r+0x6d8>
 80063cc:	2600      	movs	r6, #0
 80063ce:	4637      	mov	r7, r6
 80063d0:	e7e1      	b.n	8006396 <_dtoa_r+0x956>
 80063d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80063d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80063d8:	4637      	mov	r7, r6
 80063da:	e599      	b.n	8005f10 <_dtoa_r+0x4d0>
 80063dc:	9b08      	ldr	r3, [sp, #32]
 80063de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 80fd 	beq.w	80065e2 <_dtoa_r+0xba2>
 80063e8:	2d00      	cmp	r5, #0
 80063ea:	dd05      	ble.n	80063f8 <_dtoa_r+0x9b8>
 80063ec:	4639      	mov	r1, r7
 80063ee:	462a      	mov	r2, r5
 80063f0:	4620      	mov	r0, r4
 80063f2:	f000 ff09 	bl	8007208 <__lshift>
 80063f6:	4607      	mov	r7, r0
 80063f8:	9b06      	ldr	r3, [sp, #24]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d05c      	beq.n	80064b8 <_dtoa_r+0xa78>
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	4620      	mov	r0, r4
 8006402:	f000 fca5 	bl	8006d50 <_Balloc>
 8006406:	4605      	mov	r5, r0
 8006408:	b928      	cbnz	r0, 8006416 <_dtoa_r+0x9d6>
 800640a:	4b80      	ldr	r3, [pc, #512]	; (800660c <_dtoa_r+0xbcc>)
 800640c:	4602      	mov	r2, r0
 800640e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006412:	f7ff bb2e 	b.w	8005a72 <_dtoa_r+0x32>
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	3202      	adds	r2, #2
 800641a:	0092      	lsls	r2, r2, #2
 800641c:	f107 010c 	add.w	r1, r7, #12
 8006420:	300c      	adds	r0, #12
 8006422:	f000 fc87 	bl	8006d34 <memcpy>
 8006426:	2201      	movs	r2, #1
 8006428:	4629      	mov	r1, r5
 800642a:	4620      	mov	r0, r4
 800642c:	f000 feec 	bl	8007208 <__lshift>
 8006430:	9b00      	ldr	r3, [sp, #0]
 8006432:	3301      	adds	r3, #1
 8006434:	9301      	str	r3, [sp, #4]
 8006436:	9b00      	ldr	r3, [sp, #0]
 8006438:	444b      	add	r3, r9
 800643a:	9307      	str	r3, [sp, #28]
 800643c:	9b02      	ldr	r3, [sp, #8]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	46b8      	mov	r8, r7
 8006444:	9306      	str	r3, [sp, #24]
 8006446:	4607      	mov	r7, r0
 8006448:	9b01      	ldr	r3, [sp, #4]
 800644a:	4631      	mov	r1, r6
 800644c:	3b01      	subs	r3, #1
 800644e:	4658      	mov	r0, fp
 8006450:	9302      	str	r3, [sp, #8]
 8006452:	f7ff fa67 	bl	8005924 <quorem>
 8006456:	4603      	mov	r3, r0
 8006458:	3330      	adds	r3, #48	; 0x30
 800645a:	9004      	str	r0, [sp, #16]
 800645c:	4641      	mov	r1, r8
 800645e:	4658      	mov	r0, fp
 8006460:	9308      	str	r3, [sp, #32]
 8006462:	f000 ff3d 	bl	80072e0 <__mcmp>
 8006466:	463a      	mov	r2, r7
 8006468:	4681      	mov	r9, r0
 800646a:	4631      	mov	r1, r6
 800646c:	4620      	mov	r0, r4
 800646e:	f000 ff53 	bl	8007318 <__mdiff>
 8006472:	68c2      	ldr	r2, [r0, #12]
 8006474:	9b08      	ldr	r3, [sp, #32]
 8006476:	4605      	mov	r5, r0
 8006478:	bb02      	cbnz	r2, 80064bc <_dtoa_r+0xa7c>
 800647a:	4601      	mov	r1, r0
 800647c:	4658      	mov	r0, fp
 800647e:	f000 ff2f 	bl	80072e0 <__mcmp>
 8006482:	9b08      	ldr	r3, [sp, #32]
 8006484:	4602      	mov	r2, r0
 8006486:	4629      	mov	r1, r5
 8006488:	4620      	mov	r0, r4
 800648a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800648e:	f000 fc9f 	bl	8006dd0 <_Bfree>
 8006492:	9b05      	ldr	r3, [sp, #20]
 8006494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006496:	9d01      	ldr	r5, [sp, #4]
 8006498:	ea43 0102 	orr.w	r1, r3, r2
 800649c:	9b06      	ldr	r3, [sp, #24]
 800649e:	430b      	orrs	r3, r1
 80064a0:	9b08      	ldr	r3, [sp, #32]
 80064a2:	d10d      	bne.n	80064c0 <_dtoa_r+0xa80>
 80064a4:	2b39      	cmp	r3, #57	; 0x39
 80064a6:	d029      	beq.n	80064fc <_dtoa_r+0xabc>
 80064a8:	f1b9 0f00 	cmp.w	r9, #0
 80064ac:	dd01      	ble.n	80064b2 <_dtoa_r+0xa72>
 80064ae:	9b04      	ldr	r3, [sp, #16]
 80064b0:	3331      	adds	r3, #49	; 0x31
 80064b2:	9a02      	ldr	r2, [sp, #8]
 80064b4:	7013      	strb	r3, [r2, #0]
 80064b6:	e774      	b.n	80063a2 <_dtoa_r+0x962>
 80064b8:	4638      	mov	r0, r7
 80064ba:	e7b9      	b.n	8006430 <_dtoa_r+0x9f0>
 80064bc:	2201      	movs	r2, #1
 80064be:	e7e2      	b.n	8006486 <_dtoa_r+0xa46>
 80064c0:	f1b9 0f00 	cmp.w	r9, #0
 80064c4:	db06      	blt.n	80064d4 <_dtoa_r+0xa94>
 80064c6:	9905      	ldr	r1, [sp, #20]
 80064c8:	ea41 0909 	orr.w	r9, r1, r9
 80064cc:	9906      	ldr	r1, [sp, #24]
 80064ce:	ea59 0101 	orrs.w	r1, r9, r1
 80064d2:	d120      	bne.n	8006516 <_dtoa_r+0xad6>
 80064d4:	2a00      	cmp	r2, #0
 80064d6:	ddec      	ble.n	80064b2 <_dtoa_r+0xa72>
 80064d8:	4659      	mov	r1, fp
 80064da:	2201      	movs	r2, #1
 80064dc:	4620      	mov	r0, r4
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	f000 fe92 	bl	8007208 <__lshift>
 80064e4:	4631      	mov	r1, r6
 80064e6:	4683      	mov	fp, r0
 80064e8:	f000 fefa 	bl	80072e0 <__mcmp>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	9b01      	ldr	r3, [sp, #4]
 80064f0:	dc02      	bgt.n	80064f8 <_dtoa_r+0xab8>
 80064f2:	d1de      	bne.n	80064b2 <_dtoa_r+0xa72>
 80064f4:	07da      	lsls	r2, r3, #31
 80064f6:	d5dc      	bpl.n	80064b2 <_dtoa_r+0xa72>
 80064f8:	2b39      	cmp	r3, #57	; 0x39
 80064fa:	d1d8      	bne.n	80064ae <_dtoa_r+0xa6e>
 80064fc:	9a02      	ldr	r2, [sp, #8]
 80064fe:	2339      	movs	r3, #57	; 0x39
 8006500:	7013      	strb	r3, [r2, #0]
 8006502:	462b      	mov	r3, r5
 8006504:	461d      	mov	r5, r3
 8006506:	3b01      	subs	r3, #1
 8006508:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800650c:	2a39      	cmp	r2, #57	; 0x39
 800650e:	d050      	beq.n	80065b2 <_dtoa_r+0xb72>
 8006510:	3201      	adds	r2, #1
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	e745      	b.n	80063a2 <_dtoa_r+0x962>
 8006516:	2a00      	cmp	r2, #0
 8006518:	dd03      	ble.n	8006522 <_dtoa_r+0xae2>
 800651a:	2b39      	cmp	r3, #57	; 0x39
 800651c:	d0ee      	beq.n	80064fc <_dtoa_r+0xabc>
 800651e:	3301      	adds	r3, #1
 8006520:	e7c7      	b.n	80064b2 <_dtoa_r+0xa72>
 8006522:	9a01      	ldr	r2, [sp, #4]
 8006524:	9907      	ldr	r1, [sp, #28]
 8006526:	f802 3c01 	strb.w	r3, [r2, #-1]
 800652a:	428a      	cmp	r2, r1
 800652c:	d02a      	beq.n	8006584 <_dtoa_r+0xb44>
 800652e:	4659      	mov	r1, fp
 8006530:	2300      	movs	r3, #0
 8006532:	220a      	movs	r2, #10
 8006534:	4620      	mov	r0, r4
 8006536:	f000 fc6d 	bl	8006e14 <__multadd>
 800653a:	45b8      	cmp	r8, r7
 800653c:	4683      	mov	fp, r0
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	f04f 020a 	mov.w	r2, #10
 8006546:	4641      	mov	r1, r8
 8006548:	4620      	mov	r0, r4
 800654a:	d107      	bne.n	800655c <_dtoa_r+0xb1c>
 800654c:	f000 fc62 	bl	8006e14 <__multadd>
 8006550:	4680      	mov	r8, r0
 8006552:	4607      	mov	r7, r0
 8006554:	9b01      	ldr	r3, [sp, #4]
 8006556:	3301      	adds	r3, #1
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	e775      	b.n	8006448 <_dtoa_r+0xa08>
 800655c:	f000 fc5a 	bl	8006e14 <__multadd>
 8006560:	4639      	mov	r1, r7
 8006562:	4680      	mov	r8, r0
 8006564:	2300      	movs	r3, #0
 8006566:	220a      	movs	r2, #10
 8006568:	4620      	mov	r0, r4
 800656a:	f000 fc53 	bl	8006e14 <__multadd>
 800656e:	4607      	mov	r7, r0
 8006570:	e7f0      	b.n	8006554 <_dtoa_r+0xb14>
 8006572:	f1b9 0f00 	cmp.w	r9, #0
 8006576:	9a00      	ldr	r2, [sp, #0]
 8006578:	bfcc      	ite	gt
 800657a:	464d      	movgt	r5, r9
 800657c:	2501      	movle	r5, #1
 800657e:	4415      	add	r5, r2
 8006580:	f04f 0800 	mov.w	r8, #0
 8006584:	4659      	mov	r1, fp
 8006586:	2201      	movs	r2, #1
 8006588:	4620      	mov	r0, r4
 800658a:	9301      	str	r3, [sp, #4]
 800658c:	f000 fe3c 	bl	8007208 <__lshift>
 8006590:	4631      	mov	r1, r6
 8006592:	4683      	mov	fp, r0
 8006594:	f000 fea4 	bl	80072e0 <__mcmp>
 8006598:	2800      	cmp	r0, #0
 800659a:	dcb2      	bgt.n	8006502 <_dtoa_r+0xac2>
 800659c:	d102      	bne.n	80065a4 <_dtoa_r+0xb64>
 800659e:	9b01      	ldr	r3, [sp, #4]
 80065a0:	07db      	lsls	r3, r3, #31
 80065a2:	d4ae      	bmi.n	8006502 <_dtoa_r+0xac2>
 80065a4:	462b      	mov	r3, r5
 80065a6:	461d      	mov	r5, r3
 80065a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065ac:	2a30      	cmp	r2, #48	; 0x30
 80065ae:	d0fa      	beq.n	80065a6 <_dtoa_r+0xb66>
 80065b0:	e6f7      	b.n	80063a2 <_dtoa_r+0x962>
 80065b2:	9a00      	ldr	r2, [sp, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d1a5      	bne.n	8006504 <_dtoa_r+0xac4>
 80065b8:	f10a 0a01 	add.w	sl, sl, #1
 80065bc:	2331      	movs	r3, #49	; 0x31
 80065be:	e779      	b.n	80064b4 <_dtoa_r+0xa74>
 80065c0:	4b13      	ldr	r3, [pc, #76]	; (8006610 <_dtoa_r+0xbd0>)
 80065c2:	f7ff baaf 	b.w	8005b24 <_dtoa_r+0xe4>
 80065c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f47f aa86 	bne.w	8005ada <_dtoa_r+0x9a>
 80065ce:	4b11      	ldr	r3, [pc, #68]	; (8006614 <_dtoa_r+0xbd4>)
 80065d0:	f7ff baa8 	b.w	8005b24 <_dtoa_r+0xe4>
 80065d4:	f1b9 0f00 	cmp.w	r9, #0
 80065d8:	dc03      	bgt.n	80065e2 <_dtoa_r+0xba2>
 80065da:	9b05      	ldr	r3, [sp, #20]
 80065dc:	2b02      	cmp	r3, #2
 80065de:	f73f aec9 	bgt.w	8006374 <_dtoa_r+0x934>
 80065e2:	9d00      	ldr	r5, [sp, #0]
 80065e4:	4631      	mov	r1, r6
 80065e6:	4658      	mov	r0, fp
 80065e8:	f7ff f99c 	bl	8005924 <quorem>
 80065ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80065f0:	f805 3b01 	strb.w	r3, [r5], #1
 80065f4:	9a00      	ldr	r2, [sp, #0]
 80065f6:	1aaa      	subs	r2, r5, r2
 80065f8:	4591      	cmp	r9, r2
 80065fa:	ddba      	ble.n	8006572 <_dtoa_r+0xb32>
 80065fc:	4659      	mov	r1, fp
 80065fe:	2300      	movs	r3, #0
 8006600:	220a      	movs	r2, #10
 8006602:	4620      	mov	r0, r4
 8006604:	f000 fc06 	bl	8006e14 <__multadd>
 8006608:	4683      	mov	fp, r0
 800660a:	e7eb      	b.n	80065e4 <_dtoa_r+0xba4>
 800660c:	08008924 	.word	0x08008924
 8006610:	08008724 	.word	0x08008724
 8006614:	080088a1 	.word	0x080088a1

08006618 <rshift>:
 8006618:	6903      	ldr	r3, [r0, #16]
 800661a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800661e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006622:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006626:	f100 0414 	add.w	r4, r0, #20
 800662a:	dd45      	ble.n	80066b8 <rshift+0xa0>
 800662c:	f011 011f 	ands.w	r1, r1, #31
 8006630:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006634:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006638:	d10c      	bne.n	8006654 <rshift+0x3c>
 800663a:	f100 0710 	add.w	r7, r0, #16
 800663e:	4629      	mov	r1, r5
 8006640:	42b1      	cmp	r1, r6
 8006642:	d334      	bcc.n	80066ae <rshift+0x96>
 8006644:	1a9b      	subs	r3, r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	1eea      	subs	r2, r5, #3
 800664a:	4296      	cmp	r6, r2
 800664c:	bf38      	it	cc
 800664e:	2300      	movcc	r3, #0
 8006650:	4423      	add	r3, r4
 8006652:	e015      	b.n	8006680 <rshift+0x68>
 8006654:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006658:	f1c1 0820 	rsb	r8, r1, #32
 800665c:	40cf      	lsrs	r7, r1
 800665e:	f105 0e04 	add.w	lr, r5, #4
 8006662:	46a1      	mov	r9, r4
 8006664:	4576      	cmp	r6, lr
 8006666:	46f4      	mov	ip, lr
 8006668:	d815      	bhi.n	8006696 <rshift+0x7e>
 800666a:	1a9b      	subs	r3, r3, r2
 800666c:	009a      	lsls	r2, r3, #2
 800666e:	3a04      	subs	r2, #4
 8006670:	3501      	adds	r5, #1
 8006672:	42ae      	cmp	r6, r5
 8006674:	bf38      	it	cc
 8006676:	2200      	movcc	r2, #0
 8006678:	18a3      	adds	r3, r4, r2
 800667a:	50a7      	str	r7, [r4, r2]
 800667c:	b107      	cbz	r7, 8006680 <rshift+0x68>
 800667e:	3304      	adds	r3, #4
 8006680:	1b1a      	subs	r2, r3, r4
 8006682:	42a3      	cmp	r3, r4
 8006684:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006688:	bf08      	it	eq
 800668a:	2300      	moveq	r3, #0
 800668c:	6102      	str	r2, [r0, #16]
 800668e:	bf08      	it	eq
 8006690:	6143      	streq	r3, [r0, #20]
 8006692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006696:	f8dc c000 	ldr.w	ip, [ip]
 800669a:	fa0c fc08 	lsl.w	ip, ip, r8
 800669e:	ea4c 0707 	orr.w	r7, ip, r7
 80066a2:	f849 7b04 	str.w	r7, [r9], #4
 80066a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80066aa:	40cf      	lsrs	r7, r1
 80066ac:	e7da      	b.n	8006664 <rshift+0x4c>
 80066ae:	f851 cb04 	ldr.w	ip, [r1], #4
 80066b2:	f847 cf04 	str.w	ip, [r7, #4]!
 80066b6:	e7c3      	b.n	8006640 <rshift+0x28>
 80066b8:	4623      	mov	r3, r4
 80066ba:	e7e1      	b.n	8006680 <rshift+0x68>

080066bc <__hexdig_fun>:
 80066bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80066c0:	2b09      	cmp	r3, #9
 80066c2:	d802      	bhi.n	80066ca <__hexdig_fun+0xe>
 80066c4:	3820      	subs	r0, #32
 80066c6:	b2c0      	uxtb	r0, r0
 80066c8:	4770      	bx	lr
 80066ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80066ce:	2b05      	cmp	r3, #5
 80066d0:	d801      	bhi.n	80066d6 <__hexdig_fun+0x1a>
 80066d2:	3847      	subs	r0, #71	; 0x47
 80066d4:	e7f7      	b.n	80066c6 <__hexdig_fun+0xa>
 80066d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80066da:	2b05      	cmp	r3, #5
 80066dc:	d801      	bhi.n	80066e2 <__hexdig_fun+0x26>
 80066de:	3827      	subs	r0, #39	; 0x27
 80066e0:	e7f1      	b.n	80066c6 <__hexdig_fun+0xa>
 80066e2:	2000      	movs	r0, #0
 80066e4:	4770      	bx	lr
	...

080066e8 <__gethex>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	ed2d 8b02 	vpush	{d8}
 80066f0:	b089      	sub	sp, #36	; 0x24
 80066f2:	ee08 0a10 	vmov	s16, r0
 80066f6:	9304      	str	r3, [sp, #16]
 80066f8:	4bbc      	ldr	r3, [pc, #752]	; (80069ec <__gethex+0x304>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	9301      	str	r3, [sp, #4]
 80066fe:	4618      	mov	r0, r3
 8006700:	468b      	mov	fp, r1
 8006702:	4690      	mov	r8, r2
 8006704:	f7f9 fd6c 	bl	80001e0 <strlen>
 8006708:	9b01      	ldr	r3, [sp, #4]
 800670a:	f8db 2000 	ldr.w	r2, [fp]
 800670e:	4403      	add	r3, r0
 8006710:	4682      	mov	sl, r0
 8006712:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006716:	9305      	str	r3, [sp, #20]
 8006718:	1c93      	adds	r3, r2, #2
 800671a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800671e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006722:	32fe      	adds	r2, #254	; 0xfe
 8006724:	18d1      	adds	r1, r2, r3
 8006726:	461f      	mov	r7, r3
 8006728:	f813 0b01 	ldrb.w	r0, [r3], #1
 800672c:	9100      	str	r1, [sp, #0]
 800672e:	2830      	cmp	r0, #48	; 0x30
 8006730:	d0f8      	beq.n	8006724 <__gethex+0x3c>
 8006732:	f7ff ffc3 	bl	80066bc <__hexdig_fun>
 8006736:	4604      	mov	r4, r0
 8006738:	2800      	cmp	r0, #0
 800673a:	d13a      	bne.n	80067b2 <__gethex+0xca>
 800673c:	9901      	ldr	r1, [sp, #4]
 800673e:	4652      	mov	r2, sl
 8006740:	4638      	mov	r0, r7
 8006742:	f001 f9ed 	bl	8007b20 <strncmp>
 8006746:	4605      	mov	r5, r0
 8006748:	2800      	cmp	r0, #0
 800674a:	d168      	bne.n	800681e <__gethex+0x136>
 800674c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006750:	eb07 060a 	add.w	r6, r7, sl
 8006754:	f7ff ffb2 	bl	80066bc <__hexdig_fun>
 8006758:	2800      	cmp	r0, #0
 800675a:	d062      	beq.n	8006822 <__gethex+0x13a>
 800675c:	4633      	mov	r3, r6
 800675e:	7818      	ldrb	r0, [r3, #0]
 8006760:	2830      	cmp	r0, #48	; 0x30
 8006762:	461f      	mov	r7, r3
 8006764:	f103 0301 	add.w	r3, r3, #1
 8006768:	d0f9      	beq.n	800675e <__gethex+0x76>
 800676a:	f7ff ffa7 	bl	80066bc <__hexdig_fun>
 800676e:	2301      	movs	r3, #1
 8006770:	fab0 f480 	clz	r4, r0
 8006774:	0964      	lsrs	r4, r4, #5
 8006776:	4635      	mov	r5, r6
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	463a      	mov	r2, r7
 800677c:	4616      	mov	r6, r2
 800677e:	3201      	adds	r2, #1
 8006780:	7830      	ldrb	r0, [r6, #0]
 8006782:	f7ff ff9b 	bl	80066bc <__hexdig_fun>
 8006786:	2800      	cmp	r0, #0
 8006788:	d1f8      	bne.n	800677c <__gethex+0x94>
 800678a:	9901      	ldr	r1, [sp, #4]
 800678c:	4652      	mov	r2, sl
 800678e:	4630      	mov	r0, r6
 8006790:	f001 f9c6 	bl	8007b20 <strncmp>
 8006794:	b980      	cbnz	r0, 80067b8 <__gethex+0xd0>
 8006796:	b94d      	cbnz	r5, 80067ac <__gethex+0xc4>
 8006798:	eb06 050a 	add.w	r5, r6, sl
 800679c:	462a      	mov	r2, r5
 800679e:	4616      	mov	r6, r2
 80067a0:	3201      	adds	r2, #1
 80067a2:	7830      	ldrb	r0, [r6, #0]
 80067a4:	f7ff ff8a 	bl	80066bc <__hexdig_fun>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d1f8      	bne.n	800679e <__gethex+0xb6>
 80067ac:	1bad      	subs	r5, r5, r6
 80067ae:	00ad      	lsls	r5, r5, #2
 80067b0:	e004      	b.n	80067bc <__gethex+0xd4>
 80067b2:	2400      	movs	r4, #0
 80067b4:	4625      	mov	r5, r4
 80067b6:	e7e0      	b.n	800677a <__gethex+0x92>
 80067b8:	2d00      	cmp	r5, #0
 80067ba:	d1f7      	bne.n	80067ac <__gethex+0xc4>
 80067bc:	7833      	ldrb	r3, [r6, #0]
 80067be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80067c2:	2b50      	cmp	r3, #80	; 0x50
 80067c4:	d13b      	bne.n	800683e <__gethex+0x156>
 80067c6:	7873      	ldrb	r3, [r6, #1]
 80067c8:	2b2b      	cmp	r3, #43	; 0x2b
 80067ca:	d02c      	beq.n	8006826 <__gethex+0x13e>
 80067cc:	2b2d      	cmp	r3, #45	; 0x2d
 80067ce:	d02e      	beq.n	800682e <__gethex+0x146>
 80067d0:	1c71      	adds	r1, r6, #1
 80067d2:	f04f 0900 	mov.w	r9, #0
 80067d6:	7808      	ldrb	r0, [r1, #0]
 80067d8:	f7ff ff70 	bl	80066bc <__hexdig_fun>
 80067dc:	1e43      	subs	r3, r0, #1
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b18      	cmp	r3, #24
 80067e2:	d82c      	bhi.n	800683e <__gethex+0x156>
 80067e4:	f1a0 0210 	sub.w	r2, r0, #16
 80067e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80067ec:	f7ff ff66 	bl	80066bc <__hexdig_fun>
 80067f0:	1e43      	subs	r3, r0, #1
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b18      	cmp	r3, #24
 80067f6:	d91d      	bls.n	8006834 <__gethex+0x14c>
 80067f8:	f1b9 0f00 	cmp.w	r9, #0
 80067fc:	d000      	beq.n	8006800 <__gethex+0x118>
 80067fe:	4252      	negs	r2, r2
 8006800:	4415      	add	r5, r2
 8006802:	f8cb 1000 	str.w	r1, [fp]
 8006806:	b1e4      	cbz	r4, 8006842 <__gethex+0x15a>
 8006808:	9b00      	ldr	r3, [sp, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	bf14      	ite	ne
 800680e:	2700      	movne	r7, #0
 8006810:	2706      	moveq	r7, #6
 8006812:	4638      	mov	r0, r7
 8006814:	b009      	add	sp, #36	; 0x24
 8006816:	ecbd 8b02 	vpop	{d8}
 800681a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681e:	463e      	mov	r6, r7
 8006820:	4625      	mov	r5, r4
 8006822:	2401      	movs	r4, #1
 8006824:	e7ca      	b.n	80067bc <__gethex+0xd4>
 8006826:	f04f 0900 	mov.w	r9, #0
 800682a:	1cb1      	adds	r1, r6, #2
 800682c:	e7d3      	b.n	80067d6 <__gethex+0xee>
 800682e:	f04f 0901 	mov.w	r9, #1
 8006832:	e7fa      	b.n	800682a <__gethex+0x142>
 8006834:	230a      	movs	r3, #10
 8006836:	fb03 0202 	mla	r2, r3, r2, r0
 800683a:	3a10      	subs	r2, #16
 800683c:	e7d4      	b.n	80067e8 <__gethex+0x100>
 800683e:	4631      	mov	r1, r6
 8006840:	e7df      	b.n	8006802 <__gethex+0x11a>
 8006842:	1bf3      	subs	r3, r6, r7
 8006844:	3b01      	subs	r3, #1
 8006846:	4621      	mov	r1, r4
 8006848:	2b07      	cmp	r3, #7
 800684a:	dc0b      	bgt.n	8006864 <__gethex+0x17c>
 800684c:	ee18 0a10 	vmov	r0, s16
 8006850:	f000 fa7e 	bl	8006d50 <_Balloc>
 8006854:	4604      	mov	r4, r0
 8006856:	b940      	cbnz	r0, 800686a <__gethex+0x182>
 8006858:	4b65      	ldr	r3, [pc, #404]	; (80069f0 <__gethex+0x308>)
 800685a:	4602      	mov	r2, r0
 800685c:	21de      	movs	r1, #222	; 0xde
 800685e:	4865      	ldr	r0, [pc, #404]	; (80069f4 <__gethex+0x30c>)
 8006860:	f001 f97e 	bl	8007b60 <__assert_func>
 8006864:	3101      	adds	r1, #1
 8006866:	105b      	asrs	r3, r3, #1
 8006868:	e7ee      	b.n	8006848 <__gethex+0x160>
 800686a:	f100 0914 	add.w	r9, r0, #20
 800686e:	f04f 0b00 	mov.w	fp, #0
 8006872:	f1ca 0301 	rsb	r3, sl, #1
 8006876:	f8cd 9008 	str.w	r9, [sp, #8]
 800687a:	f8cd b000 	str.w	fp, [sp]
 800687e:	9306      	str	r3, [sp, #24]
 8006880:	42b7      	cmp	r7, r6
 8006882:	d340      	bcc.n	8006906 <__gethex+0x21e>
 8006884:	9802      	ldr	r0, [sp, #8]
 8006886:	9b00      	ldr	r3, [sp, #0]
 8006888:	f840 3b04 	str.w	r3, [r0], #4
 800688c:	eba0 0009 	sub.w	r0, r0, r9
 8006890:	1080      	asrs	r0, r0, #2
 8006892:	0146      	lsls	r6, r0, #5
 8006894:	6120      	str	r0, [r4, #16]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fb50 	bl	8006f3c <__hi0bits>
 800689c:	1a30      	subs	r0, r6, r0
 800689e:	f8d8 6000 	ldr.w	r6, [r8]
 80068a2:	42b0      	cmp	r0, r6
 80068a4:	dd63      	ble.n	800696e <__gethex+0x286>
 80068a6:	1b87      	subs	r7, r0, r6
 80068a8:	4639      	mov	r1, r7
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 feea 	bl	8007684 <__any_on>
 80068b0:	4682      	mov	sl, r0
 80068b2:	b1a8      	cbz	r0, 80068e0 <__gethex+0x1f8>
 80068b4:	1e7b      	subs	r3, r7, #1
 80068b6:	1159      	asrs	r1, r3, #5
 80068b8:	f003 021f 	and.w	r2, r3, #31
 80068bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80068c0:	f04f 0a01 	mov.w	sl, #1
 80068c4:	fa0a f202 	lsl.w	r2, sl, r2
 80068c8:	420a      	tst	r2, r1
 80068ca:	d009      	beq.n	80068e0 <__gethex+0x1f8>
 80068cc:	4553      	cmp	r3, sl
 80068ce:	dd05      	ble.n	80068dc <__gethex+0x1f4>
 80068d0:	1eb9      	subs	r1, r7, #2
 80068d2:	4620      	mov	r0, r4
 80068d4:	f000 fed6 	bl	8007684 <__any_on>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d145      	bne.n	8006968 <__gethex+0x280>
 80068dc:	f04f 0a02 	mov.w	sl, #2
 80068e0:	4639      	mov	r1, r7
 80068e2:	4620      	mov	r0, r4
 80068e4:	f7ff fe98 	bl	8006618 <rshift>
 80068e8:	443d      	add	r5, r7
 80068ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068ee:	42ab      	cmp	r3, r5
 80068f0:	da4c      	bge.n	800698c <__gethex+0x2a4>
 80068f2:	ee18 0a10 	vmov	r0, s16
 80068f6:	4621      	mov	r1, r4
 80068f8:	f000 fa6a 	bl	8006dd0 <_Bfree>
 80068fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80068fe:	2300      	movs	r3, #0
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	27a3      	movs	r7, #163	; 0xa3
 8006904:	e785      	b.n	8006812 <__gethex+0x12a>
 8006906:	1e73      	subs	r3, r6, #1
 8006908:	9a05      	ldr	r2, [sp, #20]
 800690a:	9303      	str	r3, [sp, #12]
 800690c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006910:	4293      	cmp	r3, r2
 8006912:	d019      	beq.n	8006948 <__gethex+0x260>
 8006914:	f1bb 0f20 	cmp.w	fp, #32
 8006918:	d107      	bne.n	800692a <__gethex+0x242>
 800691a:	9b02      	ldr	r3, [sp, #8]
 800691c:	9a00      	ldr	r2, [sp, #0]
 800691e:	f843 2b04 	str.w	r2, [r3], #4
 8006922:	9302      	str	r3, [sp, #8]
 8006924:	2300      	movs	r3, #0
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	469b      	mov	fp, r3
 800692a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800692e:	f7ff fec5 	bl	80066bc <__hexdig_fun>
 8006932:	9b00      	ldr	r3, [sp, #0]
 8006934:	f000 000f 	and.w	r0, r0, #15
 8006938:	fa00 f00b 	lsl.w	r0, r0, fp
 800693c:	4303      	orrs	r3, r0
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	f10b 0b04 	add.w	fp, fp, #4
 8006944:	9b03      	ldr	r3, [sp, #12]
 8006946:	e00d      	b.n	8006964 <__gethex+0x27c>
 8006948:	9b03      	ldr	r3, [sp, #12]
 800694a:	9a06      	ldr	r2, [sp, #24]
 800694c:	4413      	add	r3, r2
 800694e:	42bb      	cmp	r3, r7
 8006950:	d3e0      	bcc.n	8006914 <__gethex+0x22c>
 8006952:	4618      	mov	r0, r3
 8006954:	9901      	ldr	r1, [sp, #4]
 8006956:	9307      	str	r3, [sp, #28]
 8006958:	4652      	mov	r2, sl
 800695a:	f001 f8e1 	bl	8007b20 <strncmp>
 800695e:	9b07      	ldr	r3, [sp, #28]
 8006960:	2800      	cmp	r0, #0
 8006962:	d1d7      	bne.n	8006914 <__gethex+0x22c>
 8006964:	461e      	mov	r6, r3
 8006966:	e78b      	b.n	8006880 <__gethex+0x198>
 8006968:	f04f 0a03 	mov.w	sl, #3
 800696c:	e7b8      	b.n	80068e0 <__gethex+0x1f8>
 800696e:	da0a      	bge.n	8006986 <__gethex+0x29e>
 8006970:	1a37      	subs	r7, r6, r0
 8006972:	4621      	mov	r1, r4
 8006974:	ee18 0a10 	vmov	r0, s16
 8006978:	463a      	mov	r2, r7
 800697a:	f000 fc45 	bl	8007208 <__lshift>
 800697e:	1bed      	subs	r5, r5, r7
 8006980:	4604      	mov	r4, r0
 8006982:	f100 0914 	add.w	r9, r0, #20
 8006986:	f04f 0a00 	mov.w	sl, #0
 800698a:	e7ae      	b.n	80068ea <__gethex+0x202>
 800698c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006990:	42a8      	cmp	r0, r5
 8006992:	dd72      	ble.n	8006a7a <__gethex+0x392>
 8006994:	1b45      	subs	r5, r0, r5
 8006996:	42ae      	cmp	r6, r5
 8006998:	dc36      	bgt.n	8006a08 <__gethex+0x320>
 800699a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d02a      	beq.n	80069f8 <__gethex+0x310>
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d02c      	beq.n	8006a00 <__gethex+0x318>
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d115      	bne.n	80069d6 <__gethex+0x2ee>
 80069aa:	42ae      	cmp	r6, r5
 80069ac:	d113      	bne.n	80069d6 <__gethex+0x2ee>
 80069ae:	2e01      	cmp	r6, #1
 80069b0:	d10b      	bne.n	80069ca <__gethex+0x2e2>
 80069b2:	9a04      	ldr	r2, [sp, #16]
 80069b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	2301      	movs	r3, #1
 80069bc:	6123      	str	r3, [r4, #16]
 80069be:	f8c9 3000 	str.w	r3, [r9]
 80069c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069c4:	2762      	movs	r7, #98	; 0x62
 80069c6:	601c      	str	r4, [r3, #0]
 80069c8:	e723      	b.n	8006812 <__gethex+0x12a>
 80069ca:	1e71      	subs	r1, r6, #1
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 fe59 	bl	8007684 <__any_on>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d1ed      	bne.n	80069b2 <__gethex+0x2ca>
 80069d6:	ee18 0a10 	vmov	r0, s16
 80069da:	4621      	mov	r1, r4
 80069dc:	f000 f9f8 	bl	8006dd0 <_Bfree>
 80069e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80069e2:	2300      	movs	r3, #0
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	2750      	movs	r7, #80	; 0x50
 80069e8:	e713      	b.n	8006812 <__gethex+0x12a>
 80069ea:	bf00      	nop
 80069ec:	080089a0 	.word	0x080089a0
 80069f0:	08008924 	.word	0x08008924
 80069f4:	08008935 	.word	0x08008935
 80069f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1eb      	bne.n	80069d6 <__gethex+0x2ee>
 80069fe:	e7d8      	b.n	80069b2 <__gethex+0x2ca>
 8006a00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1d5      	bne.n	80069b2 <__gethex+0x2ca>
 8006a06:	e7e6      	b.n	80069d6 <__gethex+0x2ee>
 8006a08:	1e6f      	subs	r7, r5, #1
 8006a0a:	f1ba 0f00 	cmp.w	sl, #0
 8006a0e:	d131      	bne.n	8006a74 <__gethex+0x38c>
 8006a10:	b127      	cbz	r7, 8006a1c <__gethex+0x334>
 8006a12:	4639      	mov	r1, r7
 8006a14:	4620      	mov	r0, r4
 8006a16:	f000 fe35 	bl	8007684 <__any_on>
 8006a1a:	4682      	mov	sl, r0
 8006a1c:	117b      	asrs	r3, r7, #5
 8006a1e:	2101      	movs	r1, #1
 8006a20:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006a24:	f007 071f 	and.w	r7, r7, #31
 8006a28:	fa01 f707 	lsl.w	r7, r1, r7
 8006a2c:	421f      	tst	r7, r3
 8006a2e:	4629      	mov	r1, r5
 8006a30:	4620      	mov	r0, r4
 8006a32:	bf18      	it	ne
 8006a34:	f04a 0a02 	orrne.w	sl, sl, #2
 8006a38:	1b76      	subs	r6, r6, r5
 8006a3a:	f7ff fded 	bl	8006618 <rshift>
 8006a3e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006a42:	2702      	movs	r7, #2
 8006a44:	f1ba 0f00 	cmp.w	sl, #0
 8006a48:	d048      	beq.n	8006adc <__gethex+0x3f4>
 8006a4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d015      	beq.n	8006a7e <__gethex+0x396>
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d017      	beq.n	8006a86 <__gethex+0x39e>
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d109      	bne.n	8006a6e <__gethex+0x386>
 8006a5a:	f01a 0f02 	tst.w	sl, #2
 8006a5e:	d006      	beq.n	8006a6e <__gethex+0x386>
 8006a60:	f8d9 0000 	ldr.w	r0, [r9]
 8006a64:	ea4a 0a00 	orr.w	sl, sl, r0
 8006a68:	f01a 0f01 	tst.w	sl, #1
 8006a6c:	d10e      	bne.n	8006a8c <__gethex+0x3a4>
 8006a6e:	f047 0710 	orr.w	r7, r7, #16
 8006a72:	e033      	b.n	8006adc <__gethex+0x3f4>
 8006a74:	f04f 0a01 	mov.w	sl, #1
 8006a78:	e7d0      	b.n	8006a1c <__gethex+0x334>
 8006a7a:	2701      	movs	r7, #1
 8006a7c:	e7e2      	b.n	8006a44 <__gethex+0x35c>
 8006a7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a80:	f1c3 0301 	rsb	r3, r3, #1
 8006a84:	9315      	str	r3, [sp, #84]	; 0x54
 8006a86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0f0      	beq.n	8006a6e <__gethex+0x386>
 8006a8c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006a90:	f104 0314 	add.w	r3, r4, #20
 8006a94:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006a98:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006a9c:	f04f 0c00 	mov.w	ip, #0
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aa6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006aaa:	d01c      	beq.n	8006ae6 <__gethex+0x3fe>
 8006aac:	3201      	adds	r2, #1
 8006aae:	6002      	str	r2, [r0, #0]
 8006ab0:	2f02      	cmp	r7, #2
 8006ab2:	f104 0314 	add.w	r3, r4, #20
 8006ab6:	d13f      	bne.n	8006b38 <__gethex+0x450>
 8006ab8:	f8d8 2000 	ldr.w	r2, [r8]
 8006abc:	3a01      	subs	r2, #1
 8006abe:	42b2      	cmp	r2, r6
 8006ac0:	d10a      	bne.n	8006ad8 <__gethex+0x3f0>
 8006ac2:	1171      	asrs	r1, r6, #5
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006aca:	f006 061f 	and.w	r6, r6, #31
 8006ace:	fa02 f606 	lsl.w	r6, r2, r6
 8006ad2:	421e      	tst	r6, r3
 8006ad4:	bf18      	it	ne
 8006ad6:	4617      	movne	r7, r2
 8006ad8:	f047 0720 	orr.w	r7, r7, #32
 8006adc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ade:	601c      	str	r4, [r3, #0]
 8006ae0:	9b04      	ldr	r3, [sp, #16]
 8006ae2:	601d      	str	r5, [r3, #0]
 8006ae4:	e695      	b.n	8006812 <__gethex+0x12a>
 8006ae6:	4299      	cmp	r1, r3
 8006ae8:	f843 cc04 	str.w	ip, [r3, #-4]
 8006aec:	d8d8      	bhi.n	8006aa0 <__gethex+0x3b8>
 8006aee:	68a3      	ldr	r3, [r4, #8]
 8006af0:	459b      	cmp	fp, r3
 8006af2:	db19      	blt.n	8006b28 <__gethex+0x440>
 8006af4:	6861      	ldr	r1, [r4, #4]
 8006af6:	ee18 0a10 	vmov	r0, s16
 8006afa:	3101      	adds	r1, #1
 8006afc:	f000 f928 	bl	8006d50 <_Balloc>
 8006b00:	4681      	mov	r9, r0
 8006b02:	b918      	cbnz	r0, 8006b0c <__gethex+0x424>
 8006b04:	4b1a      	ldr	r3, [pc, #104]	; (8006b70 <__gethex+0x488>)
 8006b06:	4602      	mov	r2, r0
 8006b08:	2184      	movs	r1, #132	; 0x84
 8006b0a:	e6a8      	b.n	800685e <__gethex+0x176>
 8006b0c:	6922      	ldr	r2, [r4, #16]
 8006b0e:	3202      	adds	r2, #2
 8006b10:	f104 010c 	add.w	r1, r4, #12
 8006b14:	0092      	lsls	r2, r2, #2
 8006b16:	300c      	adds	r0, #12
 8006b18:	f000 f90c 	bl	8006d34 <memcpy>
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	ee18 0a10 	vmov	r0, s16
 8006b22:	f000 f955 	bl	8006dd0 <_Bfree>
 8006b26:	464c      	mov	r4, r9
 8006b28:	6923      	ldr	r3, [r4, #16]
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b30:	6122      	str	r2, [r4, #16]
 8006b32:	2201      	movs	r2, #1
 8006b34:	615a      	str	r2, [r3, #20]
 8006b36:	e7bb      	b.n	8006ab0 <__gethex+0x3c8>
 8006b38:	6922      	ldr	r2, [r4, #16]
 8006b3a:	455a      	cmp	r2, fp
 8006b3c:	dd0b      	ble.n	8006b56 <__gethex+0x46e>
 8006b3e:	2101      	movs	r1, #1
 8006b40:	4620      	mov	r0, r4
 8006b42:	f7ff fd69 	bl	8006618 <rshift>
 8006b46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b4a:	3501      	adds	r5, #1
 8006b4c:	42ab      	cmp	r3, r5
 8006b4e:	f6ff aed0 	blt.w	80068f2 <__gethex+0x20a>
 8006b52:	2701      	movs	r7, #1
 8006b54:	e7c0      	b.n	8006ad8 <__gethex+0x3f0>
 8006b56:	f016 061f 	ands.w	r6, r6, #31
 8006b5a:	d0fa      	beq.n	8006b52 <__gethex+0x46a>
 8006b5c:	449a      	add	sl, r3
 8006b5e:	f1c6 0620 	rsb	r6, r6, #32
 8006b62:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006b66:	f000 f9e9 	bl	8006f3c <__hi0bits>
 8006b6a:	42b0      	cmp	r0, r6
 8006b6c:	dbe7      	blt.n	8006b3e <__gethex+0x456>
 8006b6e:	e7f0      	b.n	8006b52 <__gethex+0x46a>
 8006b70:	08008924 	.word	0x08008924

08006b74 <L_shift>:
 8006b74:	f1c2 0208 	rsb	r2, r2, #8
 8006b78:	0092      	lsls	r2, r2, #2
 8006b7a:	b570      	push	{r4, r5, r6, lr}
 8006b7c:	f1c2 0620 	rsb	r6, r2, #32
 8006b80:	6843      	ldr	r3, [r0, #4]
 8006b82:	6804      	ldr	r4, [r0, #0]
 8006b84:	fa03 f506 	lsl.w	r5, r3, r6
 8006b88:	432c      	orrs	r4, r5
 8006b8a:	40d3      	lsrs	r3, r2
 8006b8c:	6004      	str	r4, [r0, #0]
 8006b8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006b92:	4288      	cmp	r0, r1
 8006b94:	d3f4      	bcc.n	8006b80 <L_shift+0xc>
 8006b96:	bd70      	pop	{r4, r5, r6, pc}

08006b98 <__match>:
 8006b98:	b530      	push	{r4, r5, lr}
 8006b9a:	6803      	ldr	r3, [r0, #0]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ba2:	b914      	cbnz	r4, 8006baa <__match+0x12>
 8006ba4:	6003      	str	r3, [r0, #0]
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	bd30      	pop	{r4, r5, pc}
 8006baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006bb2:	2d19      	cmp	r5, #25
 8006bb4:	bf98      	it	ls
 8006bb6:	3220      	addls	r2, #32
 8006bb8:	42a2      	cmp	r2, r4
 8006bba:	d0f0      	beq.n	8006b9e <__match+0x6>
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	e7f3      	b.n	8006ba8 <__match+0x10>

08006bc0 <__hexnan>:
 8006bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc4:	680b      	ldr	r3, [r1, #0]
 8006bc6:	6801      	ldr	r1, [r0, #0]
 8006bc8:	115e      	asrs	r6, r3, #5
 8006bca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006bce:	f013 031f 	ands.w	r3, r3, #31
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	bf18      	it	ne
 8006bd6:	3604      	addne	r6, #4
 8006bd8:	2500      	movs	r5, #0
 8006bda:	1f37      	subs	r7, r6, #4
 8006bdc:	4682      	mov	sl, r0
 8006bde:	4690      	mov	r8, r2
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	f846 5c04 	str.w	r5, [r6, #-4]
 8006be6:	46b9      	mov	r9, r7
 8006be8:	463c      	mov	r4, r7
 8006bea:	9502      	str	r5, [sp, #8]
 8006bec:	46ab      	mov	fp, r5
 8006bee:	784a      	ldrb	r2, [r1, #1]
 8006bf0:	1c4b      	adds	r3, r1, #1
 8006bf2:	9303      	str	r3, [sp, #12]
 8006bf4:	b342      	cbz	r2, 8006c48 <__hexnan+0x88>
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	9105      	str	r1, [sp, #20]
 8006bfa:	9204      	str	r2, [sp, #16]
 8006bfc:	f7ff fd5e 	bl	80066bc <__hexdig_fun>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d14f      	bne.n	8006ca4 <__hexnan+0xe4>
 8006c04:	9a04      	ldr	r2, [sp, #16]
 8006c06:	9905      	ldr	r1, [sp, #20]
 8006c08:	2a20      	cmp	r2, #32
 8006c0a:	d818      	bhi.n	8006c3e <__hexnan+0x7e>
 8006c0c:	9b02      	ldr	r3, [sp, #8]
 8006c0e:	459b      	cmp	fp, r3
 8006c10:	dd13      	ble.n	8006c3a <__hexnan+0x7a>
 8006c12:	454c      	cmp	r4, r9
 8006c14:	d206      	bcs.n	8006c24 <__hexnan+0x64>
 8006c16:	2d07      	cmp	r5, #7
 8006c18:	dc04      	bgt.n	8006c24 <__hexnan+0x64>
 8006c1a:	462a      	mov	r2, r5
 8006c1c:	4649      	mov	r1, r9
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f7ff ffa8 	bl	8006b74 <L_shift>
 8006c24:	4544      	cmp	r4, r8
 8006c26:	d950      	bls.n	8006cca <__hexnan+0x10a>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f1a4 0904 	sub.w	r9, r4, #4
 8006c2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c32:	f8cd b008 	str.w	fp, [sp, #8]
 8006c36:	464c      	mov	r4, r9
 8006c38:	461d      	mov	r5, r3
 8006c3a:	9903      	ldr	r1, [sp, #12]
 8006c3c:	e7d7      	b.n	8006bee <__hexnan+0x2e>
 8006c3e:	2a29      	cmp	r2, #41	; 0x29
 8006c40:	d156      	bne.n	8006cf0 <__hexnan+0x130>
 8006c42:	3102      	adds	r1, #2
 8006c44:	f8ca 1000 	str.w	r1, [sl]
 8006c48:	f1bb 0f00 	cmp.w	fp, #0
 8006c4c:	d050      	beq.n	8006cf0 <__hexnan+0x130>
 8006c4e:	454c      	cmp	r4, r9
 8006c50:	d206      	bcs.n	8006c60 <__hexnan+0xa0>
 8006c52:	2d07      	cmp	r5, #7
 8006c54:	dc04      	bgt.n	8006c60 <__hexnan+0xa0>
 8006c56:	462a      	mov	r2, r5
 8006c58:	4649      	mov	r1, r9
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f7ff ff8a 	bl	8006b74 <L_shift>
 8006c60:	4544      	cmp	r4, r8
 8006c62:	d934      	bls.n	8006cce <__hexnan+0x10e>
 8006c64:	f1a8 0204 	sub.w	r2, r8, #4
 8006c68:	4623      	mov	r3, r4
 8006c6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8006c6e:	f842 1f04 	str.w	r1, [r2, #4]!
 8006c72:	429f      	cmp	r7, r3
 8006c74:	d2f9      	bcs.n	8006c6a <__hexnan+0xaa>
 8006c76:	1b3b      	subs	r3, r7, r4
 8006c78:	f023 0303 	bic.w	r3, r3, #3
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	3401      	adds	r4, #1
 8006c80:	3e03      	subs	r6, #3
 8006c82:	42b4      	cmp	r4, r6
 8006c84:	bf88      	it	hi
 8006c86:	2304      	movhi	r3, #4
 8006c88:	4443      	add	r3, r8
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f843 2b04 	str.w	r2, [r3], #4
 8006c90:	429f      	cmp	r7, r3
 8006c92:	d2fb      	bcs.n	8006c8c <__hexnan+0xcc>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	b91b      	cbnz	r3, 8006ca0 <__hexnan+0xe0>
 8006c98:	4547      	cmp	r7, r8
 8006c9a:	d127      	bne.n	8006cec <__hexnan+0x12c>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	2005      	movs	r0, #5
 8006ca2:	e026      	b.n	8006cf2 <__hexnan+0x132>
 8006ca4:	3501      	adds	r5, #1
 8006ca6:	2d08      	cmp	r5, #8
 8006ca8:	f10b 0b01 	add.w	fp, fp, #1
 8006cac:	dd06      	ble.n	8006cbc <__hexnan+0xfc>
 8006cae:	4544      	cmp	r4, r8
 8006cb0:	d9c3      	bls.n	8006c3a <__hexnan+0x7a>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f844 3c04 	str.w	r3, [r4, #-4]
 8006cb8:	2501      	movs	r5, #1
 8006cba:	3c04      	subs	r4, #4
 8006cbc:	6822      	ldr	r2, [r4, #0]
 8006cbe:	f000 000f 	and.w	r0, r0, #15
 8006cc2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006cc6:	6022      	str	r2, [r4, #0]
 8006cc8:	e7b7      	b.n	8006c3a <__hexnan+0x7a>
 8006cca:	2508      	movs	r5, #8
 8006ccc:	e7b5      	b.n	8006c3a <__hexnan+0x7a>
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0df      	beq.n	8006c94 <__hexnan+0xd4>
 8006cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd8:	f1c3 0320 	rsb	r3, r3, #32
 8006cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006ce4:	401a      	ands	r2, r3
 8006ce6:	f846 2c04 	str.w	r2, [r6, #-4]
 8006cea:	e7d3      	b.n	8006c94 <__hexnan+0xd4>
 8006cec:	3f04      	subs	r7, #4
 8006cee:	e7d1      	b.n	8006c94 <__hexnan+0xd4>
 8006cf0:	2004      	movs	r0, #4
 8006cf2:	b007      	add	sp, #28
 8006cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006cf8 <_localeconv_r>:
 8006cf8:	4800      	ldr	r0, [pc, #0]	; (8006cfc <_localeconv_r+0x4>)
 8006cfa:	4770      	bx	lr
 8006cfc:	20000164 	.word	0x20000164

08006d00 <malloc>:
 8006d00:	4b02      	ldr	r3, [pc, #8]	; (8006d0c <malloc+0xc>)
 8006d02:	4601      	mov	r1, r0
 8006d04:	6818      	ldr	r0, [r3, #0]
 8006d06:	f000 bd3d 	b.w	8007784 <_malloc_r>
 8006d0a:	bf00      	nop
 8006d0c:	2000000c 	.word	0x2000000c

08006d10 <__ascii_mbtowc>:
 8006d10:	b082      	sub	sp, #8
 8006d12:	b901      	cbnz	r1, 8006d16 <__ascii_mbtowc+0x6>
 8006d14:	a901      	add	r1, sp, #4
 8006d16:	b142      	cbz	r2, 8006d2a <__ascii_mbtowc+0x1a>
 8006d18:	b14b      	cbz	r3, 8006d2e <__ascii_mbtowc+0x1e>
 8006d1a:	7813      	ldrb	r3, [r2, #0]
 8006d1c:	600b      	str	r3, [r1, #0]
 8006d1e:	7812      	ldrb	r2, [r2, #0]
 8006d20:	1e10      	subs	r0, r2, #0
 8006d22:	bf18      	it	ne
 8006d24:	2001      	movne	r0, #1
 8006d26:	b002      	add	sp, #8
 8006d28:	4770      	bx	lr
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	e7fb      	b.n	8006d26 <__ascii_mbtowc+0x16>
 8006d2e:	f06f 0001 	mvn.w	r0, #1
 8006d32:	e7f8      	b.n	8006d26 <__ascii_mbtowc+0x16>

08006d34 <memcpy>:
 8006d34:	440a      	add	r2, r1
 8006d36:	4291      	cmp	r1, r2
 8006d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d3c:	d100      	bne.n	8006d40 <memcpy+0xc>
 8006d3e:	4770      	bx	lr
 8006d40:	b510      	push	{r4, lr}
 8006d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d4a:	4291      	cmp	r1, r2
 8006d4c:	d1f9      	bne.n	8006d42 <memcpy+0xe>
 8006d4e:	bd10      	pop	{r4, pc}

08006d50 <_Balloc>:
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d54:	4604      	mov	r4, r0
 8006d56:	460d      	mov	r5, r1
 8006d58:	b976      	cbnz	r6, 8006d78 <_Balloc+0x28>
 8006d5a:	2010      	movs	r0, #16
 8006d5c:	f7ff ffd0 	bl	8006d00 <malloc>
 8006d60:	4602      	mov	r2, r0
 8006d62:	6260      	str	r0, [r4, #36]	; 0x24
 8006d64:	b920      	cbnz	r0, 8006d70 <_Balloc+0x20>
 8006d66:	4b18      	ldr	r3, [pc, #96]	; (8006dc8 <_Balloc+0x78>)
 8006d68:	4818      	ldr	r0, [pc, #96]	; (8006dcc <_Balloc+0x7c>)
 8006d6a:	2166      	movs	r1, #102	; 0x66
 8006d6c:	f000 fef8 	bl	8007b60 <__assert_func>
 8006d70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d74:	6006      	str	r6, [r0, #0]
 8006d76:	60c6      	str	r6, [r0, #12]
 8006d78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d7a:	68f3      	ldr	r3, [r6, #12]
 8006d7c:	b183      	cbz	r3, 8006da0 <_Balloc+0x50>
 8006d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d86:	b9b8      	cbnz	r0, 8006db8 <_Balloc+0x68>
 8006d88:	2101      	movs	r1, #1
 8006d8a:	fa01 f605 	lsl.w	r6, r1, r5
 8006d8e:	1d72      	adds	r2, r6, #5
 8006d90:	0092      	lsls	r2, r2, #2
 8006d92:	4620      	mov	r0, r4
 8006d94:	f000 fc97 	bl	80076c6 <_calloc_r>
 8006d98:	b160      	cbz	r0, 8006db4 <_Balloc+0x64>
 8006d9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d9e:	e00e      	b.n	8006dbe <_Balloc+0x6e>
 8006da0:	2221      	movs	r2, #33	; 0x21
 8006da2:	2104      	movs	r1, #4
 8006da4:	4620      	mov	r0, r4
 8006da6:	f000 fc8e 	bl	80076c6 <_calloc_r>
 8006daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dac:	60f0      	str	r0, [r6, #12]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e4      	bne.n	8006d7e <_Balloc+0x2e>
 8006db4:	2000      	movs	r0, #0
 8006db6:	bd70      	pop	{r4, r5, r6, pc}
 8006db8:	6802      	ldr	r2, [r0, #0]
 8006dba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006dc4:	e7f7      	b.n	8006db6 <_Balloc+0x66>
 8006dc6:	bf00      	nop
 8006dc8:	080088ae 	.word	0x080088ae
 8006dcc:	080089b4 	.word	0x080089b4

08006dd0 <_Bfree>:
 8006dd0:	b570      	push	{r4, r5, r6, lr}
 8006dd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006dd4:	4605      	mov	r5, r0
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	b976      	cbnz	r6, 8006df8 <_Bfree+0x28>
 8006dda:	2010      	movs	r0, #16
 8006ddc:	f7ff ff90 	bl	8006d00 <malloc>
 8006de0:	4602      	mov	r2, r0
 8006de2:	6268      	str	r0, [r5, #36]	; 0x24
 8006de4:	b920      	cbnz	r0, 8006df0 <_Bfree+0x20>
 8006de6:	4b09      	ldr	r3, [pc, #36]	; (8006e0c <_Bfree+0x3c>)
 8006de8:	4809      	ldr	r0, [pc, #36]	; (8006e10 <_Bfree+0x40>)
 8006dea:	218a      	movs	r1, #138	; 0x8a
 8006dec:	f000 feb8 	bl	8007b60 <__assert_func>
 8006df0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006df4:	6006      	str	r6, [r0, #0]
 8006df6:	60c6      	str	r6, [r0, #12]
 8006df8:	b13c      	cbz	r4, 8006e0a <_Bfree+0x3a>
 8006dfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006dfc:	6862      	ldr	r2, [r4, #4]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e04:	6021      	str	r1, [r4, #0]
 8006e06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}
 8006e0c:	080088ae 	.word	0x080088ae
 8006e10:	080089b4 	.word	0x080089b4

08006e14 <__multadd>:
 8006e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e18:	690e      	ldr	r6, [r1, #16]
 8006e1a:	4607      	mov	r7, r0
 8006e1c:	4698      	mov	r8, r3
 8006e1e:	460c      	mov	r4, r1
 8006e20:	f101 0014 	add.w	r0, r1, #20
 8006e24:	2300      	movs	r3, #0
 8006e26:	6805      	ldr	r5, [r0, #0]
 8006e28:	b2a9      	uxth	r1, r5
 8006e2a:	fb02 8101 	mla	r1, r2, r1, r8
 8006e2e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006e32:	0c2d      	lsrs	r5, r5, #16
 8006e34:	fb02 c505 	mla	r5, r2, r5, ip
 8006e38:	b289      	uxth	r1, r1
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006e40:	429e      	cmp	r6, r3
 8006e42:	f840 1b04 	str.w	r1, [r0], #4
 8006e46:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006e4a:	dcec      	bgt.n	8006e26 <__multadd+0x12>
 8006e4c:	f1b8 0f00 	cmp.w	r8, #0
 8006e50:	d022      	beq.n	8006e98 <__multadd+0x84>
 8006e52:	68a3      	ldr	r3, [r4, #8]
 8006e54:	42b3      	cmp	r3, r6
 8006e56:	dc19      	bgt.n	8006e8c <__multadd+0x78>
 8006e58:	6861      	ldr	r1, [r4, #4]
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	3101      	adds	r1, #1
 8006e5e:	f7ff ff77 	bl	8006d50 <_Balloc>
 8006e62:	4605      	mov	r5, r0
 8006e64:	b928      	cbnz	r0, 8006e72 <__multadd+0x5e>
 8006e66:	4602      	mov	r2, r0
 8006e68:	4b0d      	ldr	r3, [pc, #52]	; (8006ea0 <__multadd+0x8c>)
 8006e6a:	480e      	ldr	r0, [pc, #56]	; (8006ea4 <__multadd+0x90>)
 8006e6c:	21b5      	movs	r1, #181	; 0xb5
 8006e6e:	f000 fe77 	bl	8007b60 <__assert_func>
 8006e72:	6922      	ldr	r2, [r4, #16]
 8006e74:	3202      	adds	r2, #2
 8006e76:	f104 010c 	add.w	r1, r4, #12
 8006e7a:	0092      	lsls	r2, r2, #2
 8006e7c:	300c      	adds	r0, #12
 8006e7e:	f7ff ff59 	bl	8006d34 <memcpy>
 8006e82:	4621      	mov	r1, r4
 8006e84:	4638      	mov	r0, r7
 8006e86:	f7ff ffa3 	bl	8006dd0 <_Bfree>
 8006e8a:	462c      	mov	r4, r5
 8006e8c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006e90:	3601      	adds	r6, #1
 8006e92:	f8c3 8014 	str.w	r8, [r3, #20]
 8006e96:	6126      	str	r6, [r4, #16]
 8006e98:	4620      	mov	r0, r4
 8006e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e9e:	bf00      	nop
 8006ea0:	08008924 	.word	0x08008924
 8006ea4:	080089b4 	.word	0x080089b4

08006ea8 <__s2b>:
 8006ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eac:	460c      	mov	r4, r1
 8006eae:	4615      	mov	r5, r2
 8006eb0:	461f      	mov	r7, r3
 8006eb2:	2209      	movs	r2, #9
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	db09      	blt.n	8006ed8 <__s2b+0x30>
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f7ff ff43 	bl	8006d50 <_Balloc>
 8006eca:	b940      	cbnz	r0, 8006ede <__s2b+0x36>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	4b19      	ldr	r3, [pc, #100]	; (8006f34 <__s2b+0x8c>)
 8006ed0:	4819      	ldr	r0, [pc, #100]	; (8006f38 <__s2b+0x90>)
 8006ed2:	21ce      	movs	r1, #206	; 0xce
 8006ed4:	f000 fe44 	bl	8007b60 <__assert_func>
 8006ed8:	0052      	lsls	r2, r2, #1
 8006eda:	3101      	adds	r1, #1
 8006edc:	e7f0      	b.n	8006ec0 <__s2b+0x18>
 8006ede:	9b08      	ldr	r3, [sp, #32]
 8006ee0:	6143      	str	r3, [r0, #20]
 8006ee2:	2d09      	cmp	r5, #9
 8006ee4:	f04f 0301 	mov.w	r3, #1
 8006ee8:	6103      	str	r3, [r0, #16]
 8006eea:	dd16      	ble.n	8006f1a <__s2b+0x72>
 8006eec:	f104 0909 	add.w	r9, r4, #9
 8006ef0:	46c8      	mov	r8, r9
 8006ef2:	442c      	add	r4, r5
 8006ef4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006ef8:	4601      	mov	r1, r0
 8006efa:	3b30      	subs	r3, #48	; 0x30
 8006efc:	220a      	movs	r2, #10
 8006efe:	4630      	mov	r0, r6
 8006f00:	f7ff ff88 	bl	8006e14 <__multadd>
 8006f04:	45a0      	cmp	r8, r4
 8006f06:	d1f5      	bne.n	8006ef4 <__s2b+0x4c>
 8006f08:	f1a5 0408 	sub.w	r4, r5, #8
 8006f0c:	444c      	add	r4, r9
 8006f0e:	1b2d      	subs	r5, r5, r4
 8006f10:	1963      	adds	r3, r4, r5
 8006f12:	42bb      	cmp	r3, r7
 8006f14:	db04      	blt.n	8006f20 <__s2b+0x78>
 8006f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f1a:	340a      	adds	r4, #10
 8006f1c:	2509      	movs	r5, #9
 8006f1e:	e7f6      	b.n	8006f0e <__s2b+0x66>
 8006f20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f24:	4601      	mov	r1, r0
 8006f26:	3b30      	subs	r3, #48	; 0x30
 8006f28:	220a      	movs	r2, #10
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f7ff ff72 	bl	8006e14 <__multadd>
 8006f30:	e7ee      	b.n	8006f10 <__s2b+0x68>
 8006f32:	bf00      	nop
 8006f34:	08008924 	.word	0x08008924
 8006f38:	080089b4 	.word	0x080089b4

08006f3c <__hi0bits>:
 8006f3c:	0c03      	lsrs	r3, r0, #16
 8006f3e:	041b      	lsls	r3, r3, #16
 8006f40:	b9d3      	cbnz	r3, 8006f78 <__hi0bits+0x3c>
 8006f42:	0400      	lsls	r0, r0, #16
 8006f44:	2310      	movs	r3, #16
 8006f46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f4a:	bf04      	itt	eq
 8006f4c:	0200      	lsleq	r0, r0, #8
 8006f4e:	3308      	addeq	r3, #8
 8006f50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f54:	bf04      	itt	eq
 8006f56:	0100      	lsleq	r0, r0, #4
 8006f58:	3304      	addeq	r3, #4
 8006f5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f5e:	bf04      	itt	eq
 8006f60:	0080      	lsleq	r0, r0, #2
 8006f62:	3302      	addeq	r3, #2
 8006f64:	2800      	cmp	r0, #0
 8006f66:	db05      	blt.n	8006f74 <__hi0bits+0x38>
 8006f68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f6c:	f103 0301 	add.w	r3, r3, #1
 8006f70:	bf08      	it	eq
 8006f72:	2320      	moveq	r3, #32
 8006f74:	4618      	mov	r0, r3
 8006f76:	4770      	bx	lr
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e7e4      	b.n	8006f46 <__hi0bits+0xa>

08006f7c <__lo0bits>:
 8006f7c:	6803      	ldr	r3, [r0, #0]
 8006f7e:	f013 0207 	ands.w	r2, r3, #7
 8006f82:	4601      	mov	r1, r0
 8006f84:	d00b      	beq.n	8006f9e <__lo0bits+0x22>
 8006f86:	07da      	lsls	r2, r3, #31
 8006f88:	d424      	bmi.n	8006fd4 <__lo0bits+0x58>
 8006f8a:	0798      	lsls	r0, r3, #30
 8006f8c:	bf49      	itett	mi
 8006f8e:	085b      	lsrmi	r3, r3, #1
 8006f90:	089b      	lsrpl	r3, r3, #2
 8006f92:	2001      	movmi	r0, #1
 8006f94:	600b      	strmi	r3, [r1, #0]
 8006f96:	bf5c      	itt	pl
 8006f98:	600b      	strpl	r3, [r1, #0]
 8006f9a:	2002      	movpl	r0, #2
 8006f9c:	4770      	bx	lr
 8006f9e:	b298      	uxth	r0, r3
 8006fa0:	b9b0      	cbnz	r0, 8006fd0 <__lo0bits+0x54>
 8006fa2:	0c1b      	lsrs	r3, r3, #16
 8006fa4:	2010      	movs	r0, #16
 8006fa6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006faa:	bf04      	itt	eq
 8006fac:	0a1b      	lsreq	r3, r3, #8
 8006fae:	3008      	addeq	r0, #8
 8006fb0:	071a      	lsls	r2, r3, #28
 8006fb2:	bf04      	itt	eq
 8006fb4:	091b      	lsreq	r3, r3, #4
 8006fb6:	3004      	addeq	r0, #4
 8006fb8:	079a      	lsls	r2, r3, #30
 8006fba:	bf04      	itt	eq
 8006fbc:	089b      	lsreq	r3, r3, #2
 8006fbe:	3002      	addeq	r0, #2
 8006fc0:	07da      	lsls	r2, r3, #31
 8006fc2:	d403      	bmi.n	8006fcc <__lo0bits+0x50>
 8006fc4:	085b      	lsrs	r3, r3, #1
 8006fc6:	f100 0001 	add.w	r0, r0, #1
 8006fca:	d005      	beq.n	8006fd8 <__lo0bits+0x5c>
 8006fcc:	600b      	str	r3, [r1, #0]
 8006fce:	4770      	bx	lr
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	e7e8      	b.n	8006fa6 <__lo0bits+0x2a>
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	4770      	bx	lr
 8006fd8:	2020      	movs	r0, #32
 8006fda:	4770      	bx	lr

08006fdc <__i2b>:
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	460c      	mov	r4, r1
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	f7ff feb5 	bl	8006d50 <_Balloc>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	b928      	cbnz	r0, 8006ff6 <__i2b+0x1a>
 8006fea:	4b05      	ldr	r3, [pc, #20]	; (8007000 <__i2b+0x24>)
 8006fec:	4805      	ldr	r0, [pc, #20]	; (8007004 <__i2b+0x28>)
 8006fee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006ff2:	f000 fdb5 	bl	8007b60 <__assert_func>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	6144      	str	r4, [r0, #20]
 8006ffa:	6103      	str	r3, [r0, #16]
 8006ffc:	bd10      	pop	{r4, pc}
 8006ffe:	bf00      	nop
 8007000:	08008924 	.word	0x08008924
 8007004:	080089b4 	.word	0x080089b4

08007008 <__multiply>:
 8007008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700c:	4614      	mov	r4, r2
 800700e:	690a      	ldr	r2, [r1, #16]
 8007010:	6923      	ldr	r3, [r4, #16]
 8007012:	429a      	cmp	r2, r3
 8007014:	bfb8      	it	lt
 8007016:	460b      	movlt	r3, r1
 8007018:	460d      	mov	r5, r1
 800701a:	bfbc      	itt	lt
 800701c:	4625      	movlt	r5, r4
 800701e:	461c      	movlt	r4, r3
 8007020:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007024:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007028:	68ab      	ldr	r3, [r5, #8]
 800702a:	6869      	ldr	r1, [r5, #4]
 800702c:	eb0a 0709 	add.w	r7, sl, r9
 8007030:	42bb      	cmp	r3, r7
 8007032:	b085      	sub	sp, #20
 8007034:	bfb8      	it	lt
 8007036:	3101      	addlt	r1, #1
 8007038:	f7ff fe8a 	bl	8006d50 <_Balloc>
 800703c:	b930      	cbnz	r0, 800704c <__multiply+0x44>
 800703e:	4602      	mov	r2, r0
 8007040:	4b42      	ldr	r3, [pc, #264]	; (800714c <__multiply+0x144>)
 8007042:	4843      	ldr	r0, [pc, #268]	; (8007150 <__multiply+0x148>)
 8007044:	f240 115d 	movw	r1, #349	; 0x15d
 8007048:	f000 fd8a 	bl	8007b60 <__assert_func>
 800704c:	f100 0614 	add.w	r6, r0, #20
 8007050:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007054:	4633      	mov	r3, r6
 8007056:	2200      	movs	r2, #0
 8007058:	4543      	cmp	r3, r8
 800705a:	d31e      	bcc.n	800709a <__multiply+0x92>
 800705c:	f105 0c14 	add.w	ip, r5, #20
 8007060:	f104 0314 	add.w	r3, r4, #20
 8007064:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007068:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800706c:	9202      	str	r2, [sp, #8]
 800706e:	ebac 0205 	sub.w	r2, ip, r5
 8007072:	3a15      	subs	r2, #21
 8007074:	f022 0203 	bic.w	r2, r2, #3
 8007078:	3204      	adds	r2, #4
 800707a:	f105 0115 	add.w	r1, r5, #21
 800707e:	458c      	cmp	ip, r1
 8007080:	bf38      	it	cc
 8007082:	2204      	movcc	r2, #4
 8007084:	9201      	str	r2, [sp, #4]
 8007086:	9a02      	ldr	r2, [sp, #8]
 8007088:	9303      	str	r3, [sp, #12]
 800708a:	429a      	cmp	r2, r3
 800708c:	d808      	bhi.n	80070a0 <__multiply+0x98>
 800708e:	2f00      	cmp	r7, #0
 8007090:	dc55      	bgt.n	800713e <__multiply+0x136>
 8007092:	6107      	str	r7, [r0, #16]
 8007094:	b005      	add	sp, #20
 8007096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709a:	f843 2b04 	str.w	r2, [r3], #4
 800709e:	e7db      	b.n	8007058 <__multiply+0x50>
 80070a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80070a4:	f1ba 0f00 	cmp.w	sl, #0
 80070a8:	d020      	beq.n	80070ec <__multiply+0xe4>
 80070aa:	f105 0e14 	add.w	lr, r5, #20
 80070ae:	46b1      	mov	r9, r6
 80070b0:	2200      	movs	r2, #0
 80070b2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80070b6:	f8d9 b000 	ldr.w	fp, [r9]
 80070ba:	b2a1      	uxth	r1, r4
 80070bc:	fa1f fb8b 	uxth.w	fp, fp
 80070c0:	fb0a b101 	mla	r1, sl, r1, fp
 80070c4:	4411      	add	r1, r2
 80070c6:	f8d9 2000 	ldr.w	r2, [r9]
 80070ca:	0c24      	lsrs	r4, r4, #16
 80070cc:	0c12      	lsrs	r2, r2, #16
 80070ce:	fb0a 2404 	mla	r4, sl, r4, r2
 80070d2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80070d6:	b289      	uxth	r1, r1
 80070d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80070dc:	45f4      	cmp	ip, lr
 80070de:	f849 1b04 	str.w	r1, [r9], #4
 80070e2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80070e6:	d8e4      	bhi.n	80070b2 <__multiply+0xaa>
 80070e8:	9901      	ldr	r1, [sp, #4]
 80070ea:	5072      	str	r2, [r6, r1]
 80070ec:	9a03      	ldr	r2, [sp, #12]
 80070ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070f2:	3304      	adds	r3, #4
 80070f4:	f1b9 0f00 	cmp.w	r9, #0
 80070f8:	d01f      	beq.n	800713a <__multiply+0x132>
 80070fa:	6834      	ldr	r4, [r6, #0]
 80070fc:	f105 0114 	add.w	r1, r5, #20
 8007100:	46b6      	mov	lr, r6
 8007102:	f04f 0a00 	mov.w	sl, #0
 8007106:	880a      	ldrh	r2, [r1, #0]
 8007108:	f8be b002 	ldrh.w	fp, [lr, #2]
 800710c:	fb09 b202 	mla	r2, r9, r2, fp
 8007110:	4492      	add	sl, r2
 8007112:	b2a4      	uxth	r4, r4
 8007114:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007118:	f84e 4b04 	str.w	r4, [lr], #4
 800711c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007120:	f8be 2000 	ldrh.w	r2, [lr]
 8007124:	0c24      	lsrs	r4, r4, #16
 8007126:	fb09 2404 	mla	r4, r9, r4, r2
 800712a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800712e:	458c      	cmp	ip, r1
 8007130:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007134:	d8e7      	bhi.n	8007106 <__multiply+0xfe>
 8007136:	9a01      	ldr	r2, [sp, #4]
 8007138:	50b4      	str	r4, [r6, r2]
 800713a:	3604      	adds	r6, #4
 800713c:	e7a3      	b.n	8007086 <__multiply+0x7e>
 800713e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1a5      	bne.n	8007092 <__multiply+0x8a>
 8007146:	3f01      	subs	r7, #1
 8007148:	e7a1      	b.n	800708e <__multiply+0x86>
 800714a:	bf00      	nop
 800714c:	08008924 	.word	0x08008924
 8007150:	080089b4 	.word	0x080089b4

08007154 <__pow5mult>:
 8007154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007158:	4615      	mov	r5, r2
 800715a:	f012 0203 	ands.w	r2, r2, #3
 800715e:	4606      	mov	r6, r0
 8007160:	460f      	mov	r7, r1
 8007162:	d007      	beq.n	8007174 <__pow5mult+0x20>
 8007164:	4c25      	ldr	r4, [pc, #148]	; (80071fc <__pow5mult+0xa8>)
 8007166:	3a01      	subs	r2, #1
 8007168:	2300      	movs	r3, #0
 800716a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800716e:	f7ff fe51 	bl	8006e14 <__multadd>
 8007172:	4607      	mov	r7, r0
 8007174:	10ad      	asrs	r5, r5, #2
 8007176:	d03d      	beq.n	80071f4 <__pow5mult+0xa0>
 8007178:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800717a:	b97c      	cbnz	r4, 800719c <__pow5mult+0x48>
 800717c:	2010      	movs	r0, #16
 800717e:	f7ff fdbf 	bl	8006d00 <malloc>
 8007182:	4602      	mov	r2, r0
 8007184:	6270      	str	r0, [r6, #36]	; 0x24
 8007186:	b928      	cbnz	r0, 8007194 <__pow5mult+0x40>
 8007188:	4b1d      	ldr	r3, [pc, #116]	; (8007200 <__pow5mult+0xac>)
 800718a:	481e      	ldr	r0, [pc, #120]	; (8007204 <__pow5mult+0xb0>)
 800718c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007190:	f000 fce6 	bl	8007b60 <__assert_func>
 8007194:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007198:	6004      	str	r4, [r0, #0]
 800719a:	60c4      	str	r4, [r0, #12]
 800719c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80071a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071a4:	b94c      	cbnz	r4, 80071ba <__pow5mult+0x66>
 80071a6:	f240 2171 	movw	r1, #625	; 0x271
 80071aa:	4630      	mov	r0, r6
 80071ac:	f7ff ff16 	bl	8006fdc <__i2b>
 80071b0:	2300      	movs	r3, #0
 80071b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80071b6:	4604      	mov	r4, r0
 80071b8:	6003      	str	r3, [r0, #0]
 80071ba:	f04f 0900 	mov.w	r9, #0
 80071be:	07eb      	lsls	r3, r5, #31
 80071c0:	d50a      	bpl.n	80071d8 <__pow5mult+0x84>
 80071c2:	4639      	mov	r1, r7
 80071c4:	4622      	mov	r2, r4
 80071c6:	4630      	mov	r0, r6
 80071c8:	f7ff ff1e 	bl	8007008 <__multiply>
 80071cc:	4639      	mov	r1, r7
 80071ce:	4680      	mov	r8, r0
 80071d0:	4630      	mov	r0, r6
 80071d2:	f7ff fdfd 	bl	8006dd0 <_Bfree>
 80071d6:	4647      	mov	r7, r8
 80071d8:	106d      	asrs	r5, r5, #1
 80071da:	d00b      	beq.n	80071f4 <__pow5mult+0xa0>
 80071dc:	6820      	ldr	r0, [r4, #0]
 80071de:	b938      	cbnz	r0, 80071f0 <__pow5mult+0x9c>
 80071e0:	4622      	mov	r2, r4
 80071e2:	4621      	mov	r1, r4
 80071e4:	4630      	mov	r0, r6
 80071e6:	f7ff ff0f 	bl	8007008 <__multiply>
 80071ea:	6020      	str	r0, [r4, #0]
 80071ec:	f8c0 9000 	str.w	r9, [r0]
 80071f0:	4604      	mov	r4, r0
 80071f2:	e7e4      	b.n	80071be <__pow5mult+0x6a>
 80071f4:	4638      	mov	r0, r7
 80071f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071fa:	bf00      	nop
 80071fc:	08008b08 	.word	0x08008b08
 8007200:	080088ae 	.word	0x080088ae
 8007204:	080089b4 	.word	0x080089b4

08007208 <__lshift>:
 8007208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800720c:	460c      	mov	r4, r1
 800720e:	6849      	ldr	r1, [r1, #4]
 8007210:	6923      	ldr	r3, [r4, #16]
 8007212:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007216:	68a3      	ldr	r3, [r4, #8]
 8007218:	4607      	mov	r7, r0
 800721a:	4691      	mov	r9, r2
 800721c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007220:	f108 0601 	add.w	r6, r8, #1
 8007224:	42b3      	cmp	r3, r6
 8007226:	db0b      	blt.n	8007240 <__lshift+0x38>
 8007228:	4638      	mov	r0, r7
 800722a:	f7ff fd91 	bl	8006d50 <_Balloc>
 800722e:	4605      	mov	r5, r0
 8007230:	b948      	cbnz	r0, 8007246 <__lshift+0x3e>
 8007232:	4602      	mov	r2, r0
 8007234:	4b28      	ldr	r3, [pc, #160]	; (80072d8 <__lshift+0xd0>)
 8007236:	4829      	ldr	r0, [pc, #164]	; (80072dc <__lshift+0xd4>)
 8007238:	f240 11d9 	movw	r1, #473	; 0x1d9
 800723c:	f000 fc90 	bl	8007b60 <__assert_func>
 8007240:	3101      	adds	r1, #1
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	e7ee      	b.n	8007224 <__lshift+0x1c>
 8007246:	2300      	movs	r3, #0
 8007248:	f100 0114 	add.w	r1, r0, #20
 800724c:	f100 0210 	add.w	r2, r0, #16
 8007250:	4618      	mov	r0, r3
 8007252:	4553      	cmp	r3, sl
 8007254:	db33      	blt.n	80072be <__lshift+0xb6>
 8007256:	6920      	ldr	r0, [r4, #16]
 8007258:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800725c:	f104 0314 	add.w	r3, r4, #20
 8007260:	f019 091f 	ands.w	r9, r9, #31
 8007264:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007268:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800726c:	d02b      	beq.n	80072c6 <__lshift+0xbe>
 800726e:	f1c9 0e20 	rsb	lr, r9, #32
 8007272:	468a      	mov	sl, r1
 8007274:	2200      	movs	r2, #0
 8007276:	6818      	ldr	r0, [r3, #0]
 8007278:	fa00 f009 	lsl.w	r0, r0, r9
 800727c:	4302      	orrs	r2, r0
 800727e:	f84a 2b04 	str.w	r2, [sl], #4
 8007282:	f853 2b04 	ldr.w	r2, [r3], #4
 8007286:	459c      	cmp	ip, r3
 8007288:	fa22 f20e 	lsr.w	r2, r2, lr
 800728c:	d8f3      	bhi.n	8007276 <__lshift+0x6e>
 800728e:	ebac 0304 	sub.w	r3, ip, r4
 8007292:	3b15      	subs	r3, #21
 8007294:	f023 0303 	bic.w	r3, r3, #3
 8007298:	3304      	adds	r3, #4
 800729a:	f104 0015 	add.w	r0, r4, #21
 800729e:	4584      	cmp	ip, r0
 80072a0:	bf38      	it	cc
 80072a2:	2304      	movcc	r3, #4
 80072a4:	50ca      	str	r2, [r1, r3]
 80072a6:	b10a      	cbz	r2, 80072ac <__lshift+0xa4>
 80072a8:	f108 0602 	add.w	r6, r8, #2
 80072ac:	3e01      	subs	r6, #1
 80072ae:	4638      	mov	r0, r7
 80072b0:	612e      	str	r6, [r5, #16]
 80072b2:	4621      	mov	r1, r4
 80072b4:	f7ff fd8c 	bl	8006dd0 <_Bfree>
 80072b8:	4628      	mov	r0, r5
 80072ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072be:	f842 0f04 	str.w	r0, [r2, #4]!
 80072c2:	3301      	adds	r3, #1
 80072c4:	e7c5      	b.n	8007252 <__lshift+0x4a>
 80072c6:	3904      	subs	r1, #4
 80072c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80072d0:	459c      	cmp	ip, r3
 80072d2:	d8f9      	bhi.n	80072c8 <__lshift+0xc0>
 80072d4:	e7ea      	b.n	80072ac <__lshift+0xa4>
 80072d6:	bf00      	nop
 80072d8:	08008924 	.word	0x08008924
 80072dc:	080089b4 	.word	0x080089b4

080072e0 <__mcmp>:
 80072e0:	b530      	push	{r4, r5, lr}
 80072e2:	6902      	ldr	r2, [r0, #16]
 80072e4:	690c      	ldr	r4, [r1, #16]
 80072e6:	1b12      	subs	r2, r2, r4
 80072e8:	d10e      	bne.n	8007308 <__mcmp+0x28>
 80072ea:	f100 0314 	add.w	r3, r0, #20
 80072ee:	3114      	adds	r1, #20
 80072f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80072f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80072f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80072fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007300:	42a5      	cmp	r5, r4
 8007302:	d003      	beq.n	800730c <__mcmp+0x2c>
 8007304:	d305      	bcc.n	8007312 <__mcmp+0x32>
 8007306:	2201      	movs	r2, #1
 8007308:	4610      	mov	r0, r2
 800730a:	bd30      	pop	{r4, r5, pc}
 800730c:	4283      	cmp	r3, r0
 800730e:	d3f3      	bcc.n	80072f8 <__mcmp+0x18>
 8007310:	e7fa      	b.n	8007308 <__mcmp+0x28>
 8007312:	f04f 32ff 	mov.w	r2, #4294967295
 8007316:	e7f7      	b.n	8007308 <__mcmp+0x28>

08007318 <__mdiff>:
 8007318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	460c      	mov	r4, r1
 800731e:	4606      	mov	r6, r0
 8007320:	4611      	mov	r1, r2
 8007322:	4620      	mov	r0, r4
 8007324:	4617      	mov	r7, r2
 8007326:	f7ff ffdb 	bl	80072e0 <__mcmp>
 800732a:	1e05      	subs	r5, r0, #0
 800732c:	d110      	bne.n	8007350 <__mdiff+0x38>
 800732e:	4629      	mov	r1, r5
 8007330:	4630      	mov	r0, r6
 8007332:	f7ff fd0d 	bl	8006d50 <_Balloc>
 8007336:	b930      	cbnz	r0, 8007346 <__mdiff+0x2e>
 8007338:	4b39      	ldr	r3, [pc, #228]	; (8007420 <__mdiff+0x108>)
 800733a:	4602      	mov	r2, r0
 800733c:	f240 2132 	movw	r1, #562	; 0x232
 8007340:	4838      	ldr	r0, [pc, #224]	; (8007424 <__mdiff+0x10c>)
 8007342:	f000 fc0d 	bl	8007b60 <__assert_func>
 8007346:	2301      	movs	r3, #1
 8007348:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800734c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007350:	bfa4      	itt	ge
 8007352:	463b      	movge	r3, r7
 8007354:	4627      	movge	r7, r4
 8007356:	4630      	mov	r0, r6
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	bfa6      	itte	ge
 800735c:	461c      	movge	r4, r3
 800735e:	2500      	movge	r5, #0
 8007360:	2501      	movlt	r5, #1
 8007362:	f7ff fcf5 	bl	8006d50 <_Balloc>
 8007366:	b920      	cbnz	r0, 8007372 <__mdiff+0x5a>
 8007368:	4b2d      	ldr	r3, [pc, #180]	; (8007420 <__mdiff+0x108>)
 800736a:	4602      	mov	r2, r0
 800736c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007370:	e7e6      	b.n	8007340 <__mdiff+0x28>
 8007372:	693e      	ldr	r6, [r7, #16]
 8007374:	60c5      	str	r5, [r0, #12]
 8007376:	6925      	ldr	r5, [r4, #16]
 8007378:	f107 0114 	add.w	r1, r7, #20
 800737c:	f104 0914 	add.w	r9, r4, #20
 8007380:	f100 0e14 	add.w	lr, r0, #20
 8007384:	f107 0210 	add.w	r2, r7, #16
 8007388:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800738c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007390:	46f2      	mov	sl, lr
 8007392:	2700      	movs	r7, #0
 8007394:	f859 3b04 	ldr.w	r3, [r9], #4
 8007398:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800739c:	fa1f f883 	uxth.w	r8, r3
 80073a0:	fa17 f78b 	uxtah	r7, r7, fp
 80073a4:	0c1b      	lsrs	r3, r3, #16
 80073a6:	eba7 0808 	sub.w	r8, r7, r8
 80073aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80073b2:	fa1f f888 	uxth.w	r8, r8
 80073b6:	141f      	asrs	r7, r3, #16
 80073b8:	454d      	cmp	r5, r9
 80073ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80073be:	f84a 3b04 	str.w	r3, [sl], #4
 80073c2:	d8e7      	bhi.n	8007394 <__mdiff+0x7c>
 80073c4:	1b2b      	subs	r3, r5, r4
 80073c6:	3b15      	subs	r3, #21
 80073c8:	f023 0303 	bic.w	r3, r3, #3
 80073cc:	3304      	adds	r3, #4
 80073ce:	3415      	adds	r4, #21
 80073d0:	42a5      	cmp	r5, r4
 80073d2:	bf38      	it	cc
 80073d4:	2304      	movcc	r3, #4
 80073d6:	4419      	add	r1, r3
 80073d8:	4473      	add	r3, lr
 80073da:	469e      	mov	lr, r3
 80073dc:	460d      	mov	r5, r1
 80073de:	4565      	cmp	r5, ip
 80073e0:	d30e      	bcc.n	8007400 <__mdiff+0xe8>
 80073e2:	f10c 0203 	add.w	r2, ip, #3
 80073e6:	1a52      	subs	r2, r2, r1
 80073e8:	f022 0203 	bic.w	r2, r2, #3
 80073ec:	3903      	subs	r1, #3
 80073ee:	458c      	cmp	ip, r1
 80073f0:	bf38      	it	cc
 80073f2:	2200      	movcc	r2, #0
 80073f4:	441a      	add	r2, r3
 80073f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80073fa:	b17b      	cbz	r3, 800741c <__mdiff+0x104>
 80073fc:	6106      	str	r6, [r0, #16]
 80073fe:	e7a5      	b.n	800734c <__mdiff+0x34>
 8007400:	f855 8b04 	ldr.w	r8, [r5], #4
 8007404:	fa17 f488 	uxtah	r4, r7, r8
 8007408:	1422      	asrs	r2, r4, #16
 800740a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800740e:	b2a4      	uxth	r4, r4
 8007410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007414:	f84e 4b04 	str.w	r4, [lr], #4
 8007418:	1417      	asrs	r7, r2, #16
 800741a:	e7e0      	b.n	80073de <__mdiff+0xc6>
 800741c:	3e01      	subs	r6, #1
 800741e:	e7ea      	b.n	80073f6 <__mdiff+0xde>
 8007420:	08008924 	.word	0x08008924
 8007424:	080089b4 	.word	0x080089b4

08007428 <__ulp>:
 8007428:	b082      	sub	sp, #8
 800742a:	ed8d 0b00 	vstr	d0, [sp]
 800742e:	9b01      	ldr	r3, [sp, #4]
 8007430:	4912      	ldr	r1, [pc, #72]	; (800747c <__ulp+0x54>)
 8007432:	4019      	ands	r1, r3
 8007434:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007438:	2900      	cmp	r1, #0
 800743a:	dd05      	ble.n	8007448 <__ulp+0x20>
 800743c:	2200      	movs	r2, #0
 800743e:	460b      	mov	r3, r1
 8007440:	ec43 2b10 	vmov	d0, r2, r3
 8007444:	b002      	add	sp, #8
 8007446:	4770      	bx	lr
 8007448:	4249      	negs	r1, r1
 800744a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800744e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007452:	f04f 0200 	mov.w	r2, #0
 8007456:	f04f 0300 	mov.w	r3, #0
 800745a:	da04      	bge.n	8007466 <__ulp+0x3e>
 800745c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007460:	fa41 f300 	asr.w	r3, r1, r0
 8007464:	e7ec      	b.n	8007440 <__ulp+0x18>
 8007466:	f1a0 0114 	sub.w	r1, r0, #20
 800746a:	291e      	cmp	r1, #30
 800746c:	bfda      	itte	le
 800746e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007472:	fa20 f101 	lsrle.w	r1, r0, r1
 8007476:	2101      	movgt	r1, #1
 8007478:	460a      	mov	r2, r1
 800747a:	e7e1      	b.n	8007440 <__ulp+0x18>
 800747c:	7ff00000 	.word	0x7ff00000

08007480 <__b2d>:
 8007480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007482:	6905      	ldr	r5, [r0, #16]
 8007484:	f100 0714 	add.w	r7, r0, #20
 8007488:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800748c:	1f2e      	subs	r6, r5, #4
 800748e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007492:	4620      	mov	r0, r4
 8007494:	f7ff fd52 	bl	8006f3c <__hi0bits>
 8007498:	f1c0 0320 	rsb	r3, r0, #32
 800749c:	280a      	cmp	r0, #10
 800749e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800751c <__b2d+0x9c>
 80074a2:	600b      	str	r3, [r1, #0]
 80074a4:	dc14      	bgt.n	80074d0 <__b2d+0x50>
 80074a6:	f1c0 0e0b 	rsb	lr, r0, #11
 80074aa:	fa24 f10e 	lsr.w	r1, r4, lr
 80074ae:	42b7      	cmp	r7, r6
 80074b0:	ea41 030c 	orr.w	r3, r1, ip
 80074b4:	bf34      	ite	cc
 80074b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80074ba:	2100      	movcs	r1, #0
 80074bc:	3015      	adds	r0, #21
 80074be:	fa04 f000 	lsl.w	r0, r4, r0
 80074c2:	fa21 f10e 	lsr.w	r1, r1, lr
 80074c6:	ea40 0201 	orr.w	r2, r0, r1
 80074ca:	ec43 2b10 	vmov	d0, r2, r3
 80074ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d0:	42b7      	cmp	r7, r6
 80074d2:	bf3a      	itte	cc
 80074d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80074d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80074dc:	2100      	movcs	r1, #0
 80074de:	380b      	subs	r0, #11
 80074e0:	d017      	beq.n	8007512 <__b2d+0x92>
 80074e2:	f1c0 0c20 	rsb	ip, r0, #32
 80074e6:	fa04 f500 	lsl.w	r5, r4, r0
 80074ea:	42be      	cmp	r6, r7
 80074ec:	fa21 f40c 	lsr.w	r4, r1, ip
 80074f0:	ea45 0504 	orr.w	r5, r5, r4
 80074f4:	bf8c      	ite	hi
 80074f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80074fa:	2400      	movls	r4, #0
 80074fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007500:	fa01 f000 	lsl.w	r0, r1, r0
 8007504:	fa24 f40c 	lsr.w	r4, r4, ip
 8007508:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800750c:	ea40 0204 	orr.w	r2, r0, r4
 8007510:	e7db      	b.n	80074ca <__b2d+0x4a>
 8007512:	ea44 030c 	orr.w	r3, r4, ip
 8007516:	460a      	mov	r2, r1
 8007518:	e7d7      	b.n	80074ca <__b2d+0x4a>
 800751a:	bf00      	nop
 800751c:	3ff00000 	.word	0x3ff00000

08007520 <__d2b>:
 8007520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007524:	4689      	mov	r9, r1
 8007526:	2101      	movs	r1, #1
 8007528:	ec57 6b10 	vmov	r6, r7, d0
 800752c:	4690      	mov	r8, r2
 800752e:	f7ff fc0f 	bl	8006d50 <_Balloc>
 8007532:	4604      	mov	r4, r0
 8007534:	b930      	cbnz	r0, 8007544 <__d2b+0x24>
 8007536:	4602      	mov	r2, r0
 8007538:	4b25      	ldr	r3, [pc, #148]	; (80075d0 <__d2b+0xb0>)
 800753a:	4826      	ldr	r0, [pc, #152]	; (80075d4 <__d2b+0xb4>)
 800753c:	f240 310a 	movw	r1, #778	; 0x30a
 8007540:	f000 fb0e 	bl	8007b60 <__assert_func>
 8007544:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007548:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800754c:	bb35      	cbnz	r5, 800759c <__d2b+0x7c>
 800754e:	2e00      	cmp	r6, #0
 8007550:	9301      	str	r3, [sp, #4]
 8007552:	d028      	beq.n	80075a6 <__d2b+0x86>
 8007554:	4668      	mov	r0, sp
 8007556:	9600      	str	r6, [sp, #0]
 8007558:	f7ff fd10 	bl	8006f7c <__lo0bits>
 800755c:	9900      	ldr	r1, [sp, #0]
 800755e:	b300      	cbz	r0, 80075a2 <__d2b+0x82>
 8007560:	9a01      	ldr	r2, [sp, #4]
 8007562:	f1c0 0320 	rsb	r3, r0, #32
 8007566:	fa02 f303 	lsl.w	r3, r2, r3
 800756a:	430b      	orrs	r3, r1
 800756c:	40c2      	lsrs	r2, r0
 800756e:	6163      	str	r3, [r4, #20]
 8007570:	9201      	str	r2, [sp, #4]
 8007572:	9b01      	ldr	r3, [sp, #4]
 8007574:	61a3      	str	r3, [r4, #24]
 8007576:	2b00      	cmp	r3, #0
 8007578:	bf14      	ite	ne
 800757a:	2202      	movne	r2, #2
 800757c:	2201      	moveq	r2, #1
 800757e:	6122      	str	r2, [r4, #16]
 8007580:	b1d5      	cbz	r5, 80075b8 <__d2b+0x98>
 8007582:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007586:	4405      	add	r5, r0
 8007588:	f8c9 5000 	str.w	r5, [r9]
 800758c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007590:	f8c8 0000 	str.w	r0, [r8]
 8007594:	4620      	mov	r0, r4
 8007596:	b003      	add	sp, #12
 8007598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800759c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075a0:	e7d5      	b.n	800754e <__d2b+0x2e>
 80075a2:	6161      	str	r1, [r4, #20]
 80075a4:	e7e5      	b.n	8007572 <__d2b+0x52>
 80075a6:	a801      	add	r0, sp, #4
 80075a8:	f7ff fce8 	bl	8006f7c <__lo0bits>
 80075ac:	9b01      	ldr	r3, [sp, #4]
 80075ae:	6163      	str	r3, [r4, #20]
 80075b0:	2201      	movs	r2, #1
 80075b2:	6122      	str	r2, [r4, #16]
 80075b4:	3020      	adds	r0, #32
 80075b6:	e7e3      	b.n	8007580 <__d2b+0x60>
 80075b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075c0:	f8c9 0000 	str.w	r0, [r9]
 80075c4:	6918      	ldr	r0, [r3, #16]
 80075c6:	f7ff fcb9 	bl	8006f3c <__hi0bits>
 80075ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075ce:	e7df      	b.n	8007590 <__d2b+0x70>
 80075d0:	08008924 	.word	0x08008924
 80075d4:	080089b4 	.word	0x080089b4

080075d8 <__ratio>:
 80075d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	4688      	mov	r8, r1
 80075de:	4669      	mov	r1, sp
 80075e0:	4681      	mov	r9, r0
 80075e2:	f7ff ff4d 	bl	8007480 <__b2d>
 80075e6:	a901      	add	r1, sp, #4
 80075e8:	4640      	mov	r0, r8
 80075ea:	ec55 4b10 	vmov	r4, r5, d0
 80075ee:	f7ff ff47 	bl	8007480 <__b2d>
 80075f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80075f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80075fa:	eba3 0c02 	sub.w	ip, r3, r2
 80075fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007602:	1a9b      	subs	r3, r3, r2
 8007604:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007608:	ec51 0b10 	vmov	r0, r1, d0
 800760c:	2b00      	cmp	r3, #0
 800760e:	bfd6      	itet	le
 8007610:	460a      	movle	r2, r1
 8007612:	462a      	movgt	r2, r5
 8007614:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007618:	468b      	mov	fp, r1
 800761a:	462f      	mov	r7, r5
 800761c:	bfd4      	ite	le
 800761e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007622:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007626:	4620      	mov	r0, r4
 8007628:	ee10 2a10 	vmov	r2, s0
 800762c:	465b      	mov	r3, fp
 800762e:	4639      	mov	r1, r7
 8007630:	f7f9 f914 	bl	800085c <__aeabi_ddiv>
 8007634:	ec41 0b10 	vmov	d0, r0, r1
 8007638:	b003      	add	sp, #12
 800763a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800763e <__copybits>:
 800763e:	3901      	subs	r1, #1
 8007640:	b570      	push	{r4, r5, r6, lr}
 8007642:	1149      	asrs	r1, r1, #5
 8007644:	6914      	ldr	r4, [r2, #16]
 8007646:	3101      	adds	r1, #1
 8007648:	f102 0314 	add.w	r3, r2, #20
 800764c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007650:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007654:	1f05      	subs	r5, r0, #4
 8007656:	42a3      	cmp	r3, r4
 8007658:	d30c      	bcc.n	8007674 <__copybits+0x36>
 800765a:	1aa3      	subs	r3, r4, r2
 800765c:	3b11      	subs	r3, #17
 800765e:	f023 0303 	bic.w	r3, r3, #3
 8007662:	3211      	adds	r2, #17
 8007664:	42a2      	cmp	r2, r4
 8007666:	bf88      	it	hi
 8007668:	2300      	movhi	r3, #0
 800766a:	4418      	add	r0, r3
 800766c:	2300      	movs	r3, #0
 800766e:	4288      	cmp	r0, r1
 8007670:	d305      	bcc.n	800767e <__copybits+0x40>
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	f853 6b04 	ldr.w	r6, [r3], #4
 8007678:	f845 6f04 	str.w	r6, [r5, #4]!
 800767c:	e7eb      	b.n	8007656 <__copybits+0x18>
 800767e:	f840 3b04 	str.w	r3, [r0], #4
 8007682:	e7f4      	b.n	800766e <__copybits+0x30>

08007684 <__any_on>:
 8007684:	f100 0214 	add.w	r2, r0, #20
 8007688:	6900      	ldr	r0, [r0, #16]
 800768a:	114b      	asrs	r3, r1, #5
 800768c:	4298      	cmp	r0, r3
 800768e:	b510      	push	{r4, lr}
 8007690:	db11      	blt.n	80076b6 <__any_on+0x32>
 8007692:	dd0a      	ble.n	80076aa <__any_on+0x26>
 8007694:	f011 011f 	ands.w	r1, r1, #31
 8007698:	d007      	beq.n	80076aa <__any_on+0x26>
 800769a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800769e:	fa24 f001 	lsr.w	r0, r4, r1
 80076a2:	fa00 f101 	lsl.w	r1, r0, r1
 80076a6:	428c      	cmp	r4, r1
 80076a8:	d10b      	bne.n	80076c2 <__any_on+0x3e>
 80076aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d803      	bhi.n	80076ba <__any_on+0x36>
 80076b2:	2000      	movs	r0, #0
 80076b4:	bd10      	pop	{r4, pc}
 80076b6:	4603      	mov	r3, r0
 80076b8:	e7f7      	b.n	80076aa <__any_on+0x26>
 80076ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80076be:	2900      	cmp	r1, #0
 80076c0:	d0f5      	beq.n	80076ae <__any_on+0x2a>
 80076c2:	2001      	movs	r0, #1
 80076c4:	e7f6      	b.n	80076b4 <__any_on+0x30>

080076c6 <_calloc_r>:
 80076c6:	b513      	push	{r0, r1, r4, lr}
 80076c8:	434a      	muls	r2, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	9201      	str	r2, [sp, #4]
 80076ce:	f000 f859 	bl	8007784 <_malloc_r>
 80076d2:	4604      	mov	r4, r0
 80076d4:	b118      	cbz	r0, 80076de <_calloc_r+0x18>
 80076d6:	9a01      	ldr	r2, [sp, #4]
 80076d8:	2100      	movs	r1, #0
 80076da:	f7fc fbc9 	bl	8003e70 <memset>
 80076de:	4620      	mov	r0, r4
 80076e0:	b002      	add	sp, #8
 80076e2:	bd10      	pop	{r4, pc}

080076e4 <_free_r>:
 80076e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076e6:	2900      	cmp	r1, #0
 80076e8:	d048      	beq.n	800777c <_free_r+0x98>
 80076ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ee:	9001      	str	r0, [sp, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f1a1 0404 	sub.w	r4, r1, #4
 80076f6:	bfb8      	it	lt
 80076f8:	18e4      	addlt	r4, r4, r3
 80076fa:	f000 fa7b 	bl	8007bf4 <__malloc_lock>
 80076fe:	4a20      	ldr	r2, [pc, #128]	; (8007780 <_free_r+0x9c>)
 8007700:	9801      	ldr	r0, [sp, #4]
 8007702:	6813      	ldr	r3, [r2, #0]
 8007704:	4615      	mov	r5, r2
 8007706:	b933      	cbnz	r3, 8007716 <_free_r+0x32>
 8007708:	6063      	str	r3, [r4, #4]
 800770a:	6014      	str	r4, [r2, #0]
 800770c:	b003      	add	sp, #12
 800770e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007712:	f000 ba75 	b.w	8007c00 <__malloc_unlock>
 8007716:	42a3      	cmp	r3, r4
 8007718:	d90b      	bls.n	8007732 <_free_r+0x4e>
 800771a:	6821      	ldr	r1, [r4, #0]
 800771c:	1862      	adds	r2, r4, r1
 800771e:	4293      	cmp	r3, r2
 8007720:	bf04      	itt	eq
 8007722:	681a      	ldreq	r2, [r3, #0]
 8007724:	685b      	ldreq	r3, [r3, #4]
 8007726:	6063      	str	r3, [r4, #4]
 8007728:	bf04      	itt	eq
 800772a:	1852      	addeq	r2, r2, r1
 800772c:	6022      	streq	r2, [r4, #0]
 800772e:	602c      	str	r4, [r5, #0]
 8007730:	e7ec      	b.n	800770c <_free_r+0x28>
 8007732:	461a      	mov	r2, r3
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	b10b      	cbz	r3, 800773c <_free_r+0x58>
 8007738:	42a3      	cmp	r3, r4
 800773a:	d9fa      	bls.n	8007732 <_free_r+0x4e>
 800773c:	6811      	ldr	r1, [r2, #0]
 800773e:	1855      	adds	r5, r2, r1
 8007740:	42a5      	cmp	r5, r4
 8007742:	d10b      	bne.n	800775c <_free_r+0x78>
 8007744:	6824      	ldr	r4, [r4, #0]
 8007746:	4421      	add	r1, r4
 8007748:	1854      	adds	r4, r2, r1
 800774a:	42a3      	cmp	r3, r4
 800774c:	6011      	str	r1, [r2, #0]
 800774e:	d1dd      	bne.n	800770c <_free_r+0x28>
 8007750:	681c      	ldr	r4, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	6053      	str	r3, [r2, #4]
 8007756:	4421      	add	r1, r4
 8007758:	6011      	str	r1, [r2, #0]
 800775a:	e7d7      	b.n	800770c <_free_r+0x28>
 800775c:	d902      	bls.n	8007764 <_free_r+0x80>
 800775e:	230c      	movs	r3, #12
 8007760:	6003      	str	r3, [r0, #0]
 8007762:	e7d3      	b.n	800770c <_free_r+0x28>
 8007764:	6825      	ldr	r5, [r4, #0]
 8007766:	1961      	adds	r1, r4, r5
 8007768:	428b      	cmp	r3, r1
 800776a:	bf04      	itt	eq
 800776c:	6819      	ldreq	r1, [r3, #0]
 800776e:	685b      	ldreq	r3, [r3, #4]
 8007770:	6063      	str	r3, [r4, #4]
 8007772:	bf04      	itt	eq
 8007774:	1949      	addeq	r1, r1, r5
 8007776:	6021      	streq	r1, [r4, #0]
 8007778:	6054      	str	r4, [r2, #4]
 800777a:	e7c7      	b.n	800770c <_free_r+0x28>
 800777c:	b003      	add	sp, #12
 800777e:	bd30      	pop	{r4, r5, pc}
 8007780:	20000200 	.word	0x20000200

08007784 <_malloc_r>:
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	1ccd      	adds	r5, r1, #3
 8007788:	f025 0503 	bic.w	r5, r5, #3
 800778c:	3508      	adds	r5, #8
 800778e:	2d0c      	cmp	r5, #12
 8007790:	bf38      	it	cc
 8007792:	250c      	movcc	r5, #12
 8007794:	2d00      	cmp	r5, #0
 8007796:	4606      	mov	r6, r0
 8007798:	db01      	blt.n	800779e <_malloc_r+0x1a>
 800779a:	42a9      	cmp	r1, r5
 800779c:	d903      	bls.n	80077a6 <_malloc_r+0x22>
 800779e:	230c      	movs	r3, #12
 80077a0:	6033      	str	r3, [r6, #0]
 80077a2:	2000      	movs	r0, #0
 80077a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a6:	f000 fa25 	bl	8007bf4 <__malloc_lock>
 80077aa:	4921      	ldr	r1, [pc, #132]	; (8007830 <_malloc_r+0xac>)
 80077ac:	680a      	ldr	r2, [r1, #0]
 80077ae:	4614      	mov	r4, r2
 80077b0:	b99c      	cbnz	r4, 80077da <_malloc_r+0x56>
 80077b2:	4f20      	ldr	r7, [pc, #128]	; (8007834 <_malloc_r+0xb0>)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	b923      	cbnz	r3, 80077c2 <_malloc_r+0x3e>
 80077b8:	4621      	mov	r1, r4
 80077ba:	4630      	mov	r0, r6
 80077bc:	f000 f9a0 	bl	8007b00 <_sbrk_r>
 80077c0:	6038      	str	r0, [r7, #0]
 80077c2:	4629      	mov	r1, r5
 80077c4:	4630      	mov	r0, r6
 80077c6:	f000 f99b 	bl	8007b00 <_sbrk_r>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	d123      	bne.n	8007816 <_malloc_r+0x92>
 80077ce:	230c      	movs	r3, #12
 80077d0:	6033      	str	r3, [r6, #0]
 80077d2:	4630      	mov	r0, r6
 80077d4:	f000 fa14 	bl	8007c00 <__malloc_unlock>
 80077d8:	e7e3      	b.n	80077a2 <_malloc_r+0x1e>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	1b5b      	subs	r3, r3, r5
 80077de:	d417      	bmi.n	8007810 <_malloc_r+0x8c>
 80077e0:	2b0b      	cmp	r3, #11
 80077e2:	d903      	bls.n	80077ec <_malloc_r+0x68>
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	441c      	add	r4, r3
 80077e8:	6025      	str	r5, [r4, #0]
 80077ea:	e004      	b.n	80077f6 <_malloc_r+0x72>
 80077ec:	6863      	ldr	r3, [r4, #4]
 80077ee:	42a2      	cmp	r2, r4
 80077f0:	bf0c      	ite	eq
 80077f2:	600b      	streq	r3, [r1, #0]
 80077f4:	6053      	strne	r3, [r2, #4]
 80077f6:	4630      	mov	r0, r6
 80077f8:	f000 fa02 	bl	8007c00 <__malloc_unlock>
 80077fc:	f104 000b 	add.w	r0, r4, #11
 8007800:	1d23      	adds	r3, r4, #4
 8007802:	f020 0007 	bic.w	r0, r0, #7
 8007806:	1ac2      	subs	r2, r0, r3
 8007808:	d0cc      	beq.n	80077a4 <_malloc_r+0x20>
 800780a:	1a1b      	subs	r3, r3, r0
 800780c:	50a3      	str	r3, [r4, r2]
 800780e:	e7c9      	b.n	80077a4 <_malloc_r+0x20>
 8007810:	4622      	mov	r2, r4
 8007812:	6864      	ldr	r4, [r4, #4]
 8007814:	e7cc      	b.n	80077b0 <_malloc_r+0x2c>
 8007816:	1cc4      	adds	r4, r0, #3
 8007818:	f024 0403 	bic.w	r4, r4, #3
 800781c:	42a0      	cmp	r0, r4
 800781e:	d0e3      	beq.n	80077e8 <_malloc_r+0x64>
 8007820:	1a21      	subs	r1, r4, r0
 8007822:	4630      	mov	r0, r6
 8007824:	f000 f96c 	bl	8007b00 <_sbrk_r>
 8007828:	3001      	adds	r0, #1
 800782a:	d1dd      	bne.n	80077e8 <_malloc_r+0x64>
 800782c:	e7cf      	b.n	80077ce <_malloc_r+0x4a>
 800782e:	bf00      	nop
 8007830:	20000200 	.word	0x20000200
 8007834:	20000204 	.word	0x20000204

08007838 <__ssputs_r>:
 8007838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800783c:	688e      	ldr	r6, [r1, #8]
 800783e:	429e      	cmp	r6, r3
 8007840:	4682      	mov	sl, r0
 8007842:	460c      	mov	r4, r1
 8007844:	4690      	mov	r8, r2
 8007846:	461f      	mov	r7, r3
 8007848:	d838      	bhi.n	80078bc <__ssputs_r+0x84>
 800784a:	898a      	ldrh	r2, [r1, #12]
 800784c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007850:	d032      	beq.n	80078b8 <__ssputs_r+0x80>
 8007852:	6825      	ldr	r5, [r4, #0]
 8007854:	6909      	ldr	r1, [r1, #16]
 8007856:	eba5 0901 	sub.w	r9, r5, r1
 800785a:	6965      	ldr	r5, [r4, #20]
 800785c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007860:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007864:	3301      	adds	r3, #1
 8007866:	444b      	add	r3, r9
 8007868:	106d      	asrs	r5, r5, #1
 800786a:	429d      	cmp	r5, r3
 800786c:	bf38      	it	cc
 800786e:	461d      	movcc	r5, r3
 8007870:	0553      	lsls	r3, r2, #21
 8007872:	d531      	bpl.n	80078d8 <__ssputs_r+0xa0>
 8007874:	4629      	mov	r1, r5
 8007876:	f7ff ff85 	bl	8007784 <_malloc_r>
 800787a:	4606      	mov	r6, r0
 800787c:	b950      	cbnz	r0, 8007894 <__ssputs_r+0x5c>
 800787e:	230c      	movs	r3, #12
 8007880:	f8ca 3000 	str.w	r3, [sl]
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800788a:	81a3      	strh	r3, [r4, #12]
 800788c:	f04f 30ff 	mov.w	r0, #4294967295
 8007890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007894:	6921      	ldr	r1, [r4, #16]
 8007896:	464a      	mov	r2, r9
 8007898:	f7ff fa4c 	bl	8006d34 <memcpy>
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	6126      	str	r6, [r4, #16]
 80078aa:	6165      	str	r5, [r4, #20]
 80078ac:	444e      	add	r6, r9
 80078ae:	eba5 0509 	sub.w	r5, r5, r9
 80078b2:	6026      	str	r6, [r4, #0]
 80078b4:	60a5      	str	r5, [r4, #8]
 80078b6:	463e      	mov	r6, r7
 80078b8:	42be      	cmp	r6, r7
 80078ba:	d900      	bls.n	80078be <__ssputs_r+0x86>
 80078bc:	463e      	mov	r6, r7
 80078be:	4632      	mov	r2, r6
 80078c0:	6820      	ldr	r0, [r4, #0]
 80078c2:	4641      	mov	r1, r8
 80078c4:	f000 f97c 	bl	8007bc0 <memmove>
 80078c8:	68a3      	ldr	r3, [r4, #8]
 80078ca:	6822      	ldr	r2, [r4, #0]
 80078cc:	1b9b      	subs	r3, r3, r6
 80078ce:	4432      	add	r2, r6
 80078d0:	60a3      	str	r3, [r4, #8]
 80078d2:	6022      	str	r2, [r4, #0]
 80078d4:	2000      	movs	r0, #0
 80078d6:	e7db      	b.n	8007890 <__ssputs_r+0x58>
 80078d8:	462a      	mov	r2, r5
 80078da:	f000 f997 	bl	8007c0c <_realloc_r>
 80078de:	4606      	mov	r6, r0
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d1e1      	bne.n	80078a8 <__ssputs_r+0x70>
 80078e4:	6921      	ldr	r1, [r4, #16]
 80078e6:	4650      	mov	r0, sl
 80078e8:	f7ff fefc 	bl	80076e4 <_free_r>
 80078ec:	e7c7      	b.n	800787e <__ssputs_r+0x46>
	...

080078f0 <_svfiprintf_r>:
 80078f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	4698      	mov	r8, r3
 80078f6:	898b      	ldrh	r3, [r1, #12]
 80078f8:	061b      	lsls	r3, r3, #24
 80078fa:	b09d      	sub	sp, #116	; 0x74
 80078fc:	4607      	mov	r7, r0
 80078fe:	460d      	mov	r5, r1
 8007900:	4614      	mov	r4, r2
 8007902:	d50e      	bpl.n	8007922 <_svfiprintf_r+0x32>
 8007904:	690b      	ldr	r3, [r1, #16]
 8007906:	b963      	cbnz	r3, 8007922 <_svfiprintf_r+0x32>
 8007908:	2140      	movs	r1, #64	; 0x40
 800790a:	f7ff ff3b 	bl	8007784 <_malloc_r>
 800790e:	6028      	str	r0, [r5, #0]
 8007910:	6128      	str	r0, [r5, #16]
 8007912:	b920      	cbnz	r0, 800791e <_svfiprintf_r+0x2e>
 8007914:	230c      	movs	r3, #12
 8007916:	603b      	str	r3, [r7, #0]
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	e0d1      	b.n	8007ac2 <_svfiprintf_r+0x1d2>
 800791e:	2340      	movs	r3, #64	; 0x40
 8007920:	616b      	str	r3, [r5, #20]
 8007922:	2300      	movs	r3, #0
 8007924:	9309      	str	r3, [sp, #36]	; 0x24
 8007926:	2320      	movs	r3, #32
 8007928:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800792c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007930:	2330      	movs	r3, #48	; 0x30
 8007932:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007adc <_svfiprintf_r+0x1ec>
 8007936:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800793a:	f04f 0901 	mov.w	r9, #1
 800793e:	4623      	mov	r3, r4
 8007940:	469a      	mov	sl, r3
 8007942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007946:	b10a      	cbz	r2, 800794c <_svfiprintf_r+0x5c>
 8007948:	2a25      	cmp	r2, #37	; 0x25
 800794a:	d1f9      	bne.n	8007940 <_svfiprintf_r+0x50>
 800794c:	ebba 0b04 	subs.w	fp, sl, r4
 8007950:	d00b      	beq.n	800796a <_svfiprintf_r+0x7a>
 8007952:	465b      	mov	r3, fp
 8007954:	4622      	mov	r2, r4
 8007956:	4629      	mov	r1, r5
 8007958:	4638      	mov	r0, r7
 800795a:	f7ff ff6d 	bl	8007838 <__ssputs_r>
 800795e:	3001      	adds	r0, #1
 8007960:	f000 80aa 	beq.w	8007ab8 <_svfiprintf_r+0x1c8>
 8007964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007966:	445a      	add	r2, fp
 8007968:	9209      	str	r2, [sp, #36]	; 0x24
 800796a:	f89a 3000 	ldrb.w	r3, [sl]
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 80a2 	beq.w	8007ab8 <_svfiprintf_r+0x1c8>
 8007974:	2300      	movs	r3, #0
 8007976:	f04f 32ff 	mov.w	r2, #4294967295
 800797a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800797e:	f10a 0a01 	add.w	sl, sl, #1
 8007982:	9304      	str	r3, [sp, #16]
 8007984:	9307      	str	r3, [sp, #28]
 8007986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800798a:	931a      	str	r3, [sp, #104]	; 0x68
 800798c:	4654      	mov	r4, sl
 800798e:	2205      	movs	r2, #5
 8007990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007994:	4851      	ldr	r0, [pc, #324]	; (8007adc <_svfiprintf_r+0x1ec>)
 8007996:	f7f8 fc2b 	bl	80001f0 <memchr>
 800799a:	9a04      	ldr	r2, [sp, #16]
 800799c:	b9d8      	cbnz	r0, 80079d6 <_svfiprintf_r+0xe6>
 800799e:	06d0      	lsls	r0, r2, #27
 80079a0:	bf44      	itt	mi
 80079a2:	2320      	movmi	r3, #32
 80079a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079a8:	0711      	lsls	r1, r2, #28
 80079aa:	bf44      	itt	mi
 80079ac:	232b      	movmi	r3, #43	; 0x2b
 80079ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079b2:	f89a 3000 	ldrb.w	r3, [sl]
 80079b6:	2b2a      	cmp	r3, #42	; 0x2a
 80079b8:	d015      	beq.n	80079e6 <_svfiprintf_r+0xf6>
 80079ba:	9a07      	ldr	r2, [sp, #28]
 80079bc:	4654      	mov	r4, sl
 80079be:	2000      	movs	r0, #0
 80079c0:	f04f 0c0a 	mov.w	ip, #10
 80079c4:	4621      	mov	r1, r4
 80079c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079ca:	3b30      	subs	r3, #48	; 0x30
 80079cc:	2b09      	cmp	r3, #9
 80079ce:	d94e      	bls.n	8007a6e <_svfiprintf_r+0x17e>
 80079d0:	b1b0      	cbz	r0, 8007a00 <_svfiprintf_r+0x110>
 80079d2:	9207      	str	r2, [sp, #28]
 80079d4:	e014      	b.n	8007a00 <_svfiprintf_r+0x110>
 80079d6:	eba0 0308 	sub.w	r3, r0, r8
 80079da:	fa09 f303 	lsl.w	r3, r9, r3
 80079de:	4313      	orrs	r3, r2
 80079e0:	9304      	str	r3, [sp, #16]
 80079e2:	46a2      	mov	sl, r4
 80079e4:	e7d2      	b.n	800798c <_svfiprintf_r+0x9c>
 80079e6:	9b03      	ldr	r3, [sp, #12]
 80079e8:	1d19      	adds	r1, r3, #4
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	9103      	str	r1, [sp, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	bfbb      	ittet	lt
 80079f2:	425b      	neglt	r3, r3
 80079f4:	f042 0202 	orrlt.w	r2, r2, #2
 80079f8:	9307      	strge	r3, [sp, #28]
 80079fa:	9307      	strlt	r3, [sp, #28]
 80079fc:	bfb8      	it	lt
 80079fe:	9204      	strlt	r2, [sp, #16]
 8007a00:	7823      	ldrb	r3, [r4, #0]
 8007a02:	2b2e      	cmp	r3, #46	; 0x2e
 8007a04:	d10c      	bne.n	8007a20 <_svfiprintf_r+0x130>
 8007a06:	7863      	ldrb	r3, [r4, #1]
 8007a08:	2b2a      	cmp	r3, #42	; 0x2a
 8007a0a:	d135      	bne.n	8007a78 <_svfiprintf_r+0x188>
 8007a0c:	9b03      	ldr	r3, [sp, #12]
 8007a0e:	1d1a      	adds	r2, r3, #4
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	9203      	str	r2, [sp, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	bfb8      	it	lt
 8007a18:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a1c:	3402      	adds	r4, #2
 8007a1e:	9305      	str	r3, [sp, #20]
 8007a20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007aec <_svfiprintf_r+0x1fc>
 8007a24:	7821      	ldrb	r1, [r4, #0]
 8007a26:	2203      	movs	r2, #3
 8007a28:	4650      	mov	r0, sl
 8007a2a:	f7f8 fbe1 	bl	80001f0 <memchr>
 8007a2e:	b140      	cbz	r0, 8007a42 <_svfiprintf_r+0x152>
 8007a30:	2340      	movs	r3, #64	; 0x40
 8007a32:	eba0 000a 	sub.w	r0, r0, sl
 8007a36:	fa03 f000 	lsl.w	r0, r3, r0
 8007a3a:	9b04      	ldr	r3, [sp, #16]
 8007a3c:	4303      	orrs	r3, r0
 8007a3e:	3401      	adds	r4, #1
 8007a40:	9304      	str	r3, [sp, #16]
 8007a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a46:	4826      	ldr	r0, [pc, #152]	; (8007ae0 <_svfiprintf_r+0x1f0>)
 8007a48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a4c:	2206      	movs	r2, #6
 8007a4e:	f7f8 fbcf 	bl	80001f0 <memchr>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d038      	beq.n	8007ac8 <_svfiprintf_r+0x1d8>
 8007a56:	4b23      	ldr	r3, [pc, #140]	; (8007ae4 <_svfiprintf_r+0x1f4>)
 8007a58:	bb1b      	cbnz	r3, 8007aa2 <_svfiprintf_r+0x1b2>
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	3307      	adds	r3, #7
 8007a5e:	f023 0307 	bic.w	r3, r3, #7
 8007a62:	3308      	adds	r3, #8
 8007a64:	9303      	str	r3, [sp, #12]
 8007a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a68:	4433      	add	r3, r6
 8007a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a6c:	e767      	b.n	800793e <_svfiprintf_r+0x4e>
 8007a6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a72:	460c      	mov	r4, r1
 8007a74:	2001      	movs	r0, #1
 8007a76:	e7a5      	b.n	80079c4 <_svfiprintf_r+0xd4>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	3401      	adds	r4, #1
 8007a7c:	9305      	str	r3, [sp, #20]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	f04f 0c0a 	mov.w	ip, #10
 8007a84:	4620      	mov	r0, r4
 8007a86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a8a:	3a30      	subs	r2, #48	; 0x30
 8007a8c:	2a09      	cmp	r2, #9
 8007a8e:	d903      	bls.n	8007a98 <_svfiprintf_r+0x1a8>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0c5      	beq.n	8007a20 <_svfiprintf_r+0x130>
 8007a94:	9105      	str	r1, [sp, #20]
 8007a96:	e7c3      	b.n	8007a20 <_svfiprintf_r+0x130>
 8007a98:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e7f0      	b.n	8007a84 <_svfiprintf_r+0x194>
 8007aa2:	ab03      	add	r3, sp, #12
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	462a      	mov	r2, r5
 8007aa8:	4b0f      	ldr	r3, [pc, #60]	; (8007ae8 <_svfiprintf_r+0x1f8>)
 8007aaa:	a904      	add	r1, sp, #16
 8007aac:	4638      	mov	r0, r7
 8007aae:	f7fc fa87 	bl	8003fc0 <_printf_float>
 8007ab2:	1c42      	adds	r2, r0, #1
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	d1d6      	bne.n	8007a66 <_svfiprintf_r+0x176>
 8007ab8:	89ab      	ldrh	r3, [r5, #12]
 8007aba:	065b      	lsls	r3, r3, #25
 8007abc:	f53f af2c 	bmi.w	8007918 <_svfiprintf_r+0x28>
 8007ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ac2:	b01d      	add	sp, #116	; 0x74
 8007ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac8:	ab03      	add	r3, sp, #12
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	462a      	mov	r2, r5
 8007ace:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <_svfiprintf_r+0x1f8>)
 8007ad0:	a904      	add	r1, sp, #16
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	f7fc fd18 	bl	8004508 <_printf_i>
 8007ad8:	e7eb      	b.n	8007ab2 <_svfiprintf_r+0x1c2>
 8007ada:	bf00      	nop
 8007adc:	08008b14 	.word	0x08008b14
 8007ae0:	08008b1e 	.word	0x08008b1e
 8007ae4:	08003fc1 	.word	0x08003fc1
 8007ae8:	08007839 	.word	0x08007839
 8007aec:	08008b1a 	.word	0x08008b1a

08007af0 <nan>:
 8007af0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007af8 <nan+0x8>
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	00000000 	.word	0x00000000
 8007afc:	7ff80000 	.word	0x7ff80000

08007b00 <_sbrk_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d06      	ldr	r5, [pc, #24]	; (8007b1c <_sbrk_r+0x1c>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	602b      	str	r3, [r5, #0]
 8007b0c:	f7f9 feee 	bl	80018ec <_sbrk>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_sbrk_r+0x1a>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_sbrk_r+0x1a>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	200002e0 	.word	0x200002e0

08007b20 <strncmp>:
 8007b20:	b510      	push	{r4, lr}
 8007b22:	b16a      	cbz	r2, 8007b40 <strncmp+0x20>
 8007b24:	3901      	subs	r1, #1
 8007b26:	1884      	adds	r4, r0, r2
 8007b28:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007b2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d103      	bne.n	8007b3c <strncmp+0x1c>
 8007b34:	42a0      	cmp	r0, r4
 8007b36:	d001      	beq.n	8007b3c <strncmp+0x1c>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1f5      	bne.n	8007b28 <strncmp+0x8>
 8007b3c:	1a98      	subs	r0, r3, r2
 8007b3e:	bd10      	pop	{r4, pc}
 8007b40:	4610      	mov	r0, r2
 8007b42:	e7fc      	b.n	8007b3e <strncmp+0x1e>

08007b44 <__ascii_wctomb>:
 8007b44:	b149      	cbz	r1, 8007b5a <__ascii_wctomb+0x16>
 8007b46:	2aff      	cmp	r2, #255	; 0xff
 8007b48:	bf85      	ittet	hi
 8007b4a:	238a      	movhi	r3, #138	; 0x8a
 8007b4c:	6003      	strhi	r3, [r0, #0]
 8007b4e:	700a      	strbls	r2, [r1, #0]
 8007b50:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b54:	bf98      	it	ls
 8007b56:	2001      	movls	r0, #1
 8007b58:	4770      	bx	lr
 8007b5a:	4608      	mov	r0, r1
 8007b5c:	4770      	bx	lr
	...

08007b60 <__assert_func>:
 8007b60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b62:	4614      	mov	r4, r2
 8007b64:	461a      	mov	r2, r3
 8007b66:	4b09      	ldr	r3, [pc, #36]	; (8007b8c <__assert_func+0x2c>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4605      	mov	r5, r0
 8007b6c:	68d8      	ldr	r0, [r3, #12]
 8007b6e:	b14c      	cbz	r4, 8007b84 <__assert_func+0x24>
 8007b70:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <__assert_func+0x30>)
 8007b72:	9100      	str	r1, [sp, #0]
 8007b74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b78:	4906      	ldr	r1, [pc, #24]	; (8007b94 <__assert_func+0x34>)
 8007b7a:	462b      	mov	r3, r5
 8007b7c:	f000 f80e 	bl	8007b9c <fiprintf>
 8007b80:	f000 fa84 	bl	800808c <abort>
 8007b84:	4b04      	ldr	r3, [pc, #16]	; (8007b98 <__assert_func+0x38>)
 8007b86:	461c      	mov	r4, r3
 8007b88:	e7f3      	b.n	8007b72 <__assert_func+0x12>
 8007b8a:	bf00      	nop
 8007b8c:	2000000c 	.word	0x2000000c
 8007b90:	08008b25 	.word	0x08008b25
 8007b94:	08008b32 	.word	0x08008b32
 8007b98:	08008b60 	.word	0x08008b60

08007b9c <fiprintf>:
 8007b9c:	b40e      	push	{r1, r2, r3}
 8007b9e:	b503      	push	{r0, r1, lr}
 8007ba0:	4601      	mov	r1, r0
 8007ba2:	ab03      	add	r3, sp, #12
 8007ba4:	4805      	ldr	r0, [pc, #20]	; (8007bbc <fiprintf+0x20>)
 8007ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007baa:	6800      	ldr	r0, [r0, #0]
 8007bac:	9301      	str	r3, [sp, #4]
 8007bae:	f000 f87d 	bl	8007cac <_vfiprintf_r>
 8007bb2:	b002      	add	sp, #8
 8007bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bb8:	b003      	add	sp, #12
 8007bba:	4770      	bx	lr
 8007bbc:	2000000c 	.word	0x2000000c

08007bc0 <memmove>:
 8007bc0:	4288      	cmp	r0, r1
 8007bc2:	b510      	push	{r4, lr}
 8007bc4:	eb01 0402 	add.w	r4, r1, r2
 8007bc8:	d902      	bls.n	8007bd0 <memmove+0x10>
 8007bca:	4284      	cmp	r4, r0
 8007bcc:	4623      	mov	r3, r4
 8007bce:	d807      	bhi.n	8007be0 <memmove+0x20>
 8007bd0:	1e43      	subs	r3, r0, #1
 8007bd2:	42a1      	cmp	r1, r4
 8007bd4:	d008      	beq.n	8007be8 <memmove+0x28>
 8007bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bde:	e7f8      	b.n	8007bd2 <memmove+0x12>
 8007be0:	4402      	add	r2, r0
 8007be2:	4601      	mov	r1, r0
 8007be4:	428a      	cmp	r2, r1
 8007be6:	d100      	bne.n	8007bea <memmove+0x2a>
 8007be8:	bd10      	pop	{r4, pc}
 8007bea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bf2:	e7f7      	b.n	8007be4 <memmove+0x24>

08007bf4 <__malloc_lock>:
 8007bf4:	4801      	ldr	r0, [pc, #4]	; (8007bfc <__malloc_lock+0x8>)
 8007bf6:	f000 bc09 	b.w	800840c <__retarget_lock_acquire_recursive>
 8007bfa:	bf00      	nop
 8007bfc:	200002e8 	.word	0x200002e8

08007c00 <__malloc_unlock>:
 8007c00:	4801      	ldr	r0, [pc, #4]	; (8007c08 <__malloc_unlock+0x8>)
 8007c02:	f000 bc04 	b.w	800840e <__retarget_lock_release_recursive>
 8007c06:	bf00      	nop
 8007c08:	200002e8 	.word	0x200002e8

08007c0c <_realloc_r>:
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0e:	4607      	mov	r7, r0
 8007c10:	4614      	mov	r4, r2
 8007c12:	460e      	mov	r6, r1
 8007c14:	b921      	cbnz	r1, 8007c20 <_realloc_r+0x14>
 8007c16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	f7ff bdb2 	b.w	8007784 <_malloc_r>
 8007c20:	b922      	cbnz	r2, 8007c2c <_realloc_r+0x20>
 8007c22:	f7ff fd5f 	bl	80076e4 <_free_r>
 8007c26:	4625      	mov	r5, r4
 8007c28:	4628      	mov	r0, r5
 8007c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c2c:	f000 fc54 	bl	80084d8 <_malloc_usable_size_r>
 8007c30:	42a0      	cmp	r0, r4
 8007c32:	d20f      	bcs.n	8007c54 <_realloc_r+0x48>
 8007c34:	4621      	mov	r1, r4
 8007c36:	4638      	mov	r0, r7
 8007c38:	f7ff fda4 	bl	8007784 <_malloc_r>
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d0f2      	beq.n	8007c28 <_realloc_r+0x1c>
 8007c42:	4631      	mov	r1, r6
 8007c44:	4622      	mov	r2, r4
 8007c46:	f7ff f875 	bl	8006d34 <memcpy>
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	f7ff fd49 	bl	80076e4 <_free_r>
 8007c52:	e7e9      	b.n	8007c28 <_realloc_r+0x1c>
 8007c54:	4635      	mov	r5, r6
 8007c56:	e7e7      	b.n	8007c28 <_realloc_r+0x1c>

08007c58 <__sfputc_r>:
 8007c58:	6893      	ldr	r3, [r2, #8]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	b410      	push	{r4}
 8007c60:	6093      	str	r3, [r2, #8]
 8007c62:	da08      	bge.n	8007c76 <__sfputc_r+0x1e>
 8007c64:	6994      	ldr	r4, [r2, #24]
 8007c66:	42a3      	cmp	r3, r4
 8007c68:	db01      	blt.n	8007c6e <__sfputc_r+0x16>
 8007c6a:	290a      	cmp	r1, #10
 8007c6c:	d103      	bne.n	8007c76 <__sfputc_r+0x1e>
 8007c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c72:	f000 b94b 	b.w	8007f0c <__swbuf_r>
 8007c76:	6813      	ldr	r3, [r2, #0]
 8007c78:	1c58      	adds	r0, r3, #1
 8007c7a:	6010      	str	r0, [r2, #0]
 8007c7c:	7019      	strb	r1, [r3, #0]
 8007c7e:	4608      	mov	r0, r1
 8007c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <__sfputs_r>:
 8007c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c88:	4606      	mov	r6, r0
 8007c8a:	460f      	mov	r7, r1
 8007c8c:	4614      	mov	r4, r2
 8007c8e:	18d5      	adds	r5, r2, r3
 8007c90:	42ac      	cmp	r4, r5
 8007c92:	d101      	bne.n	8007c98 <__sfputs_r+0x12>
 8007c94:	2000      	movs	r0, #0
 8007c96:	e007      	b.n	8007ca8 <__sfputs_r+0x22>
 8007c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c9c:	463a      	mov	r2, r7
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	f7ff ffda 	bl	8007c58 <__sfputc_r>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d1f3      	bne.n	8007c90 <__sfputs_r+0xa>
 8007ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cac <_vfiprintf_r>:
 8007cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb0:	460d      	mov	r5, r1
 8007cb2:	b09d      	sub	sp, #116	; 0x74
 8007cb4:	4614      	mov	r4, r2
 8007cb6:	4698      	mov	r8, r3
 8007cb8:	4606      	mov	r6, r0
 8007cba:	b118      	cbz	r0, 8007cc4 <_vfiprintf_r+0x18>
 8007cbc:	6983      	ldr	r3, [r0, #24]
 8007cbe:	b90b      	cbnz	r3, 8007cc4 <_vfiprintf_r+0x18>
 8007cc0:	f000 fb06 	bl	80082d0 <__sinit>
 8007cc4:	4b89      	ldr	r3, [pc, #548]	; (8007eec <_vfiprintf_r+0x240>)
 8007cc6:	429d      	cmp	r5, r3
 8007cc8:	d11b      	bne.n	8007d02 <_vfiprintf_r+0x56>
 8007cca:	6875      	ldr	r5, [r6, #4]
 8007ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cce:	07d9      	lsls	r1, r3, #31
 8007cd0:	d405      	bmi.n	8007cde <_vfiprintf_r+0x32>
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	059a      	lsls	r2, r3, #22
 8007cd6:	d402      	bmi.n	8007cde <_vfiprintf_r+0x32>
 8007cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cda:	f000 fb97 	bl	800840c <__retarget_lock_acquire_recursive>
 8007cde:	89ab      	ldrh	r3, [r5, #12]
 8007ce0:	071b      	lsls	r3, r3, #28
 8007ce2:	d501      	bpl.n	8007ce8 <_vfiprintf_r+0x3c>
 8007ce4:	692b      	ldr	r3, [r5, #16]
 8007ce6:	b9eb      	cbnz	r3, 8007d24 <_vfiprintf_r+0x78>
 8007ce8:	4629      	mov	r1, r5
 8007cea:	4630      	mov	r0, r6
 8007cec:	f000 f960 	bl	8007fb0 <__swsetup_r>
 8007cf0:	b1c0      	cbz	r0, 8007d24 <_vfiprintf_r+0x78>
 8007cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cf4:	07dc      	lsls	r4, r3, #31
 8007cf6:	d50e      	bpl.n	8007d16 <_vfiprintf_r+0x6a>
 8007cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfc:	b01d      	add	sp, #116	; 0x74
 8007cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d02:	4b7b      	ldr	r3, [pc, #492]	; (8007ef0 <_vfiprintf_r+0x244>)
 8007d04:	429d      	cmp	r5, r3
 8007d06:	d101      	bne.n	8007d0c <_vfiprintf_r+0x60>
 8007d08:	68b5      	ldr	r5, [r6, #8]
 8007d0a:	e7df      	b.n	8007ccc <_vfiprintf_r+0x20>
 8007d0c:	4b79      	ldr	r3, [pc, #484]	; (8007ef4 <_vfiprintf_r+0x248>)
 8007d0e:	429d      	cmp	r5, r3
 8007d10:	bf08      	it	eq
 8007d12:	68f5      	ldreq	r5, [r6, #12]
 8007d14:	e7da      	b.n	8007ccc <_vfiprintf_r+0x20>
 8007d16:	89ab      	ldrh	r3, [r5, #12]
 8007d18:	0598      	lsls	r0, r3, #22
 8007d1a:	d4ed      	bmi.n	8007cf8 <_vfiprintf_r+0x4c>
 8007d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d1e:	f000 fb76 	bl	800840e <__retarget_lock_release_recursive>
 8007d22:	e7e9      	b.n	8007cf8 <_vfiprintf_r+0x4c>
 8007d24:	2300      	movs	r3, #0
 8007d26:	9309      	str	r3, [sp, #36]	; 0x24
 8007d28:	2320      	movs	r3, #32
 8007d2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d32:	2330      	movs	r3, #48	; 0x30
 8007d34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ef8 <_vfiprintf_r+0x24c>
 8007d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d3c:	f04f 0901 	mov.w	r9, #1
 8007d40:	4623      	mov	r3, r4
 8007d42:	469a      	mov	sl, r3
 8007d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d48:	b10a      	cbz	r2, 8007d4e <_vfiprintf_r+0xa2>
 8007d4a:	2a25      	cmp	r2, #37	; 0x25
 8007d4c:	d1f9      	bne.n	8007d42 <_vfiprintf_r+0x96>
 8007d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d52:	d00b      	beq.n	8007d6c <_vfiprintf_r+0xc0>
 8007d54:	465b      	mov	r3, fp
 8007d56:	4622      	mov	r2, r4
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f7ff ff93 	bl	8007c86 <__sfputs_r>
 8007d60:	3001      	adds	r0, #1
 8007d62:	f000 80aa 	beq.w	8007eba <_vfiprintf_r+0x20e>
 8007d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d68:	445a      	add	r2, fp
 8007d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 80a2 	beq.w	8007eba <_vfiprintf_r+0x20e>
 8007d76:	2300      	movs	r3, #0
 8007d78:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d80:	f10a 0a01 	add.w	sl, sl, #1
 8007d84:	9304      	str	r3, [sp, #16]
 8007d86:	9307      	str	r3, [sp, #28]
 8007d88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d8c:	931a      	str	r3, [sp, #104]	; 0x68
 8007d8e:	4654      	mov	r4, sl
 8007d90:	2205      	movs	r2, #5
 8007d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d96:	4858      	ldr	r0, [pc, #352]	; (8007ef8 <_vfiprintf_r+0x24c>)
 8007d98:	f7f8 fa2a 	bl	80001f0 <memchr>
 8007d9c:	9a04      	ldr	r2, [sp, #16]
 8007d9e:	b9d8      	cbnz	r0, 8007dd8 <_vfiprintf_r+0x12c>
 8007da0:	06d1      	lsls	r1, r2, #27
 8007da2:	bf44      	itt	mi
 8007da4:	2320      	movmi	r3, #32
 8007da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007daa:	0713      	lsls	r3, r2, #28
 8007dac:	bf44      	itt	mi
 8007dae:	232b      	movmi	r3, #43	; 0x2b
 8007db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007db4:	f89a 3000 	ldrb.w	r3, [sl]
 8007db8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dba:	d015      	beq.n	8007de8 <_vfiprintf_r+0x13c>
 8007dbc:	9a07      	ldr	r2, [sp, #28]
 8007dbe:	4654      	mov	r4, sl
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	f04f 0c0a 	mov.w	ip, #10
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dcc:	3b30      	subs	r3, #48	; 0x30
 8007dce:	2b09      	cmp	r3, #9
 8007dd0:	d94e      	bls.n	8007e70 <_vfiprintf_r+0x1c4>
 8007dd2:	b1b0      	cbz	r0, 8007e02 <_vfiprintf_r+0x156>
 8007dd4:	9207      	str	r2, [sp, #28]
 8007dd6:	e014      	b.n	8007e02 <_vfiprintf_r+0x156>
 8007dd8:	eba0 0308 	sub.w	r3, r0, r8
 8007ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8007de0:	4313      	orrs	r3, r2
 8007de2:	9304      	str	r3, [sp, #16]
 8007de4:	46a2      	mov	sl, r4
 8007de6:	e7d2      	b.n	8007d8e <_vfiprintf_r+0xe2>
 8007de8:	9b03      	ldr	r3, [sp, #12]
 8007dea:	1d19      	adds	r1, r3, #4
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	9103      	str	r1, [sp, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	bfbb      	ittet	lt
 8007df4:	425b      	neglt	r3, r3
 8007df6:	f042 0202 	orrlt.w	r2, r2, #2
 8007dfa:	9307      	strge	r3, [sp, #28]
 8007dfc:	9307      	strlt	r3, [sp, #28]
 8007dfe:	bfb8      	it	lt
 8007e00:	9204      	strlt	r2, [sp, #16]
 8007e02:	7823      	ldrb	r3, [r4, #0]
 8007e04:	2b2e      	cmp	r3, #46	; 0x2e
 8007e06:	d10c      	bne.n	8007e22 <_vfiprintf_r+0x176>
 8007e08:	7863      	ldrb	r3, [r4, #1]
 8007e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e0c:	d135      	bne.n	8007e7a <_vfiprintf_r+0x1ce>
 8007e0e:	9b03      	ldr	r3, [sp, #12]
 8007e10:	1d1a      	adds	r2, r3, #4
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	9203      	str	r2, [sp, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	bfb8      	it	lt
 8007e1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e1e:	3402      	adds	r4, #2
 8007e20:	9305      	str	r3, [sp, #20]
 8007e22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f08 <_vfiprintf_r+0x25c>
 8007e26:	7821      	ldrb	r1, [r4, #0]
 8007e28:	2203      	movs	r2, #3
 8007e2a:	4650      	mov	r0, sl
 8007e2c:	f7f8 f9e0 	bl	80001f0 <memchr>
 8007e30:	b140      	cbz	r0, 8007e44 <_vfiprintf_r+0x198>
 8007e32:	2340      	movs	r3, #64	; 0x40
 8007e34:	eba0 000a 	sub.w	r0, r0, sl
 8007e38:	fa03 f000 	lsl.w	r0, r3, r0
 8007e3c:	9b04      	ldr	r3, [sp, #16]
 8007e3e:	4303      	orrs	r3, r0
 8007e40:	3401      	adds	r4, #1
 8007e42:	9304      	str	r3, [sp, #16]
 8007e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e48:	482c      	ldr	r0, [pc, #176]	; (8007efc <_vfiprintf_r+0x250>)
 8007e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e4e:	2206      	movs	r2, #6
 8007e50:	f7f8 f9ce 	bl	80001f0 <memchr>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d03f      	beq.n	8007ed8 <_vfiprintf_r+0x22c>
 8007e58:	4b29      	ldr	r3, [pc, #164]	; (8007f00 <_vfiprintf_r+0x254>)
 8007e5a:	bb1b      	cbnz	r3, 8007ea4 <_vfiprintf_r+0x1f8>
 8007e5c:	9b03      	ldr	r3, [sp, #12]
 8007e5e:	3307      	adds	r3, #7
 8007e60:	f023 0307 	bic.w	r3, r3, #7
 8007e64:	3308      	adds	r3, #8
 8007e66:	9303      	str	r3, [sp, #12]
 8007e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e6a:	443b      	add	r3, r7
 8007e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e6e:	e767      	b.n	8007d40 <_vfiprintf_r+0x94>
 8007e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e74:	460c      	mov	r4, r1
 8007e76:	2001      	movs	r0, #1
 8007e78:	e7a5      	b.n	8007dc6 <_vfiprintf_r+0x11a>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	3401      	adds	r4, #1
 8007e7e:	9305      	str	r3, [sp, #20]
 8007e80:	4619      	mov	r1, r3
 8007e82:	f04f 0c0a 	mov.w	ip, #10
 8007e86:	4620      	mov	r0, r4
 8007e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e8c:	3a30      	subs	r2, #48	; 0x30
 8007e8e:	2a09      	cmp	r2, #9
 8007e90:	d903      	bls.n	8007e9a <_vfiprintf_r+0x1ee>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d0c5      	beq.n	8007e22 <_vfiprintf_r+0x176>
 8007e96:	9105      	str	r1, [sp, #20]
 8007e98:	e7c3      	b.n	8007e22 <_vfiprintf_r+0x176>
 8007e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e7f0      	b.n	8007e86 <_vfiprintf_r+0x1da>
 8007ea4:	ab03      	add	r3, sp, #12
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	462a      	mov	r2, r5
 8007eaa:	4b16      	ldr	r3, [pc, #88]	; (8007f04 <_vfiprintf_r+0x258>)
 8007eac:	a904      	add	r1, sp, #16
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f7fc f886 	bl	8003fc0 <_printf_float>
 8007eb4:	4607      	mov	r7, r0
 8007eb6:	1c78      	adds	r0, r7, #1
 8007eb8:	d1d6      	bne.n	8007e68 <_vfiprintf_r+0x1bc>
 8007eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ebc:	07d9      	lsls	r1, r3, #31
 8007ebe:	d405      	bmi.n	8007ecc <_vfiprintf_r+0x220>
 8007ec0:	89ab      	ldrh	r3, [r5, #12]
 8007ec2:	059a      	lsls	r2, r3, #22
 8007ec4:	d402      	bmi.n	8007ecc <_vfiprintf_r+0x220>
 8007ec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ec8:	f000 faa1 	bl	800840e <__retarget_lock_release_recursive>
 8007ecc:	89ab      	ldrh	r3, [r5, #12]
 8007ece:	065b      	lsls	r3, r3, #25
 8007ed0:	f53f af12 	bmi.w	8007cf8 <_vfiprintf_r+0x4c>
 8007ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ed6:	e711      	b.n	8007cfc <_vfiprintf_r+0x50>
 8007ed8:	ab03      	add	r3, sp, #12
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	462a      	mov	r2, r5
 8007ede:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <_vfiprintf_r+0x258>)
 8007ee0:	a904      	add	r1, sp, #16
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f7fc fb10 	bl	8004508 <_printf_i>
 8007ee8:	e7e4      	b.n	8007eb4 <_vfiprintf_r+0x208>
 8007eea:	bf00      	nop
 8007eec:	08008b84 	.word	0x08008b84
 8007ef0:	08008ba4 	.word	0x08008ba4
 8007ef4:	08008b64 	.word	0x08008b64
 8007ef8:	08008b14 	.word	0x08008b14
 8007efc:	08008b1e 	.word	0x08008b1e
 8007f00:	08003fc1 	.word	0x08003fc1
 8007f04:	08007c87 	.word	0x08007c87
 8007f08:	08008b1a 	.word	0x08008b1a

08007f0c <__swbuf_r>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	460e      	mov	r6, r1
 8007f10:	4614      	mov	r4, r2
 8007f12:	4605      	mov	r5, r0
 8007f14:	b118      	cbz	r0, 8007f1e <__swbuf_r+0x12>
 8007f16:	6983      	ldr	r3, [r0, #24]
 8007f18:	b90b      	cbnz	r3, 8007f1e <__swbuf_r+0x12>
 8007f1a:	f000 f9d9 	bl	80082d0 <__sinit>
 8007f1e:	4b21      	ldr	r3, [pc, #132]	; (8007fa4 <__swbuf_r+0x98>)
 8007f20:	429c      	cmp	r4, r3
 8007f22:	d12b      	bne.n	8007f7c <__swbuf_r+0x70>
 8007f24:	686c      	ldr	r4, [r5, #4]
 8007f26:	69a3      	ldr	r3, [r4, #24]
 8007f28:	60a3      	str	r3, [r4, #8]
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	071a      	lsls	r2, r3, #28
 8007f2e:	d52f      	bpl.n	8007f90 <__swbuf_r+0x84>
 8007f30:	6923      	ldr	r3, [r4, #16]
 8007f32:	b36b      	cbz	r3, 8007f90 <__swbuf_r+0x84>
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	6820      	ldr	r0, [r4, #0]
 8007f38:	1ac0      	subs	r0, r0, r3
 8007f3a:	6963      	ldr	r3, [r4, #20]
 8007f3c:	b2f6      	uxtb	r6, r6
 8007f3e:	4283      	cmp	r3, r0
 8007f40:	4637      	mov	r7, r6
 8007f42:	dc04      	bgt.n	8007f4e <__swbuf_r+0x42>
 8007f44:	4621      	mov	r1, r4
 8007f46:	4628      	mov	r0, r5
 8007f48:	f000 f92e 	bl	80081a8 <_fflush_r>
 8007f4c:	bb30      	cbnz	r0, 8007f9c <__swbuf_r+0x90>
 8007f4e:	68a3      	ldr	r3, [r4, #8]
 8007f50:	3b01      	subs	r3, #1
 8007f52:	60a3      	str	r3, [r4, #8]
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	6022      	str	r2, [r4, #0]
 8007f5a:	701e      	strb	r6, [r3, #0]
 8007f5c:	6963      	ldr	r3, [r4, #20]
 8007f5e:	3001      	adds	r0, #1
 8007f60:	4283      	cmp	r3, r0
 8007f62:	d004      	beq.n	8007f6e <__swbuf_r+0x62>
 8007f64:	89a3      	ldrh	r3, [r4, #12]
 8007f66:	07db      	lsls	r3, r3, #31
 8007f68:	d506      	bpl.n	8007f78 <__swbuf_r+0x6c>
 8007f6a:	2e0a      	cmp	r6, #10
 8007f6c:	d104      	bne.n	8007f78 <__swbuf_r+0x6c>
 8007f6e:	4621      	mov	r1, r4
 8007f70:	4628      	mov	r0, r5
 8007f72:	f000 f919 	bl	80081a8 <_fflush_r>
 8007f76:	b988      	cbnz	r0, 8007f9c <__swbuf_r+0x90>
 8007f78:	4638      	mov	r0, r7
 8007f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f7c:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <__swbuf_r+0x9c>)
 8007f7e:	429c      	cmp	r4, r3
 8007f80:	d101      	bne.n	8007f86 <__swbuf_r+0x7a>
 8007f82:	68ac      	ldr	r4, [r5, #8]
 8007f84:	e7cf      	b.n	8007f26 <__swbuf_r+0x1a>
 8007f86:	4b09      	ldr	r3, [pc, #36]	; (8007fac <__swbuf_r+0xa0>)
 8007f88:	429c      	cmp	r4, r3
 8007f8a:	bf08      	it	eq
 8007f8c:	68ec      	ldreq	r4, [r5, #12]
 8007f8e:	e7ca      	b.n	8007f26 <__swbuf_r+0x1a>
 8007f90:	4621      	mov	r1, r4
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 f80c 	bl	8007fb0 <__swsetup_r>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d0cb      	beq.n	8007f34 <__swbuf_r+0x28>
 8007f9c:	f04f 37ff 	mov.w	r7, #4294967295
 8007fa0:	e7ea      	b.n	8007f78 <__swbuf_r+0x6c>
 8007fa2:	bf00      	nop
 8007fa4:	08008b84 	.word	0x08008b84
 8007fa8:	08008ba4 	.word	0x08008ba4
 8007fac:	08008b64 	.word	0x08008b64

08007fb0 <__swsetup_r>:
 8007fb0:	4b32      	ldr	r3, [pc, #200]	; (800807c <__swsetup_r+0xcc>)
 8007fb2:	b570      	push	{r4, r5, r6, lr}
 8007fb4:	681d      	ldr	r5, [r3, #0]
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	460c      	mov	r4, r1
 8007fba:	b125      	cbz	r5, 8007fc6 <__swsetup_r+0x16>
 8007fbc:	69ab      	ldr	r3, [r5, #24]
 8007fbe:	b913      	cbnz	r3, 8007fc6 <__swsetup_r+0x16>
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f000 f985 	bl	80082d0 <__sinit>
 8007fc6:	4b2e      	ldr	r3, [pc, #184]	; (8008080 <__swsetup_r+0xd0>)
 8007fc8:	429c      	cmp	r4, r3
 8007fca:	d10f      	bne.n	8007fec <__swsetup_r+0x3c>
 8007fcc:	686c      	ldr	r4, [r5, #4]
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fd4:	0719      	lsls	r1, r3, #28
 8007fd6:	d42c      	bmi.n	8008032 <__swsetup_r+0x82>
 8007fd8:	06dd      	lsls	r5, r3, #27
 8007fda:	d411      	bmi.n	8008000 <__swsetup_r+0x50>
 8007fdc:	2309      	movs	r3, #9
 8007fde:	6033      	str	r3, [r6, #0]
 8007fe0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fe4:	81a3      	strh	r3, [r4, #12]
 8007fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fea:	e03e      	b.n	800806a <__swsetup_r+0xba>
 8007fec:	4b25      	ldr	r3, [pc, #148]	; (8008084 <__swsetup_r+0xd4>)
 8007fee:	429c      	cmp	r4, r3
 8007ff0:	d101      	bne.n	8007ff6 <__swsetup_r+0x46>
 8007ff2:	68ac      	ldr	r4, [r5, #8]
 8007ff4:	e7eb      	b.n	8007fce <__swsetup_r+0x1e>
 8007ff6:	4b24      	ldr	r3, [pc, #144]	; (8008088 <__swsetup_r+0xd8>)
 8007ff8:	429c      	cmp	r4, r3
 8007ffa:	bf08      	it	eq
 8007ffc:	68ec      	ldreq	r4, [r5, #12]
 8007ffe:	e7e6      	b.n	8007fce <__swsetup_r+0x1e>
 8008000:	0758      	lsls	r0, r3, #29
 8008002:	d512      	bpl.n	800802a <__swsetup_r+0x7a>
 8008004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008006:	b141      	cbz	r1, 800801a <__swsetup_r+0x6a>
 8008008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800800c:	4299      	cmp	r1, r3
 800800e:	d002      	beq.n	8008016 <__swsetup_r+0x66>
 8008010:	4630      	mov	r0, r6
 8008012:	f7ff fb67 	bl	80076e4 <_free_r>
 8008016:	2300      	movs	r3, #0
 8008018:	6363      	str	r3, [r4, #52]	; 0x34
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008020:	81a3      	strh	r3, [r4, #12]
 8008022:	2300      	movs	r3, #0
 8008024:	6063      	str	r3, [r4, #4]
 8008026:	6923      	ldr	r3, [r4, #16]
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	f043 0308 	orr.w	r3, r3, #8
 8008030:	81a3      	strh	r3, [r4, #12]
 8008032:	6923      	ldr	r3, [r4, #16]
 8008034:	b94b      	cbnz	r3, 800804a <__swsetup_r+0x9a>
 8008036:	89a3      	ldrh	r3, [r4, #12]
 8008038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800803c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008040:	d003      	beq.n	800804a <__swsetup_r+0x9a>
 8008042:	4621      	mov	r1, r4
 8008044:	4630      	mov	r0, r6
 8008046:	f000 fa07 	bl	8008458 <__smakebuf_r>
 800804a:	89a0      	ldrh	r0, [r4, #12]
 800804c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008050:	f010 0301 	ands.w	r3, r0, #1
 8008054:	d00a      	beq.n	800806c <__swsetup_r+0xbc>
 8008056:	2300      	movs	r3, #0
 8008058:	60a3      	str	r3, [r4, #8]
 800805a:	6963      	ldr	r3, [r4, #20]
 800805c:	425b      	negs	r3, r3
 800805e:	61a3      	str	r3, [r4, #24]
 8008060:	6923      	ldr	r3, [r4, #16]
 8008062:	b943      	cbnz	r3, 8008076 <__swsetup_r+0xc6>
 8008064:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008068:	d1ba      	bne.n	8007fe0 <__swsetup_r+0x30>
 800806a:	bd70      	pop	{r4, r5, r6, pc}
 800806c:	0781      	lsls	r1, r0, #30
 800806e:	bf58      	it	pl
 8008070:	6963      	ldrpl	r3, [r4, #20]
 8008072:	60a3      	str	r3, [r4, #8]
 8008074:	e7f4      	b.n	8008060 <__swsetup_r+0xb0>
 8008076:	2000      	movs	r0, #0
 8008078:	e7f7      	b.n	800806a <__swsetup_r+0xba>
 800807a:	bf00      	nop
 800807c:	2000000c 	.word	0x2000000c
 8008080:	08008b84 	.word	0x08008b84
 8008084:	08008ba4 	.word	0x08008ba4
 8008088:	08008b64 	.word	0x08008b64

0800808c <abort>:
 800808c:	b508      	push	{r3, lr}
 800808e:	2006      	movs	r0, #6
 8008090:	f000 fa52 	bl	8008538 <raise>
 8008094:	2001      	movs	r0, #1
 8008096:	f7f9 fbb1 	bl	80017fc <_exit>
	...

0800809c <__sflush_r>:
 800809c:	898a      	ldrh	r2, [r1, #12]
 800809e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a2:	4605      	mov	r5, r0
 80080a4:	0710      	lsls	r0, r2, #28
 80080a6:	460c      	mov	r4, r1
 80080a8:	d458      	bmi.n	800815c <__sflush_r+0xc0>
 80080aa:	684b      	ldr	r3, [r1, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	dc05      	bgt.n	80080bc <__sflush_r+0x20>
 80080b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	dc02      	bgt.n	80080bc <__sflush_r+0x20>
 80080b6:	2000      	movs	r0, #0
 80080b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080be:	2e00      	cmp	r6, #0
 80080c0:	d0f9      	beq.n	80080b6 <__sflush_r+0x1a>
 80080c2:	2300      	movs	r3, #0
 80080c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080c8:	682f      	ldr	r7, [r5, #0]
 80080ca:	602b      	str	r3, [r5, #0]
 80080cc:	d032      	beq.n	8008134 <__sflush_r+0x98>
 80080ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	075a      	lsls	r2, r3, #29
 80080d4:	d505      	bpl.n	80080e2 <__sflush_r+0x46>
 80080d6:	6863      	ldr	r3, [r4, #4]
 80080d8:	1ac0      	subs	r0, r0, r3
 80080da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080dc:	b10b      	cbz	r3, 80080e2 <__sflush_r+0x46>
 80080de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080e0:	1ac0      	subs	r0, r0, r3
 80080e2:	2300      	movs	r3, #0
 80080e4:	4602      	mov	r2, r0
 80080e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080e8:	6a21      	ldr	r1, [r4, #32]
 80080ea:	4628      	mov	r0, r5
 80080ec:	47b0      	blx	r6
 80080ee:	1c43      	adds	r3, r0, #1
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	d106      	bne.n	8008102 <__sflush_r+0x66>
 80080f4:	6829      	ldr	r1, [r5, #0]
 80080f6:	291d      	cmp	r1, #29
 80080f8:	d82c      	bhi.n	8008154 <__sflush_r+0xb8>
 80080fa:	4a2a      	ldr	r2, [pc, #168]	; (80081a4 <__sflush_r+0x108>)
 80080fc:	40ca      	lsrs	r2, r1
 80080fe:	07d6      	lsls	r6, r2, #31
 8008100:	d528      	bpl.n	8008154 <__sflush_r+0xb8>
 8008102:	2200      	movs	r2, #0
 8008104:	6062      	str	r2, [r4, #4]
 8008106:	04d9      	lsls	r1, r3, #19
 8008108:	6922      	ldr	r2, [r4, #16]
 800810a:	6022      	str	r2, [r4, #0]
 800810c:	d504      	bpl.n	8008118 <__sflush_r+0x7c>
 800810e:	1c42      	adds	r2, r0, #1
 8008110:	d101      	bne.n	8008116 <__sflush_r+0x7a>
 8008112:	682b      	ldr	r3, [r5, #0]
 8008114:	b903      	cbnz	r3, 8008118 <__sflush_r+0x7c>
 8008116:	6560      	str	r0, [r4, #84]	; 0x54
 8008118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800811a:	602f      	str	r7, [r5, #0]
 800811c:	2900      	cmp	r1, #0
 800811e:	d0ca      	beq.n	80080b6 <__sflush_r+0x1a>
 8008120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008124:	4299      	cmp	r1, r3
 8008126:	d002      	beq.n	800812e <__sflush_r+0x92>
 8008128:	4628      	mov	r0, r5
 800812a:	f7ff fadb 	bl	80076e4 <_free_r>
 800812e:	2000      	movs	r0, #0
 8008130:	6360      	str	r0, [r4, #52]	; 0x34
 8008132:	e7c1      	b.n	80080b8 <__sflush_r+0x1c>
 8008134:	6a21      	ldr	r1, [r4, #32]
 8008136:	2301      	movs	r3, #1
 8008138:	4628      	mov	r0, r5
 800813a:	47b0      	blx	r6
 800813c:	1c41      	adds	r1, r0, #1
 800813e:	d1c7      	bne.n	80080d0 <__sflush_r+0x34>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0c4      	beq.n	80080d0 <__sflush_r+0x34>
 8008146:	2b1d      	cmp	r3, #29
 8008148:	d001      	beq.n	800814e <__sflush_r+0xb2>
 800814a:	2b16      	cmp	r3, #22
 800814c:	d101      	bne.n	8008152 <__sflush_r+0xb6>
 800814e:	602f      	str	r7, [r5, #0]
 8008150:	e7b1      	b.n	80080b6 <__sflush_r+0x1a>
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008158:	81a3      	strh	r3, [r4, #12]
 800815a:	e7ad      	b.n	80080b8 <__sflush_r+0x1c>
 800815c:	690f      	ldr	r7, [r1, #16]
 800815e:	2f00      	cmp	r7, #0
 8008160:	d0a9      	beq.n	80080b6 <__sflush_r+0x1a>
 8008162:	0793      	lsls	r3, r2, #30
 8008164:	680e      	ldr	r6, [r1, #0]
 8008166:	bf08      	it	eq
 8008168:	694b      	ldreq	r3, [r1, #20]
 800816a:	600f      	str	r7, [r1, #0]
 800816c:	bf18      	it	ne
 800816e:	2300      	movne	r3, #0
 8008170:	eba6 0807 	sub.w	r8, r6, r7
 8008174:	608b      	str	r3, [r1, #8]
 8008176:	f1b8 0f00 	cmp.w	r8, #0
 800817a:	dd9c      	ble.n	80080b6 <__sflush_r+0x1a>
 800817c:	6a21      	ldr	r1, [r4, #32]
 800817e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008180:	4643      	mov	r3, r8
 8008182:	463a      	mov	r2, r7
 8008184:	4628      	mov	r0, r5
 8008186:	47b0      	blx	r6
 8008188:	2800      	cmp	r0, #0
 800818a:	dc06      	bgt.n	800819a <__sflush_r+0xfe>
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008192:	81a3      	strh	r3, [r4, #12]
 8008194:	f04f 30ff 	mov.w	r0, #4294967295
 8008198:	e78e      	b.n	80080b8 <__sflush_r+0x1c>
 800819a:	4407      	add	r7, r0
 800819c:	eba8 0800 	sub.w	r8, r8, r0
 80081a0:	e7e9      	b.n	8008176 <__sflush_r+0xda>
 80081a2:	bf00      	nop
 80081a4:	20400001 	.word	0x20400001

080081a8 <_fflush_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	690b      	ldr	r3, [r1, #16]
 80081ac:	4605      	mov	r5, r0
 80081ae:	460c      	mov	r4, r1
 80081b0:	b913      	cbnz	r3, 80081b8 <_fflush_r+0x10>
 80081b2:	2500      	movs	r5, #0
 80081b4:	4628      	mov	r0, r5
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	b118      	cbz	r0, 80081c2 <_fflush_r+0x1a>
 80081ba:	6983      	ldr	r3, [r0, #24]
 80081bc:	b90b      	cbnz	r3, 80081c2 <_fflush_r+0x1a>
 80081be:	f000 f887 	bl	80082d0 <__sinit>
 80081c2:	4b14      	ldr	r3, [pc, #80]	; (8008214 <_fflush_r+0x6c>)
 80081c4:	429c      	cmp	r4, r3
 80081c6:	d11b      	bne.n	8008200 <_fflush_r+0x58>
 80081c8:	686c      	ldr	r4, [r5, #4]
 80081ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0ef      	beq.n	80081b2 <_fflush_r+0xa>
 80081d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081d4:	07d0      	lsls	r0, r2, #31
 80081d6:	d404      	bmi.n	80081e2 <_fflush_r+0x3a>
 80081d8:	0599      	lsls	r1, r3, #22
 80081da:	d402      	bmi.n	80081e2 <_fflush_r+0x3a>
 80081dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081de:	f000 f915 	bl	800840c <__retarget_lock_acquire_recursive>
 80081e2:	4628      	mov	r0, r5
 80081e4:	4621      	mov	r1, r4
 80081e6:	f7ff ff59 	bl	800809c <__sflush_r>
 80081ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081ec:	07da      	lsls	r2, r3, #31
 80081ee:	4605      	mov	r5, r0
 80081f0:	d4e0      	bmi.n	80081b4 <_fflush_r+0xc>
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	059b      	lsls	r3, r3, #22
 80081f6:	d4dd      	bmi.n	80081b4 <_fflush_r+0xc>
 80081f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081fa:	f000 f908 	bl	800840e <__retarget_lock_release_recursive>
 80081fe:	e7d9      	b.n	80081b4 <_fflush_r+0xc>
 8008200:	4b05      	ldr	r3, [pc, #20]	; (8008218 <_fflush_r+0x70>)
 8008202:	429c      	cmp	r4, r3
 8008204:	d101      	bne.n	800820a <_fflush_r+0x62>
 8008206:	68ac      	ldr	r4, [r5, #8]
 8008208:	e7df      	b.n	80081ca <_fflush_r+0x22>
 800820a:	4b04      	ldr	r3, [pc, #16]	; (800821c <_fflush_r+0x74>)
 800820c:	429c      	cmp	r4, r3
 800820e:	bf08      	it	eq
 8008210:	68ec      	ldreq	r4, [r5, #12]
 8008212:	e7da      	b.n	80081ca <_fflush_r+0x22>
 8008214:	08008b84 	.word	0x08008b84
 8008218:	08008ba4 	.word	0x08008ba4
 800821c:	08008b64 	.word	0x08008b64

08008220 <std>:
 8008220:	2300      	movs	r3, #0
 8008222:	b510      	push	{r4, lr}
 8008224:	4604      	mov	r4, r0
 8008226:	e9c0 3300 	strd	r3, r3, [r0]
 800822a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800822e:	6083      	str	r3, [r0, #8]
 8008230:	8181      	strh	r1, [r0, #12]
 8008232:	6643      	str	r3, [r0, #100]	; 0x64
 8008234:	81c2      	strh	r2, [r0, #14]
 8008236:	6183      	str	r3, [r0, #24]
 8008238:	4619      	mov	r1, r3
 800823a:	2208      	movs	r2, #8
 800823c:	305c      	adds	r0, #92	; 0x5c
 800823e:	f7fb fe17 	bl	8003e70 <memset>
 8008242:	4b05      	ldr	r3, [pc, #20]	; (8008258 <std+0x38>)
 8008244:	6263      	str	r3, [r4, #36]	; 0x24
 8008246:	4b05      	ldr	r3, [pc, #20]	; (800825c <std+0x3c>)
 8008248:	62a3      	str	r3, [r4, #40]	; 0x28
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <std+0x40>)
 800824c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800824e:	4b05      	ldr	r3, [pc, #20]	; (8008264 <std+0x44>)
 8008250:	6224      	str	r4, [r4, #32]
 8008252:	6323      	str	r3, [r4, #48]	; 0x30
 8008254:	bd10      	pop	{r4, pc}
 8008256:	bf00      	nop
 8008258:	08008571 	.word	0x08008571
 800825c:	08008593 	.word	0x08008593
 8008260:	080085cb 	.word	0x080085cb
 8008264:	080085ef 	.word	0x080085ef

08008268 <_cleanup_r>:
 8008268:	4901      	ldr	r1, [pc, #4]	; (8008270 <_cleanup_r+0x8>)
 800826a:	f000 b8af 	b.w	80083cc <_fwalk_reent>
 800826e:	bf00      	nop
 8008270:	080081a9 	.word	0x080081a9

08008274 <__sfmoreglue>:
 8008274:	b570      	push	{r4, r5, r6, lr}
 8008276:	1e4a      	subs	r2, r1, #1
 8008278:	2568      	movs	r5, #104	; 0x68
 800827a:	4355      	muls	r5, r2
 800827c:	460e      	mov	r6, r1
 800827e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008282:	f7ff fa7f 	bl	8007784 <_malloc_r>
 8008286:	4604      	mov	r4, r0
 8008288:	b140      	cbz	r0, 800829c <__sfmoreglue+0x28>
 800828a:	2100      	movs	r1, #0
 800828c:	e9c0 1600 	strd	r1, r6, [r0]
 8008290:	300c      	adds	r0, #12
 8008292:	60a0      	str	r0, [r4, #8]
 8008294:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008298:	f7fb fdea 	bl	8003e70 <memset>
 800829c:	4620      	mov	r0, r4
 800829e:	bd70      	pop	{r4, r5, r6, pc}

080082a0 <__sfp_lock_acquire>:
 80082a0:	4801      	ldr	r0, [pc, #4]	; (80082a8 <__sfp_lock_acquire+0x8>)
 80082a2:	f000 b8b3 	b.w	800840c <__retarget_lock_acquire_recursive>
 80082a6:	bf00      	nop
 80082a8:	200002ec 	.word	0x200002ec

080082ac <__sfp_lock_release>:
 80082ac:	4801      	ldr	r0, [pc, #4]	; (80082b4 <__sfp_lock_release+0x8>)
 80082ae:	f000 b8ae 	b.w	800840e <__retarget_lock_release_recursive>
 80082b2:	bf00      	nop
 80082b4:	200002ec 	.word	0x200002ec

080082b8 <__sinit_lock_acquire>:
 80082b8:	4801      	ldr	r0, [pc, #4]	; (80082c0 <__sinit_lock_acquire+0x8>)
 80082ba:	f000 b8a7 	b.w	800840c <__retarget_lock_acquire_recursive>
 80082be:	bf00      	nop
 80082c0:	200002e7 	.word	0x200002e7

080082c4 <__sinit_lock_release>:
 80082c4:	4801      	ldr	r0, [pc, #4]	; (80082cc <__sinit_lock_release+0x8>)
 80082c6:	f000 b8a2 	b.w	800840e <__retarget_lock_release_recursive>
 80082ca:	bf00      	nop
 80082cc:	200002e7 	.word	0x200002e7

080082d0 <__sinit>:
 80082d0:	b510      	push	{r4, lr}
 80082d2:	4604      	mov	r4, r0
 80082d4:	f7ff fff0 	bl	80082b8 <__sinit_lock_acquire>
 80082d8:	69a3      	ldr	r3, [r4, #24]
 80082da:	b11b      	cbz	r3, 80082e4 <__sinit+0x14>
 80082dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082e0:	f7ff bff0 	b.w	80082c4 <__sinit_lock_release>
 80082e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082e8:	6523      	str	r3, [r4, #80]	; 0x50
 80082ea:	4b13      	ldr	r3, [pc, #76]	; (8008338 <__sinit+0x68>)
 80082ec:	4a13      	ldr	r2, [pc, #76]	; (800833c <__sinit+0x6c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80082f2:	42a3      	cmp	r3, r4
 80082f4:	bf04      	itt	eq
 80082f6:	2301      	moveq	r3, #1
 80082f8:	61a3      	streq	r3, [r4, #24]
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 f820 	bl	8008340 <__sfp>
 8008300:	6060      	str	r0, [r4, #4]
 8008302:	4620      	mov	r0, r4
 8008304:	f000 f81c 	bl	8008340 <__sfp>
 8008308:	60a0      	str	r0, [r4, #8]
 800830a:	4620      	mov	r0, r4
 800830c:	f000 f818 	bl	8008340 <__sfp>
 8008310:	2200      	movs	r2, #0
 8008312:	60e0      	str	r0, [r4, #12]
 8008314:	2104      	movs	r1, #4
 8008316:	6860      	ldr	r0, [r4, #4]
 8008318:	f7ff ff82 	bl	8008220 <std>
 800831c:	68a0      	ldr	r0, [r4, #8]
 800831e:	2201      	movs	r2, #1
 8008320:	2109      	movs	r1, #9
 8008322:	f7ff ff7d 	bl	8008220 <std>
 8008326:	68e0      	ldr	r0, [r4, #12]
 8008328:	2202      	movs	r2, #2
 800832a:	2112      	movs	r1, #18
 800832c:	f7ff ff78 	bl	8008220 <std>
 8008330:	2301      	movs	r3, #1
 8008332:	61a3      	str	r3, [r4, #24]
 8008334:	e7d2      	b.n	80082dc <__sinit+0xc>
 8008336:	bf00      	nop
 8008338:	08008710 	.word	0x08008710
 800833c:	08008269 	.word	0x08008269

08008340 <__sfp>:
 8008340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008342:	4607      	mov	r7, r0
 8008344:	f7ff ffac 	bl	80082a0 <__sfp_lock_acquire>
 8008348:	4b1e      	ldr	r3, [pc, #120]	; (80083c4 <__sfp+0x84>)
 800834a:	681e      	ldr	r6, [r3, #0]
 800834c:	69b3      	ldr	r3, [r6, #24]
 800834e:	b913      	cbnz	r3, 8008356 <__sfp+0x16>
 8008350:	4630      	mov	r0, r6
 8008352:	f7ff ffbd 	bl	80082d0 <__sinit>
 8008356:	3648      	adds	r6, #72	; 0x48
 8008358:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800835c:	3b01      	subs	r3, #1
 800835e:	d503      	bpl.n	8008368 <__sfp+0x28>
 8008360:	6833      	ldr	r3, [r6, #0]
 8008362:	b30b      	cbz	r3, 80083a8 <__sfp+0x68>
 8008364:	6836      	ldr	r6, [r6, #0]
 8008366:	e7f7      	b.n	8008358 <__sfp+0x18>
 8008368:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800836c:	b9d5      	cbnz	r5, 80083a4 <__sfp+0x64>
 800836e:	4b16      	ldr	r3, [pc, #88]	; (80083c8 <__sfp+0x88>)
 8008370:	60e3      	str	r3, [r4, #12]
 8008372:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008376:	6665      	str	r5, [r4, #100]	; 0x64
 8008378:	f000 f847 	bl	800840a <__retarget_lock_init_recursive>
 800837c:	f7ff ff96 	bl	80082ac <__sfp_lock_release>
 8008380:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008384:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008388:	6025      	str	r5, [r4, #0]
 800838a:	61a5      	str	r5, [r4, #24]
 800838c:	2208      	movs	r2, #8
 800838e:	4629      	mov	r1, r5
 8008390:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008394:	f7fb fd6c 	bl	8003e70 <memset>
 8008398:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800839c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083a0:	4620      	mov	r0, r4
 80083a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a4:	3468      	adds	r4, #104	; 0x68
 80083a6:	e7d9      	b.n	800835c <__sfp+0x1c>
 80083a8:	2104      	movs	r1, #4
 80083aa:	4638      	mov	r0, r7
 80083ac:	f7ff ff62 	bl	8008274 <__sfmoreglue>
 80083b0:	4604      	mov	r4, r0
 80083b2:	6030      	str	r0, [r6, #0]
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d1d5      	bne.n	8008364 <__sfp+0x24>
 80083b8:	f7ff ff78 	bl	80082ac <__sfp_lock_release>
 80083bc:	230c      	movs	r3, #12
 80083be:	603b      	str	r3, [r7, #0]
 80083c0:	e7ee      	b.n	80083a0 <__sfp+0x60>
 80083c2:	bf00      	nop
 80083c4:	08008710 	.word	0x08008710
 80083c8:	ffff0001 	.word	0xffff0001

080083cc <_fwalk_reent>:
 80083cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d0:	4606      	mov	r6, r0
 80083d2:	4688      	mov	r8, r1
 80083d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083d8:	2700      	movs	r7, #0
 80083da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083de:	f1b9 0901 	subs.w	r9, r9, #1
 80083e2:	d505      	bpl.n	80083f0 <_fwalk_reent+0x24>
 80083e4:	6824      	ldr	r4, [r4, #0]
 80083e6:	2c00      	cmp	r4, #0
 80083e8:	d1f7      	bne.n	80083da <_fwalk_reent+0xe>
 80083ea:	4638      	mov	r0, r7
 80083ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083f0:	89ab      	ldrh	r3, [r5, #12]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d907      	bls.n	8008406 <_fwalk_reent+0x3a>
 80083f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083fa:	3301      	adds	r3, #1
 80083fc:	d003      	beq.n	8008406 <_fwalk_reent+0x3a>
 80083fe:	4629      	mov	r1, r5
 8008400:	4630      	mov	r0, r6
 8008402:	47c0      	blx	r8
 8008404:	4307      	orrs	r7, r0
 8008406:	3568      	adds	r5, #104	; 0x68
 8008408:	e7e9      	b.n	80083de <_fwalk_reent+0x12>

0800840a <__retarget_lock_init_recursive>:
 800840a:	4770      	bx	lr

0800840c <__retarget_lock_acquire_recursive>:
 800840c:	4770      	bx	lr

0800840e <__retarget_lock_release_recursive>:
 800840e:	4770      	bx	lr

08008410 <__swhatbuf_r>:
 8008410:	b570      	push	{r4, r5, r6, lr}
 8008412:	460e      	mov	r6, r1
 8008414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008418:	2900      	cmp	r1, #0
 800841a:	b096      	sub	sp, #88	; 0x58
 800841c:	4614      	mov	r4, r2
 800841e:	461d      	mov	r5, r3
 8008420:	da07      	bge.n	8008432 <__swhatbuf_r+0x22>
 8008422:	2300      	movs	r3, #0
 8008424:	602b      	str	r3, [r5, #0]
 8008426:	89b3      	ldrh	r3, [r6, #12]
 8008428:	061a      	lsls	r2, r3, #24
 800842a:	d410      	bmi.n	800844e <__swhatbuf_r+0x3e>
 800842c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008430:	e00e      	b.n	8008450 <__swhatbuf_r+0x40>
 8008432:	466a      	mov	r2, sp
 8008434:	f000 f902 	bl	800863c <_fstat_r>
 8008438:	2800      	cmp	r0, #0
 800843a:	dbf2      	blt.n	8008422 <__swhatbuf_r+0x12>
 800843c:	9a01      	ldr	r2, [sp, #4]
 800843e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008442:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008446:	425a      	negs	r2, r3
 8008448:	415a      	adcs	r2, r3
 800844a:	602a      	str	r2, [r5, #0]
 800844c:	e7ee      	b.n	800842c <__swhatbuf_r+0x1c>
 800844e:	2340      	movs	r3, #64	; 0x40
 8008450:	2000      	movs	r0, #0
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	b016      	add	sp, #88	; 0x58
 8008456:	bd70      	pop	{r4, r5, r6, pc}

08008458 <__smakebuf_r>:
 8008458:	898b      	ldrh	r3, [r1, #12]
 800845a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800845c:	079d      	lsls	r5, r3, #30
 800845e:	4606      	mov	r6, r0
 8008460:	460c      	mov	r4, r1
 8008462:	d507      	bpl.n	8008474 <__smakebuf_r+0x1c>
 8008464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	6123      	str	r3, [r4, #16]
 800846c:	2301      	movs	r3, #1
 800846e:	6163      	str	r3, [r4, #20]
 8008470:	b002      	add	sp, #8
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	ab01      	add	r3, sp, #4
 8008476:	466a      	mov	r2, sp
 8008478:	f7ff ffca 	bl	8008410 <__swhatbuf_r>
 800847c:	9900      	ldr	r1, [sp, #0]
 800847e:	4605      	mov	r5, r0
 8008480:	4630      	mov	r0, r6
 8008482:	f7ff f97f 	bl	8007784 <_malloc_r>
 8008486:	b948      	cbnz	r0, 800849c <__smakebuf_r+0x44>
 8008488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800848c:	059a      	lsls	r2, r3, #22
 800848e:	d4ef      	bmi.n	8008470 <__smakebuf_r+0x18>
 8008490:	f023 0303 	bic.w	r3, r3, #3
 8008494:	f043 0302 	orr.w	r3, r3, #2
 8008498:	81a3      	strh	r3, [r4, #12]
 800849a:	e7e3      	b.n	8008464 <__smakebuf_r+0xc>
 800849c:	4b0d      	ldr	r3, [pc, #52]	; (80084d4 <__smakebuf_r+0x7c>)
 800849e:	62b3      	str	r3, [r6, #40]	; 0x28
 80084a0:	89a3      	ldrh	r3, [r4, #12]
 80084a2:	6020      	str	r0, [r4, #0]
 80084a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a8:	81a3      	strh	r3, [r4, #12]
 80084aa:	9b00      	ldr	r3, [sp, #0]
 80084ac:	6163      	str	r3, [r4, #20]
 80084ae:	9b01      	ldr	r3, [sp, #4]
 80084b0:	6120      	str	r0, [r4, #16]
 80084b2:	b15b      	cbz	r3, 80084cc <__smakebuf_r+0x74>
 80084b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084b8:	4630      	mov	r0, r6
 80084ba:	f000 f8d1 	bl	8008660 <_isatty_r>
 80084be:	b128      	cbz	r0, 80084cc <__smakebuf_r+0x74>
 80084c0:	89a3      	ldrh	r3, [r4, #12]
 80084c2:	f023 0303 	bic.w	r3, r3, #3
 80084c6:	f043 0301 	orr.w	r3, r3, #1
 80084ca:	81a3      	strh	r3, [r4, #12]
 80084cc:	89a0      	ldrh	r0, [r4, #12]
 80084ce:	4305      	orrs	r5, r0
 80084d0:	81a5      	strh	r5, [r4, #12]
 80084d2:	e7cd      	b.n	8008470 <__smakebuf_r+0x18>
 80084d4:	08008269 	.word	0x08008269

080084d8 <_malloc_usable_size_r>:
 80084d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084dc:	1f18      	subs	r0, r3, #4
 80084de:	2b00      	cmp	r3, #0
 80084e0:	bfbc      	itt	lt
 80084e2:	580b      	ldrlt	r3, [r1, r0]
 80084e4:	18c0      	addlt	r0, r0, r3
 80084e6:	4770      	bx	lr

080084e8 <_raise_r>:
 80084e8:	291f      	cmp	r1, #31
 80084ea:	b538      	push	{r3, r4, r5, lr}
 80084ec:	4604      	mov	r4, r0
 80084ee:	460d      	mov	r5, r1
 80084f0:	d904      	bls.n	80084fc <_raise_r+0x14>
 80084f2:	2316      	movs	r3, #22
 80084f4:	6003      	str	r3, [r0, #0]
 80084f6:	f04f 30ff 	mov.w	r0, #4294967295
 80084fa:	bd38      	pop	{r3, r4, r5, pc}
 80084fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084fe:	b112      	cbz	r2, 8008506 <_raise_r+0x1e>
 8008500:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008504:	b94b      	cbnz	r3, 800851a <_raise_r+0x32>
 8008506:	4620      	mov	r0, r4
 8008508:	f000 f830 	bl	800856c <_getpid_r>
 800850c:	462a      	mov	r2, r5
 800850e:	4601      	mov	r1, r0
 8008510:	4620      	mov	r0, r4
 8008512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008516:	f000 b817 	b.w	8008548 <_kill_r>
 800851a:	2b01      	cmp	r3, #1
 800851c:	d00a      	beq.n	8008534 <_raise_r+0x4c>
 800851e:	1c59      	adds	r1, r3, #1
 8008520:	d103      	bne.n	800852a <_raise_r+0x42>
 8008522:	2316      	movs	r3, #22
 8008524:	6003      	str	r3, [r0, #0]
 8008526:	2001      	movs	r0, #1
 8008528:	e7e7      	b.n	80084fa <_raise_r+0x12>
 800852a:	2400      	movs	r4, #0
 800852c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008530:	4628      	mov	r0, r5
 8008532:	4798      	blx	r3
 8008534:	2000      	movs	r0, #0
 8008536:	e7e0      	b.n	80084fa <_raise_r+0x12>

08008538 <raise>:
 8008538:	4b02      	ldr	r3, [pc, #8]	; (8008544 <raise+0xc>)
 800853a:	4601      	mov	r1, r0
 800853c:	6818      	ldr	r0, [r3, #0]
 800853e:	f7ff bfd3 	b.w	80084e8 <_raise_r>
 8008542:	bf00      	nop
 8008544:	2000000c 	.word	0x2000000c

08008548 <_kill_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	4d07      	ldr	r5, [pc, #28]	; (8008568 <_kill_r+0x20>)
 800854c:	2300      	movs	r3, #0
 800854e:	4604      	mov	r4, r0
 8008550:	4608      	mov	r0, r1
 8008552:	4611      	mov	r1, r2
 8008554:	602b      	str	r3, [r5, #0]
 8008556:	f7f9 f941 	bl	80017dc <_kill>
 800855a:	1c43      	adds	r3, r0, #1
 800855c:	d102      	bne.n	8008564 <_kill_r+0x1c>
 800855e:	682b      	ldr	r3, [r5, #0]
 8008560:	b103      	cbz	r3, 8008564 <_kill_r+0x1c>
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	bd38      	pop	{r3, r4, r5, pc}
 8008566:	bf00      	nop
 8008568:	200002e0 	.word	0x200002e0

0800856c <_getpid_r>:
 800856c:	f7f9 b92e 	b.w	80017cc <_getpid>

08008570 <__sread>:
 8008570:	b510      	push	{r4, lr}
 8008572:	460c      	mov	r4, r1
 8008574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008578:	f000 f894 	bl	80086a4 <_read_r>
 800857c:	2800      	cmp	r0, #0
 800857e:	bfab      	itete	ge
 8008580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008582:	89a3      	ldrhlt	r3, [r4, #12]
 8008584:	181b      	addge	r3, r3, r0
 8008586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800858a:	bfac      	ite	ge
 800858c:	6563      	strge	r3, [r4, #84]	; 0x54
 800858e:	81a3      	strhlt	r3, [r4, #12]
 8008590:	bd10      	pop	{r4, pc}

08008592 <__swrite>:
 8008592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008596:	461f      	mov	r7, r3
 8008598:	898b      	ldrh	r3, [r1, #12]
 800859a:	05db      	lsls	r3, r3, #23
 800859c:	4605      	mov	r5, r0
 800859e:	460c      	mov	r4, r1
 80085a0:	4616      	mov	r6, r2
 80085a2:	d505      	bpl.n	80085b0 <__swrite+0x1e>
 80085a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a8:	2302      	movs	r3, #2
 80085aa:	2200      	movs	r2, #0
 80085ac:	f000 f868 	bl	8008680 <_lseek_r>
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	4632      	mov	r2, r6
 80085be:	463b      	mov	r3, r7
 80085c0:	4628      	mov	r0, r5
 80085c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085c6:	f000 b817 	b.w	80085f8 <_write_r>

080085ca <__sseek>:
 80085ca:	b510      	push	{r4, lr}
 80085cc:	460c      	mov	r4, r1
 80085ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d2:	f000 f855 	bl	8008680 <_lseek_r>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	bf15      	itete	ne
 80085dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80085de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085e6:	81a3      	strheq	r3, [r4, #12]
 80085e8:	bf18      	it	ne
 80085ea:	81a3      	strhne	r3, [r4, #12]
 80085ec:	bd10      	pop	{r4, pc}

080085ee <__sclose>:
 80085ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f2:	f000 b813 	b.w	800861c <_close_r>
	...

080085f8 <_write_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	4d07      	ldr	r5, [pc, #28]	; (8008618 <_write_r+0x20>)
 80085fc:	4604      	mov	r4, r0
 80085fe:	4608      	mov	r0, r1
 8008600:	4611      	mov	r1, r2
 8008602:	2200      	movs	r2, #0
 8008604:	602a      	str	r2, [r5, #0]
 8008606:	461a      	mov	r2, r3
 8008608:	f7f9 f91f 	bl	800184a <_write>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	d102      	bne.n	8008616 <_write_r+0x1e>
 8008610:	682b      	ldr	r3, [r5, #0]
 8008612:	b103      	cbz	r3, 8008616 <_write_r+0x1e>
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	bd38      	pop	{r3, r4, r5, pc}
 8008618:	200002e0 	.word	0x200002e0

0800861c <_close_r>:
 800861c:	b538      	push	{r3, r4, r5, lr}
 800861e:	4d06      	ldr	r5, [pc, #24]	; (8008638 <_close_r+0x1c>)
 8008620:	2300      	movs	r3, #0
 8008622:	4604      	mov	r4, r0
 8008624:	4608      	mov	r0, r1
 8008626:	602b      	str	r3, [r5, #0]
 8008628:	f7f9 f92b 	bl	8001882 <_close>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	d102      	bne.n	8008636 <_close_r+0x1a>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	b103      	cbz	r3, 8008636 <_close_r+0x1a>
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	bd38      	pop	{r3, r4, r5, pc}
 8008638:	200002e0 	.word	0x200002e0

0800863c <_fstat_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	4d07      	ldr	r5, [pc, #28]	; (800865c <_fstat_r+0x20>)
 8008640:	2300      	movs	r3, #0
 8008642:	4604      	mov	r4, r0
 8008644:	4608      	mov	r0, r1
 8008646:	4611      	mov	r1, r2
 8008648:	602b      	str	r3, [r5, #0]
 800864a:	f7f9 f926 	bl	800189a <_fstat>
 800864e:	1c43      	adds	r3, r0, #1
 8008650:	d102      	bne.n	8008658 <_fstat_r+0x1c>
 8008652:	682b      	ldr	r3, [r5, #0]
 8008654:	b103      	cbz	r3, 8008658 <_fstat_r+0x1c>
 8008656:	6023      	str	r3, [r4, #0]
 8008658:	bd38      	pop	{r3, r4, r5, pc}
 800865a:	bf00      	nop
 800865c:	200002e0 	.word	0x200002e0

08008660 <_isatty_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	4d06      	ldr	r5, [pc, #24]	; (800867c <_isatty_r+0x1c>)
 8008664:	2300      	movs	r3, #0
 8008666:	4604      	mov	r4, r0
 8008668:	4608      	mov	r0, r1
 800866a:	602b      	str	r3, [r5, #0]
 800866c:	f7f9 f925 	bl	80018ba <_isatty>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d102      	bne.n	800867a <_isatty_r+0x1a>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	b103      	cbz	r3, 800867a <_isatty_r+0x1a>
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	200002e0 	.word	0x200002e0

08008680 <_lseek_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4d07      	ldr	r5, [pc, #28]	; (80086a0 <_lseek_r+0x20>)
 8008684:	4604      	mov	r4, r0
 8008686:	4608      	mov	r0, r1
 8008688:	4611      	mov	r1, r2
 800868a:	2200      	movs	r2, #0
 800868c:	602a      	str	r2, [r5, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	f7f9 f91e 	bl	80018d0 <_lseek>
 8008694:	1c43      	adds	r3, r0, #1
 8008696:	d102      	bne.n	800869e <_lseek_r+0x1e>
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	b103      	cbz	r3, 800869e <_lseek_r+0x1e>
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	bd38      	pop	{r3, r4, r5, pc}
 80086a0:	200002e0 	.word	0x200002e0

080086a4 <_read_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	4d07      	ldr	r5, [pc, #28]	; (80086c4 <_read_r+0x20>)
 80086a8:	4604      	mov	r4, r0
 80086aa:	4608      	mov	r0, r1
 80086ac:	4611      	mov	r1, r2
 80086ae:	2200      	movs	r2, #0
 80086b0:	602a      	str	r2, [r5, #0]
 80086b2:	461a      	mov	r2, r3
 80086b4:	f7f9 f8ac 	bl	8001810 <_read>
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	d102      	bne.n	80086c2 <_read_r+0x1e>
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	b103      	cbz	r3, 80086c2 <_read_r+0x1e>
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	200002e0 	.word	0x200002e0

080086c8 <_init>:
 80086c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ca:	bf00      	nop
 80086cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ce:	bc08      	pop	{r3}
 80086d0:	469e      	mov	lr, r3
 80086d2:	4770      	bx	lr

080086d4 <_fini>:
 80086d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d6:	bf00      	nop
 80086d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086da:	bc08      	pop	{r3}
 80086dc:	469e      	mov	lr, r3
 80086de:	4770      	bx	lr
